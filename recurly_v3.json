{
  "openapi": "3.0.0",
  "info": {
    "title": "Recurly V3 API",
    "description": "# Getting Started\n\n## Versioning\nThe V3 API is versioned to allow stability for integrators and\nflexibility for Recurly to continue making improvements.\n\nThe versions follow a format that incorporates the approximate date the\nchanges were released in a YYYY-MM-DD format, e.g. `v2019-10-10`.\n\n> *WARNING*: Specifying a version is required to get a successful response.\n\nEach request should specify a version using the `Accept` header:\n* `Accept: application/vnd.recurly.v2019-10-10`\n* `Accept: application/vnd.recurly.v2019-10-10+json`\n\nAll responses will include a `Recurly-Version` header with the API version\nused to process the request:\n```\nRecurly-Version: recurly.v2019-10-10\n```\n\n### Default Versions\nSpecifying a version is required to get a successful response. If you wish to\nreceive the latest version and are willing to accept the risk of breaking changes,\nyou may specify a version of `latest`.\n\nThe following media types will default the newest version of\nthe API:\n\n* `application/vnd.recurly.latest`\n* `application/vnd.recurly.latest+json`\n\n### Deprecation\nResponses for a deprecated version request will return two headers:\n```\nRecurly-Deprecated: TRUE\nRecurly-Sunset-Date: 2017-06-01T00:00:00+00:00\n```\nThe sunset date is an ISO-8601 formatted date time after which the version\nwill no longer be accessible.\n\n### Unsupported Versions\nA request for an unsupported version will return a status code of 406 and\nthe body will include a list of supported versions:\n```\n{\n  \"error\": {\n    \"type\": \"invalid_api_version\",\n    \"message\": \"That accept header isn't in the format we use to specify an API version. Try one of these instead:\",\n    \"acceptable_accept_headers\": [\n      \"application/vnd.recurly.v2016-03-01\",\n      \"application/vnd.recurly.v2016-04-27\",\n      \"application/vnd.recurly.v2016-07-27\",\n      \"application/vnd.recurly.v2016-12-15\",\n      \"application/vnd.recurly.v2017-01-12\",\n      \"application/vnd.recurly.v2017-09-30\",\n      \"application/vnd.recurly.v2018-01-24\",\n      \"application/vnd.recurly.v2018-05-10\",\n      \"application/vnd.recurly.v2018-06-06\",\n      \"application/vnd.recurly.v2018-08-09\",\n      \"application/vnd.recurly.v2019-10-10\"\n    ]\n  }\n}\n```\n\n## Error Messages\nError messages sent via the Recurly API are generally directed at\ndevelopers and those who are familiar with API technology. When using the\nAPI and passing error messages to target systems, be mindful that\nthese messages may not make sense in the context of the target system.\nPlease consider changing these messages in target system to be better\nsuited to the audience of the system.\n\n## Pagination\n### Response Schema\nEvery GET listing endpoint returns a response with the same schema:\n\n```\n{\n  \"object\":   \"list\",         // Always \"list\"\n  \"has_more\": true,           // false if this is the last page of data\n  \"next\":     \"https://...\",  // A URL pointing to the next page of data\n  \"data\":     []              // The data for this page as an array\n}\n```\n\nTo page through every record, your code should continually call the URL\nat `next` until `has_more` is `false`.\n\n### Query Parameters\nMost GET listing endpoints take query parameters that allow filtering\nand sorting the results. Some endpoints have additional parameters, which are\ndocumented on the respective endpoints, but most support the\nfollowing parameters:\n\n* `ids`: A comma separated list of ids to match.\n* `limit`: The number of records to return per page.\n* `order`: The sort order of records.\n* `sort`: The date field to use in sorting.\n* `begin_time`: The start datetime to filter (ISO 8601).\n* `end_time`: The end datetime to filter (ISO 8601).\n\n### Counting with HEAD\nEvery GET listing endpoint also supports the HEAD HTTP method. Making a\nhead request to the endpoint results in an empty body and an additional\n`Recurly-Total-Records` header. This is a count of the total number of records\nthat the endpoint will return, taking into account the current filtering query\nparameters.\n\n## Limits\nIn order to provide a fast response time to all our customers, we may rate\nlimit excessive requests. By default, new Recurly sites have the following\nAPI rate limits:\n\n* Sandbox sites: 400 requests/min. All requests count towards the rate limit.\n* Production sites: 1,000 requests/min. Only GET requests count towards the rate limit.\n\nOnce your site moves into production mode, Recurly will only rate limit\nGET requests. New subscriptions, account modifications, and other requests\nusing POST, PUT, or DELETE methods will not count against your rate limit.\n\nThe rate limit is calculated over a sliding 5 minute window. This means a\nproduction site could make 4,000 requests within one minute and not hit\nthe rate limit so long as the site made less than 1,000 requests during\nthe prior 4 minutes.\n\nIf an API request exceeds the rate limit, the API will return a\n`429 Too Many Requests` HTTP status. If your business needs a higher\nlimit, please contact support.\n\nThe rate limit applied to your client can be determined with the\n`X-RateLimit-Limit` header, and the number of remaining requests is sent\nin the `X-RateLimit-Remaining` header. Finally, the `X-RateLimit-Reset`\nheader contains an integer value representing the time, measured in\nseconds since the UNIX Epoch, at which the request count will be reset.\n\n## Change Log\n\nA list of changes for this version can be found [in the changelog](https://developers.recurly.com/api/changelog.html#v2019-10-10).\n",
    "version": "v2019-10-10"
  },
  "servers": [
    {
      "url": "https://v3.recurly.com"
    }
  ],
  "security": [
    {
      "api_key": []
    }
  ],
  "tags": [
    {
      "name": "site",
      "x-displayName": "Site"
    },
    {
      "name": "custom_field_definition",
      "description": "Describes the fields that can use used as custom fields on accounts or subscriptions.",
      "x-displayName": "Custom Field Definition"
    },
    {
      "name": "item",
      "description": "For merchants who sell the same things to many customers, documenting those offerings in a catalog allows for faster charge creation, easier management of offerings, and analytics about your offerings across all sales channels. Because your offerings can be physical, digital, or service-oriented, Recurly collectively calls these offerings \"Items\".\n\nRecurly's item catalog requires the Credit Invoices and Subscription Billing Terms features to be enabled.",
      "x-displayName": "Item"
    },
    {
      "name": "plan",
      "description": "A plan tells Recurly how often and how much to charge your customers. Plans can be created with free trials, optional products (called add-ons), setup fees, and more.",
      "x-displayName": "Plan"
    },
    {
      "name": "add-on",
      "description": "An add-on is a charge billed each billing period in addition to a subscriptionâ€™s base charge. Each plan may have one or more add-ons associated with it.",
      "x-displayName": "Add-on"
    },
    {
      "name": "account",
      "description": "Accounts are core to managing your customers inside of Recurly. The account object stores the entire Recurly history of your customer and acts as the entry point for working with a customer's billing information, subscription data, transactions, invoices and more.",
      "x-displayName": "Account"
    },
    {
      "name": "note",
      "description": "Account notes allow your team to leave notes on an account to add context, e.g. the reason for a refund, customer requests, and/or complaints. These notes are internal and not exposed to your customers.",
      "x-displayName": "Account Note"
    },
    {
      "name": "account_acquisition",
      "description": "Recurly offers the ability to record marketing data on customer accounts to match this data with revenue and billing data events in Recurly.",
      "x-displayName": "Account Acquisition Info"
    },
    {
      "name": "billing_info",
      "description": "An account can have one stored payment method at a time. This can be a credit card, PayPal, or bank account. Billing info is usually filled out by the customer upon purchase or when they update their information.",
      "x-displayName": "Billing Info"
    },
    {
      "name": "subscription",
      "description": "Subscriptions are created when your customers subscribe to one of your plans. The customer's subscription tells Recurly when and how much to bill the customer.",
      "x-displayName": "Subscription"
    },
    {
      "name": "subscription_change",
      "description": "Subscription changes alter subscription in a way that might affect the invoiced amount, such as changing the plan, add-ons, quantities, or shipping address. Changes can be made immediately in the current billing cycle or scheduled to take place at the next renewal.",
      "x-displayName": "Subscription Change"
    },
    {
      "name": "shipping_address",
      "description": "Shipping addresses are tied to a customer's account. Each account can have up to 20 different shipping addresses, and if you have enabled multiple subscriptions per account, you can associate different shipping addresses to each subscription.",
      "x-displayName": "Shipping Address"
    },
    {
      "name": "invoice",
      "description": "An invoice relates charges, credits, and payments together. When a subscription is created or renewed or a charge is created on the account, Recurly will sum the charges, discount or tax as appropriate, and send the invoice out for collection.",
      "x-displayName": "Invoice"
    },
    {
      "name": "line_item",
      "description": "Line items are the charges and credits on your customer's invoices.",
      "x-displayName": "Line Item"
    },
    {
      "name": "credit_payment",
      "x-displayName": "Credit Payment"
    },
    {
      "name": "purchase",
      "description": "A purchase is a checkout containing at least one or more subscriptions or one-time charges (line items) and supports both coupon and gift card redemptions. All items purchased will be on one invoice and paid for with one transaction.",
      "x-displayName": "Purchase"
    },
    {
      "name": "transaction",
      "description": "Purchasing information is sent to your payment gateway in an action called a transaction. This includes the customer's billing information and the amount of money to be charged, voided, or refunded.",
      "x-displayName": "Transaction"
    },
    {
      "name": "coupon",
      "description": "Coupons can either be single codes that easily allow mass distribution by many customers or bulk coupons that can generate many unique coupons that can allow for individual delivery and tracking.",
      "x-displayName": "Coupon"
    },
    {
      "name": "coupon_redemption",
      "description": "Coupon redemptions are created when a coupon is applied to an account. This allows you to track your promotions.",
      "x-displayName": "Coupon Redemption"
    },
    {
      "name": "unique_coupon_code",
      "description": "Unique coupon codes are generated from bulk coupons.",
      "x-displayName": "Unique Coupon Code"
    },
    {
      "name": "shipping_method",
      "description": "Shipping methods offered to send products to customers.",
      "x-displayName": "Shipping Method"
    }
  ],
  "paths": {
    "/sites": {
      "get": {
        "tags": [
          "site"
        ],
        "summary": "List sites",
        "description": "This route is most useful for finding a site's ID for subsequent requests.",
        "operationId": "list_sites",
        "parameters": [
          {
            "name": "ids",
            "in": "query",
            "description": "Filter results by their IDs. Up to 200 IDs can be passed at once using\ncommas as separators, e.g. `ids=h1at4d57xlmy,gyqgg0d3v9n1,jrsm5b4yefg6`.\n\n**Important notes:**\n\n* The `ids` parameter cannot be used with any other ordering or filtering\n  parameters (`limit`, `order`, `sort`, `begin_time`, `end_time`, etc)\n* Invalid or unknown IDs will be ignored, so you should check that the\n  results correspond to your request.\n* Records are returned in an arbitrary order. Since results are all\n  returned at once you can sort the records yourself.\n",
            "required": false,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit number of records 1-200.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maximum": 200,
              "minimum": 1,
              "type": "integer",
              "default": 20
            }
          },
          {
            "name": "order",
            "in": "query",
            "description": "Sort order.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "default": "desc",
              "enum": [
                "asc",
                "desc"
              ]
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort field. You *really* only want to sort by `updated_at` in ascending\norder. In descending order updated records will move behind the cursor and could\nprevent some records from being returned.\n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "default": "created_at",
              "enum": [
                "created_at",
                "updated_at"
              ]
            }
          },
          {
            "name": "state",
            "in": "query",
            "description": "Filter by state.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": [
                "active",
                "inactive"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of sites.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SiteList"
                }
              }
            }
          },
          "400": {
            "description": "Invalid or unpermitted parameter.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "Node.js",
            "source": "const sites = client.listSites({ limit: 200 })\n\nfor await (const site of sites.each()) {\n  console.log(site.subdomain)\n}\n"
          },
          {
            "lang": "Python",
            "source": "sites = client.list_sites(limit=200).items()\nfor site in sites:\n    print(site.subdomain)\n"
          },
          {
            "lang": ".NET",
            "source": "var sites = client.ListSites(limit: 200);\nforeach(Site site in sites)\n{\n    Console.WriteLine(site.Subdomain);\n}\n"
          },
          {
            "lang": "Ruby",
            "source": "sites = @client.list_sites(limit: 200)\nsites.each do |site|\n  puts \"Site: #{site.subdomain}\"\nend\n"
          },
          {
            "lang": "Java",
            "source": "QueryParams params = new QueryParams();\nparams.setLimit(200); // Pull 200 records at a time\nfinal Pager<Site> sites = client.listSites(params);\n\nfor (Site site : sites) {\n    System.out.println(site.getSubdomain());\n}\n"
          },
          {
            "lang": "PHP",
            "source": "$params = ['limit' => 200];\n$sites = $client->listSites($params);\n\nforeach($sites as $site) {\n  echo 'Site: ' . $site->getSubdomain() . PHP_EOL;\n}\n"
          },
          {
            "lang": "Go",
            "source": "listParams := &recurly.ListSitesParams{\n\tSort:  recurly.String(\"created_at\"),\n\tOrder: recurly.String(\"asc\"),\n\tLimit: recurly.Int(200),\n}\n\nsites := client.ListSites(listParams)\n\nfor sites.HasMore {\n\terr := sites.Fetch()\n\tif e, ok := err.(*recurly.Error); ok {\n\t\tfmt.Printf(\"Failed to retrieve next page: %v\", e)\n\t\tbreak\n\t}\n\tfor i, site := range sites.Data {\n\t\tfmt.Printf(\"Site %3d: %s, %s\\n\",\n\t\t\ti,\n\t\t\tsite.Id,\n\t\t\tsite.Subdomain,\n\t\t)\n\t}\n}"
          }
        ]
      }
    },
    "/sites/{site_id}": {
      "get": {
        "tags": [
          "site"
        ],
        "summary": "Fetch a site",
        "operationId": "get_site",
        "parameters": [
          {
            "name": "site_id",
            "in": "path",
            "description": "Site ID or subdomain. For ID no prefix is used e.g. `e28zov4fw0v2`. For subdomain use prefix `subdomain-`, e.g. `subdomain-recurly`.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A site.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Site"
                }
              }
            }
          },
          "404": {
            "description": "Incorrect site ID.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "Node.js",
            "source": "try {\n  const site = await client.getSite(siteId)\n  console.log('Fetched site: ', site)\n} catch (err) {\n  if (err instanceof recurly.errors.NotFoundError) {\n    // If the request was not found, you may want to alert the user or\n    // just return null\n    console.log('Resource Not Found')\n  } else {\n    // If we don't know what to do with the err, we should\n    // probably re-raise and let our web framework and logger handle it\n    console.log('Unknown Error: ', err)\n  }\n}\n"
          },
          {
            "lang": "Python",
            "source": "try:\n    site = client.get_site(site_id)\n    print(\"Got Site %s\" % site)\nexcept recurly.errors.NotFoundError:\n    # If the resource was not found, you may want to alert the user or\n    # just return nil\n    print(\"Resource Not Found\")\n"
          },
          {
            "lang": ".NET",
            "source": "try\n{\n    Site site = client.GetSite(siteId);\n    Console.WriteLine($\"Fetched site {site.Id}\");\n}\ncatch (Recurly.Errors.NotFound ex)\n{\n    // If the resource was not found\n    // we may want to alert the user or just return null\n    Console.WriteLine($\"Resource Not Found: {ex.Error.Message}\");\n}\ncatch (Recurly.Errors.ApiError ex)\n{\n    // Use ApiError to catch a generic error from the API\n    Console.WriteLine($\"Unexpected Recurly Error: {ex.Error.Message}\");\n}\n"
          },
          {
            "lang": "Ruby",
            "source": "begin\n  site = @client.get_site(site_id: site_id)\n  puts \"Got Site #{site}\"\nrescue Recurly::Errors::NotFoundError\n  # If the resource was not found, you may want to alert the user or\n  # just return nil\n  puts \"Resource Not Found\"\nend\n"
          },
          {
            "lang": "Java",
            "source": "try {\n    final Site site = client.getSite(siteId);\n    System.out.println(\"Fetched site: \" + site.getId());\n  } catch (NotFoundException e) {\n    // If the resource was not found\n    // we may want to alert the user or just return null\n    System.out.println(\"Resource Not Found: \" + e.getError().getMessage());\n} catch (ApiException e) {\n    // Use ApiException to catch a generic error from the API\n    System.out.println(\"Unexpected Recurly Error: \" + e.getError().getMessage());\n}\n"
          },
          {
            "lang": "PHP",
            "source": "try {\n    $site = $client->getSite($site_id);\n\n    echo 'Got Site:' . PHP_EOL;\n    var_dump($site);\n} catch (\\Recurly\\Errors\\NotFound $e) {\n    // Could not find the resource, you may want to inform the user\n    // or just return a NULL\n    echo 'Could not find resource.' . PHP_EOL;\n    var_dump($e);\n} catch (\\Recurly\\RecurlyError $e) {\n    // Something bad happened... tell the user so that they can fix it?\n    echo 'Some unexpected Recurly error happened. Try again later.' . PHP_EOL;\n}\n"
          },
          {
            "lang": "Go",
            "source": "site, err := client.GetSite(siteID)\nif e, ok := err.(*recurly.Error); ok {\n\tif e.Type == recurly.ErrorTypeNotFound {\n\t\tfmt.Printf(\"Resource not found: %v\", e)\n\t\treturn nil, err\n\t}\n\tfmt.Printf(\"Unexpected Recurly error: %v\", e)\n\treturn nil, err\n}\nfmt.Printf(\"Fetched Site: %s\", site.Id)"
          }
        ]
      }
    },
    "/sites/{site_id}/accounts": {
      "get": {
        "tags": [
          "account"
        ],
        "summary": "List a site's accounts",
        "operationId": "list_accounts",
        "parameters": [
          {
            "name": "site_id",
            "in": "path",
            "description": "Site ID or subdomain. For ID no prefix is used e.g. `e28zov4fw0v2`. For subdomain use prefix `subdomain-`, e.g. `subdomain-recurly`.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ids",
            "in": "query",
            "description": "Filter results by their IDs. Up to 200 IDs can be passed at once using\ncommas as separators, e.g. `ids=h1at4d57xlmy,gyqgg0d3v9n1,jrsm5b4yefg6`.\n\n**Important notes:**\n\n* The `ids` parameter cannot be used with any other ordering or filtering\n  parameters (`limit`, `order`, `sort`, `begin_time`, `end_time`, etc)\n* Invalid or unknown IDs will be ignored, so you should check that the\n  results correspond to your request.\n* Records are returned in an arbitrary order. Since results are all\n  returned at once you can sort the records yourself.\n",
            "required": false,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit number of records 1-200.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maximum": 200,
              "minimum": 1,
              "type": "integer",
              "default": 20
            }
          },
          {
            "name": "order",
            "in": "query",
            "description": "Sort order.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "default": "desc",
              "enum": [
                "asc",
                "desc"
              ]
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort field. You *really* only want to sort by `updated_at` in ascending\norder. In descending order updated records will move behind the cursor and could\nprevent some records from being returned.\n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "default": "created_at",
              "enum": [
                "created_at",
                "updated_at"
              ]
            }
          },
          {
            "name": "begin_time",
            "in": "query",
            "description": "Filter by begin_time when `sort=created_at` or `sort=updated_at`.\n**Note:** this value is an ISO8601 timestamp. A partial timestamp that does not include a time zone will default to UTC.\n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "end_time",
            "in": "query",
            "description": "Filter by end_time when `sort=created_at` or `sort=updated_at`.\n**Note:** this value is an ISO8601 timestamp. A partial timestamp that does not include a time zone will default to UTC.\n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "email",
            "in": "query",
            "description": "Filter for accounts with this exact email address. A blank value will return accounts with both `null` and `\"\"` email addresses. Note that multiple accounts can share one email address.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "subscriber",
            "in": "query",
            "description": "Filter for accounts with or without a subscription in the `active`,\n`canceled`, or `future` state.\n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "past_due",
            "in": "query",
            "description": "Filter for accounts with an invoice in the `past_due` state.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": [
                "true"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of the site's accounts.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountList"
                }
              }
            }
          },
          "400": {
            "description": "Invalid or unpermitted parameter.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Incorrect site ID.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "Node.js",
            "source": "const accounts = client.listAccounts({ limit: 200 })\n\nfor await (const account of accounts.each()) {\n  console.log(account.code)\n}\n"
          },
          {
            "lang": "Python",
            "source": "accounts = client.list_accounts(limit=200).items()\nfor account in accounts:\n    print(account.code)\n"
          },
          {
            "lang": ".NET",
            "source": "var accounts = client.ListAccounts(limit: 200);\nforeach(Account account in accounts)\n{\n    Console.WriteLine(account.Code);\n}\n"
          },
          {
            "lang": "Ruby",
            "source": "accounts = @client.list_accounts(limit: 200)\naccounts.each do |account|\n  puts \"Account: #{account.code}\"\nend\n"
          },
          {
            "lang": "Java",
            "source": "QueryParams params = new QueryParams();\nparams.setLimit(200); // Pull 200 records at a time\nPager<Account> accounts = client.listAccounts(params);\n\nfor (Account acct : accounts) {\n    System.out.println(acct.getCode());\n}\n"
          },
          {
            "lang": "PHP",
            "source": "$params = [\n    'limit' => 200,\n];\n$accounts = $client->listAccounts($params);\n\nforeach($accounts as $account) {\n    echo 'Account code: ' . $account->getCode() . PHP_EOL;\n}\n"
          },
          {
            "lang": "Go",
            "source": "listParams := &recurly.ListAccountsParams{\n\tSort:  recurly.String(\"created_at\"),\n\tOrder: recurly.String(\"desc\"),\n\tLimit: recurly.Int(200),\n}\naccounts := client.ListAccounts(listParams)\n\nfor accounts.HasMore {\n\terr := accounts.Fetch()\n\tif e, ok := err.(*recurly.Error); ok {\n\t\tfmt.Printf(\"Failed to retrieve next page: %v\", e)\n\t\tbreak\n\t}\n\tfor i, account := range accounts.Data {\n\t\tfmt.Printf(\"Account %3d: %s, %s\\n\",\n\t\t\ti,\n\t\t\taccount.Id,\n\t\t\taccount.Code,\n\t\t)\n\t}\n}"
          }
        ]
      },
      "post": {
        "tags": [
          "account"
        ],
        "summary": "Create an account",
        "operationId": "create_account",
        "parameters": [
          {
            "name": "site_id",
            "in": "path",
            "description": "Site ID or subdomain. For ID no prefix is used e.g. `e28zov4fw0v2`. For subdomain use prefix `subdomain-`, e.g. `subdomain-recurly`.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccountCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "An account.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Account"
                }
              }
            }
          },
          "400": {
            "description": "Bad request, perhaps invalid JSON?",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Incorrect site ID.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "422": {
            "description": "Invalid parameters or an error running the billing info verification transaction.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "Node.js",
            "source": "try {\n  const accountCreate = {\n    code: accountCode,\n    firstName: 'Benjamin',\n    lastName: 'Du Monde',\n    address: {\n      street1: '900 Camp St',\n      city: 'New Orleans',\n      region: 'LA',\n      postalCode: '70115',\n      country: 'US'\n    }\n  }\n  const account = await client.createAccount(accountCreate)\n  console.log('Created Account: ', account.code)\n} catch (err) {\n  if (err instanceof recurly.errors.ValidationError) {\n    // If the request was not valid, you may want to tell your user\n    // why. You can find the invalid params and reasons in err.params\n    console.log('Failed validation', err.params)\n  } else {\n    // If we don't know what to do with the err, we should\n    // probably re-raise and let our web framework and logger handle it\n    console.log('Unknown Error: ', err)\n  }\n}\n"
          },
          {
            "lang": "Python",
            "source": "try:\n    account_create = {\n        \"code\": account_code,\n        \"first_name\": \"Benjamin\",\n        \"last_name\": \"Du Monde\",\n        \"acquisition\": {\n            \"campaign\": \"podcast-marketing\",\n            \"channel\": \"social_media\",\n            \"subchannel\": \"twitter\",\n            \"cost\": {\"currency\": \"USD\", \"amount\": 0.50},\n        },\n        \"shipping_addresses\": [\n            {\n                \"nickname\": \"Home\",\n                \"street1\": \"1 Tchoupitoulas St\",\n                \"city\": \"New Orleans\",\n                \"region\": \"LA\",\n                \"country\": \"US\",\n                \"postal_code\": \"70115\",\n                \"first_name\": \"Aaron\",\n                \"last_name\": \"Du Monde\",\n            }\n        ],\n    }\n    account = client.create_account(account_create)\n    print(\"Created Account %s\" % account)\nexcept recurly.errors.ValidationError as e:\n    # If the request was invalid, you may want to tell your user\n    # why. You can find the invalid params and reasons in e.error.params\n    print(\"ValidationError: %s\" % e.error.message)\n    print(e.error.params)\n"
          },
          {
            "lang": ".NET",
            "source": "try\n{\n    var accountReq = new AccountCreate()\n    {\n        Code = accountCode,\n        FirstName = \"Benjamin\",\n        LastName = \"Du Monde\",\n        Address = new Address()\n        {\n            City = \"New Orleans\",\n            Region = \"LA\",\n            Country = \"US\",\n            PostalCode = \"70115\",\n            Street1 = \"900 Camp St.\"\n        }\n    };\n    Account account = client.CreateAccount(accountReq);\n    Console.WriteLine($\"Created account {account.Code}\");\n}\ncatch (Recurly.Errors.Validation ex)\n{\n    // If the request was not valid, you may want to tell your user\n    // why. You can find the invalid params and reasons in ex.Error.Params\n    Console.WriteLine($\"Failed validation: {ex.Error.Message}\");\n}\ncatch (Recurly.Errors.ApiError ex)\n{\n    // Use ApiError to catch a generic error from the API\n    Console.WriteLine($\"Unexpected Recurly Error: {ex.Error.Message}\");\n}\n"
          },
          {
            "lang": "Ruby",
            "source": "begin\n  account_create = {\n    code: account_code,\n    first_name: \"Benjamin\",\n    last_name: \"Du Monde\",\n    acquisition: {\n      campaign: \"podcast-marketing\",\n      channel: \"social_media\",\n      subchannel: \"twitter\",\n      cost: {\n        currency: \"USD\",\n        amount: 0.50\n      }\n    },\n    shipping_addresses: [\n      {\n        nickname: \"Home\",\n        street1: \"1 Tchoupitoulas St\",\n        city: \"New Orleans\",\n        region: \"LA\",\n        country: \"US\",\n        postal_code: \"70115\",\n        first_name: \"Benjamin\",\n        last_name: \"Du Monde\"\n      }\n    ]\n  }\n  account = @client.create_account(body: account_create)\n  puts \"Created Account #{account}\"\nrescue Recurly::Errors::ValidationError => e\n  # If the request was invalid, you may want to tell your user\n  # why. You can find the invalid params and reasons in e.recurly_error.params\n  puts \"ValidationError: #{e.recurly_error.params}\"\nend\n"
          },
          {
            "lang": "Java",
            "source": "try {\n    AccountCreate accountReq = new AccountCreate();\n    Address address = new Address();\n\n    accountReq.setCode(accountCode);\n    accountReq.setFirstName(\"Aaron\");\n    accountReq.setLastName(\"Du Monde\");\n\n    address.setStreet1(\"900 Camp St.\");\n    address.setCity(\"New Orleans\");\n    address.setRegion(\"LA\");\n    address.setCountry(\"US\");\n    address.setPostalCode(\"70115\");\n\n    accountReq.setAddress(address);\n\n    Account account = client.createAccount(accountReq);\n    System.out.println(\"Created account \" + account.getCode());\n} catch (ValidationException e) {\n    // If the request was not valid, you may want to tell your user\n    // why. You can find the invalid params and reasons in e.getError().getParams()\n    System.out.println(\"Failed validation: \" + e.getError().getMessage());\n} catch (ApiException e) {\n    // Use ApiException to catch a generic error from the API\n    System.out.println(\"Unexpected Recurly Error: \" + e.getError().getMessage());\n}\n"
          },
          {
            "lang": "PHP",
            "source": "try {\n    $account_create = array(\n        \"code\" => $account_code,\n        \"first_name\" => \"Douglas\",\n        \"last_name\" => \"DuMonde\",\n        \"shipping_addresses\" => [\n            [\n                \"first_name\" => \"Douglas\",\n                \"last_name\" => \"DuMonde\",\n                \"nickname\" => \"nola\",\n                \"street1\" => \"1 Tchoupitoulas\",\n                \"city\" => \"New Orleans\",\n                \"postal_code\" => \"70130\",\n                \"country\" => \"US\"\n            ]\n        ]\n    );\n\n    $account = $client->createAccount($account_create);\n\n    echo 'Created Account:' . PHP_EOL;\n    var_dump($account);\n} catch (\\Recurly\\Errors\\Validation $e) {\n    // If the request was not valid, you may want to tell your user\n    // why. You can find the invalid params and reasons in err.params\n    var_dump($e);\n} catch (\\Recurly\\RecurlyError $e) {\n    // If we don't know what to do with the err, we should\n    // probably re-raise and let our web framework and logger handle it\n    var_dump($e);\n}\n"
          },
          {
            "lang": "Go",
            "source": "accountReq := &recurly.AccountCreate{\n\tCode:      &accountCode,\n\tFirstName: recurly.String(\"Isaac\"),\n\tLastName:  recurly.String(\"Du Monde\"),\n\tEmail:     recurly.String(\"isaac@example.com\"),\n\tBillingInfo: &recurly.BillingInfoCreate{\n\t\tFirstName: recurly.String(\"Isaac\"),\n\t\tLastName:  recurly.String(\"Du Monde\"),\n\t\tAddress: &recurly.AddressCreate{\n\t\t\tPhone:      recurly.String(\"415-555-5555\"),\n\t\t\tStreet1:    recurly.String(\"400 Alabama St.\"),\n\t\t\tCity:       recurly.String(\"San Francisco\"),\n\t\t\tPostalCode: recurly.String(\"94110\"),\n\t\t\tCountry:    recurly.String(\"US\"),\n\t\t\tRegion:     recurly.String(\"CA\"),\n\t\t},\n\t\tNumber: recurly.String(\"4111111111111111\"),\n\t\tMonth:  recurly.String(\"12\"),\n\t\tYear:   recurly.String(\"22\"),\n\t\tCvv:    recurly.String(\"123\"),\n\t},\n}\n\naccount, err := client.CreateAccount(accountReq)\nif e, ok := err.(*recurly.Error); ok {\n\tif e.Type == recurly.ErrorTypeValidation {\n\t\tfmt.Printf(\"Failed validation: %v\", e)\n\t\treturn nil, err\n\t}\n\tfmt.Printf(\"Unexpected Recurly error: %v\", e)\n\treturn nil, err\n}\nfmt.Printf(\"Created Account: %s\", account.Id)"
          }
        ]
      }
    },
    "/sites/{site_id}/accounts/{account_id}": {
      "get": {
        "tags": [
          "account"
        ],
        "summary": "Fetch an account",
        "operationId": "get_account",
        "parameters": [
          {
            "name": "site_id",
            "in": "path",
            "description": "Site ID or subdomain. For ID no prefix is used e.g. `e28zov4fw0v2`. For subdomain use prefix `subdomain-`, e.g. `subdomain-recurly`.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "account_id",
            "in": "path",
            "description": "Account ID or code. For ID no prefix is used e.g. `e28zov4fw0v2`. For code use prefix `code-`, e.g. `code-bob`.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An account.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Account"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "Node.js",
            "source": "try {\n  const account = await client.getAccount(accountId)\n  console.log('Fetched account: ', account.code)\n} catch (err) {\n  if (err instanceof recurly.errors.NotFoundError) {\n    // If the request was not found, you may want to alert the user or\n    // just return null\n    console.log('Resource Not Found')\n  } else {\n    // If we don't know what to do with the err, we should\n    // probably re-raise and let our web framework and logger handle it\n    console.log('Unknown Error: ', err)\n  }\n}\n"
          },
          {
            "lang": "Python",
            "source": "try:\n    account = client.get_account(account_id)\n    print(\"Got Account %s\" % account)\nexcept recurly.errors.NotFoundError:\n    # If the resource was not found, you may want to alert the user or\n    # just return nil\n    print(\"Resource Not Found\")\n"
          },
          {
            "lang": ".NET",
            "source": "try\n{\n    Account account = client.GetAccount(accountId);\n    Console.WriteLine($\"Fetched account {account.Code}\");\n}\ncatch (Recurly.Errors.NotFound ex)\n{\n    // If the resource was not found\n    // we may want to alert the user or just return null\n    Console.WriteLine($\"Resource Not Found: {ex.Error.Message}\");\n}\ncatch (Recurly.Errors.ApiError ex)\n{\n    // Use ApiError to catch a generic error from the API\n    Console.WriteLine($\"Unexpected Recurly Error: {ex.Error.Message}\");\n}\n"
          },
          {
            "lang": "Ruby",
            "source": "begin\n  account = @client.get_account(account_id: account_id)\n  puts \"Got Account #{account}\"\nrescue Recurly::Errors::NotFoundError\n  # If the resource was not found, you may want to alert the user or\n  # just return nil\n  puts \"Resource Not Found\"\nend\n"
          },
          {
            "lang": "Java",
            "source": "try {\n    final Account account = client.getAccount(accountId);\n    System.out.println(\"Fetched account: \" + account.getCode());\n} catch (NotFoundException e) {\n    // If the resource was not found\n    // we may want to alert the user or just return null\n    System.out.println(\"Resource Not Found: \" + e.getError().getMessage());\n} catch (ApiException e) {\n    // Use ApiException to catch a generic error from the API\n    System.out.println(\"Unexpected Recurly Error: \" + e.getError().getMessage());\n}\n"
          },
          {
            "lang": "PHP",
            "source": "try {\n    $account = $client->getAccount($account_id);\n\n    echo 'Got Account:' . PHP_EOL;\n    var_dump($account);\n} catch (\\Recurly\\Errors\\NotFound $e) {\n    // Could not find the resource, you may want to inform the user\n    // or just return a NULL\n    echo 'Could not find resource.' . PHP_EOL;\n    var_dump($e);\n} catch (\\Recurly\\RecurlyError $e) {\n    // Something bad happened... tell the user so that they can fix it?\n    echo 'Some unexpected Recurly error happened. Try again later.' . PHP_EOL;\n}\n"
          },
          {
            "lang": "Go",
            "source": "account, err := client.GetAccount(accountID)\nif e, ok := err.(*recurly.Error); ok {\n\tif e.Type == recurly.ErrorTypeNotFound {\n\t\tfmt.Printf(\"Resource not found: %v\", e)\n\t\treturn nil, err\n\t}\n\tfmt.Printf(\"Unexpected Recurly error: %v\", e)\n\treturn nil, err\n}\nfmt.Println(\"Fetched Account \", account.Id)"
          }
        ]
      },
      "put": {
        "tags": [
          "account"
        ],
        "summary": "Modify an account",
        "operationId": "update_account",
        "parameters": [
          {
            "name": "site_id",
            "in": "path",
            "description": "Site ID or subdomain. For ID no prefix is used e.g. `e28zov4fw0v2`. For subdomain use prefix `subdomain-`, e.g. `subdomain-recurly`.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "account_id",
            "in": "path",
            "description": "Account ID or code. For ID no prefix is used e.g. `e28zov4fw0v2`. For code use prefix `code-`, e.g. `code-bob`.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccountUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "An account.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Account"
                }
              }
            }
          },
          "400": {
            "description": "Bad request, perhaps invalid JSON?",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Incorrect site or account ID.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "422": {
            "description": "Invalid parameters or an error running the billing info verification transaction.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMayHaveTransaction"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "Node.js",
            "source": "try {\n  const accountUpdate = {\n    firstName: 'Aaron',\n    lastName: 'Du Monde'\n  }\n  const account = await client.updateAccount(accountId, accountUpdate)\n  console.log('Updated account: ', account)\n} catch (err) {\n  if (err instanceof recurly.errors.ValidationError) {\n    // If the request was not valid, you may want to tell your user\n    // why. You can find the invalid params and reasons in err.params\n    console.log('Failed validation', err.params)\n  } else {\n    // If we don't know what to do with the err, we should\n    // probably re-raise and let our web framework and logger handle it\n    console.log('Unknown Error: ', err)\n  }\n}\n"
          },
          {
            "lang": "Python",
            "source": "try:\n    account_update = {\"first_name\": \"Aaron\", \"last_name\": \"Du Monde\"}\n    account = client.update_account(account_id, account_update)\n    print(\"Updated Account %s\" % account)\nexcept recurly.errors.ValidationError as e:\n    # If the request was invalid, you may want to tell your user\n    # why. You can find the invalid params and reasons in e.error.params\n    print(\"ValidationError: %s\" % e.error.message)\n    print(e.error.params)\n"
          },
          {
            "lang": ".NET",
            "source": "try\n{\n    var accountReq = new AccountUpdate() {\n        FirstName = \"Aaron\",\n        LastName = \"Du Monde\"\n    };\n    Account account = client.UpdateAccount(accountId, accountReq);\n    Console.WriteLine(account.FirstName);\n    Console.WriteLine(account.LastName);\n}\ncatch (Recurly.Errors.Validation ex)\n{\n    // If the request was not valid, you may want to tell your user\n    // why. You can find the invalid params and reasons in ex.Error.Params\n    Console.WriteLine($\"Failed validation: {ex.Error.Message}\");\n}\ncatch (Recurly.Errors.ApiError ex)\n{\n    // Use ApiError to catch a generic error from the API\n    Console.WriteLine($\"Unexpected Recurly Error: {ex.Error.Message}\");\n}\n"
          },
          {
            "lang": "Ruby",
            "source": "begin\n  account_update = {\n    first_name: \"Aaron\",\n    last_name: \"Du Monde\",\n  }\n  account = @client.update_account(\n    account_id: account_id,\n    body: account_update\n  )\n  puts \"Updated Account #{account}\"\nrescue Recurly::Errors::ValidationError => e\n  # If the request was invalid, you may want to tell your user\n  # why. You can find the invalid params and reasons in e.recurly_error.params\n  puts \"ValidationError: #{e.recurly_error.params}\"\nend\n"
          },
          {
            "lang": "Java",
            "source": "try {\n    final AccountUpdate accountUpdate = new AccountUpdate();\n    accountUpdate.setFirstName(\"Aaron\");\n    accountUpdate.setLastName(\"Du Monde\");\n\n    final Account account = client.updateAccount(accountId, accountUpdate);\n    System.out.println(\"Updated account: \" + account.getCode());\n    System.out.println(account.getFirstName());\n    System.out.println(account.getLastName());\n} catch (ValidationException e) {\n    // If the request was not valid, you may want to tell your user\n    // why. You can find the invalid params and reasons in e.getError().getParams()\n    System.out.println(\"Failed validation: \" + e.getError().getMessage());\n} catch (ApiException e) {\n    // Use ApiException to catch a generic error from the API\n    System.out.println(\"Unexpected Recurly Error: \" + e.getError().getMessage());\n}\n"
          },
          {
            "lang": "PHP",
            "source": "try {\n    $account_update = array(\n        \"first_name\" => \"Douglas\",\n        \"last_name\" => \"Du Monde\",\n    );\n\n    $account = $client->updateAccount($account_id, $account_update);\n\n    echo 'Updated Account:' . PHP_EOL;\n    var_dump($account);\n} catch (\\Recurly\\Errors\\Validation $e) {\n    // If the request was not valid, you may want to tell your user\n    // why. You can find the invalid params and reasons in err.params\n    var_dump($e);\n} catch (\\Recurly\\RecurlyError $e) {\n    // If we don't know what to do with the err, we should\n    // probably re-raise and let our web framework and logger handle it\n    var_dump($e);\n}\n"
          },
          {
            "lang": "Go",
            "source": "updateReq := &recurly.AccountUpdate{\n\tFirstName: recurly.String(\"Joanna\"),\n\tLastName:  recurly.String(\"DuMonde\"),\n}\naccount, err := client.UpdateAccount(accountID, updateReq)\nif e, ok := err.(*recurly.Error); ok {\n\tif e.Type == recurly.ErrorTypeValidation {\n\t\tfmt.Printf(\"Failed validation: %v\", e)\n\t\treturn nil, err\n\t}\n\tfmt.Printf(\"Unexpected Recurly error: %v\", e)\n\treturn nil, err\n}\nfmt.Printf(\"Updated Account: %s\", account.Id)"
          }
        ]
      },
      "delete": {
        "tags": [
          "account"
        ],
        "summary": "Deactivate an account",
        "description": "Deactivating an account permanently deletes its billing information and cancels any active subscriptions (canceled subscriptions will remain active until the end of the current billing cycle before expiring). We recommend closing accounts only when all business is concluded with a customer.",
        "operationId": "deactivate_account",
        "parameters": [
          {
            "name": "site_id",
            "in": "path",
            "description": "Site ID or subdomain. For ID no prefix is used e.g. `e28zov4fw0v2`. For subdomain use prefix `subdomain-`, e.g. `subdomain-recurly`.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "account_id",
            "in": "path",
            "description": "Account ID or code. For ID no prefix is used e.g. `e28zov4fw0v2`. For code use prefix `code-`, e.g. `code-bob`.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An account.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Account"
                }
              }
            }
          },
          "422": {
            "description": "Account may already be inactive.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "Node.js",
            "source": "try {\n  const account = await client.deactivateAccount(accountId)\n  console.log('Deleted account: ', account.code)\n} catch (err) {\n  if (err && err.type === 'not-found') {\n    // If the request was not found, you may want to alert the user or\n    // just return null\n    console.log('Resource Not Found')\n  }\n  // If we don't know what to do with the err, we should\n  // probably re-raise and let our web framework and logger handle it\n  throw err\n}\n"
          },
          {
            "lang": "Python",
            "source": "try:\n    account = client.deactivate_account(account_id)\n    print(\"Deactivated Account %s\" % account)\nexcept recurly.errors.NotFoundError:\n    # If the resource was not found, you may want to alert the user or\n    # just return nil\n    print(\"Resource Not Found\")\n"
          },
          {
            "lang": ".NET",
            "source": "try\n{\n    Account account = client.DeactivateAccount(accountId);\n    Console.WriteLine($\"Deactivated account {account.Code}\");\n}\ncatch (Recurly.Errors.Validation ex)\n{\n    // If the request was not valid, you may want to tell your user\n    // why. You can find the invalid params and reasons in ex.Error.Params\n    Console.WriteLine($\"Failed validation: {ex.Error.Message}\");\n}\ncatch (Recurly.Errors.ApiError ex)\n{\n    // Use ApiError to catch a generic error from the API\n    Console.WriteLine($\"Unexpected Recurly Error: {ex.Error.Message}\");\n}\n"
          },
          {
            "lang": "Ruby",
            "source": "begin\n  account = @client.deactivate_account(account_id: account_id)\n  puts \"Deactivated Account #{account}\"\nrescue Recurly::Errors::NotFoundError\n  # If the resource was not found, you may want to alert the user or\n  # just return nil\n  puts \"Resource Not Found\"\nend\n"
          },
          {
            "lang": "Java",
            "source": "try {\n    Account account = client.deactivateAccount(accountId);\n    System.out.println(\"deactivated account \" + account.getCode());\n} catch (ValidationException e) {\n    // If the request was not valid, you may want to tell your user\n    // why. You can find the invalid params and reasons in e.getError().getParams()\n    System.out.println(\"Failed validation: \" + e.getError().getMessage());\n} catch (ApiException e) {\n    // Use ApiException to catch a generic error from the API\n    System.out.println(\"Unexpected Recurly Error: \" + e.getError().getMessage());\n}\n"
          },
          {
            "lang": "PHP",
            "source": "try {\n    $account = $client->deactivateAccount($account_id);\n\n    echo 'Deactivated Account:' . PHP_EOL;\n    var_dump($account);\n} catch (\\Recurly\\Errors\\NotFound $e) {\n    // Could not find the resource, you may want to inform the user\n    // or just return a NULL\n    echo 'Could not find resource.' . PHP_EOL;\n    var_dump($e);\n} catch (\\Recurly\\RecurlyError $e) {\n    // Something bad happened... tell the user so that they can fix it?\n    echo 'Some unexpected Recurly error happened. Try again later.' . PHP_EOL;\n}\n"
          },
          {
            "lang": "Go",
            "source": "account, err := client.DeactivateAccount(accountID)\nif e, ok := err.(*recurly.Error); ok {\n\tif e.Type == recurly.ErrorTypeNotFound {\n\t\tfmt.Printf(\"Resource not found: %v\", e)\n\t\treturn nil, err\n\t}\n\tfmt.Printf(\"Unexpected Recurly error: %v\", e)\n\treturn nil, err\n}\nfmt.Printf(\"Deactivated Account: %s\", account.Id)"
          }
        ]
      }
    },
    "/sites/{site_id}/accounts/{account_id}/acquisition": {
      "get": {
        "tags": [
          "account",
          "account_acquisition"
        ],
        "summary": "Fetch an account's acquisition data",
        "operationId": "get_account_acquisition",
        "parameters": [
          {
            "name": "site_id",
            "in": "path",
            "description": "Site ID or subdomain. For ID no prefix is used e.g. `e28zov4fw0v2`. For subdomain use prefix `subdomain-`, e.g. `subdomain-recurly`.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "account_id",
            "in": "path",
            "description": "Account ID or code. For ID no prefix is used e.g. `e28zov4fw0v2`. For code use prefix `code-`, e.g. `code-bob`.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An account's acquisition data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountAcquisition"
                }
              }
            }
          },
          "404": {
            "description": "Account has no acquisition data, or incorrect site or account ID.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "Node.js",
            "source": "try {\n  const acquisition = await client.getAccountAcquisition(accountId)\n  console.log('Fetched account acquisition: ', acquisition.id)\n} catch (err) {\n  if (err instanceof recurly.errors.NotFoundError) {\n    // If the request was not found, you may want to alert the user or\n    // just return null\n    console.log('Resource Not Found')\n  } else {\n    // If we don't know what to do with the err, we should\n    // probably re-raise and let our web framework and logger handle it\n    console.log('Unknown Error: ', err)\n  }\n}\n"
          },
          {
            "lang": "Python",
            "source": "try:\n    acquisition = client.get_account_acquisition(account_id)\n    print(\"Got AccountAcquisition %s\" % acquisition)\nexcept recurly.errors.NotFoundError:\n    # If the resource was not found, you may want to alert the user or\n    # just return nil\n    print(\"Resource Not Found\")\n"
          },
          {
            "lang": ".NET",
            "source": "try\n{\n    AccountAcquisition acquisition = client.GetAccountAcquisition(accountId);\n    Console.WriteLine($\"Fetched account acquisition {acquisition.Id}\");\n}\ncatch (Recurly.Errors.NotFound ex)\n{\n    // If the resource was not found\n    // we may want to alert the user or just return null\n    Console.WriteLine($\"Resource Not Found: {ex.Error.Message}\");\n}\ncatch (Recurly.Errors.ApiError ex)\n{\n    // Use ApiError to catch a generic error from the API\n    Console.WriteLine($\"Unexpected Recurly Error: {ex.Error.Message}\");\n}\n"
          },
          {
            "lang": "Ruby",
            "source": "begin\n  @client.get_account_acquisition(account_id: account_id)\n  puts \"Got AccountAcquisition\"\nrescue Recurly::Errors::NotFoundError\n  # If the resource was not found, you may want to alert the user or\n  # just return nil\n  puts \"Resource Not Found\"\nend\n"
          },
          {
            "lang": "Java",
            "source": "try {\n    final AccountAcquisition acquisition = client.getAccountAcquisition(accountId);\n    System.out.println(\"Fetched account acquisition \" + acquisition.getId());\n} catch (NotFoundException e) {\n    // If the resource was not found\n    // we may want to alert the user or just return null\n    System.out.println(\"Resource Not Found: \" + e.getError().getMessage());\n} catch (ApiException e) {\n    // Use ApiException to catch a generic error from the API\n    System.out.println(\"Unexpected Recurly Error: \" + e.getError().getMessage());\n}\n"
          },
          {
            "lang": "PHP",
            "source": "try {\n    $acquisition = $client->getAccountAcquisition($account_id);\n\n    echo 'Got Account Acquisition:' . PHP_EOL;\n    var_dump($acquisition);\n} catch (\\Recurly\\Errors\\NotFound $e) {\n    // Could not find the resource, you may want to inform the user\n    // or just return a NULL\n    echo 'Could not find resource.' . PHP_EOL;\n    var_dump($e);\n} catch (\\Recurly\\RecurlyError $e) {\n    // Something bad happened... tell the user so that they can fix it?\n    echo 'Some unexpected Recurly error happened. Try again later.' . PHP_EOL;\n}\n"
          },
          {
            "lang": "Go",
            "source": "accountAcq, err := client.GetAccountAcquisition(accountID)\nif e, ok := err.(*recurly.Error); ok {\n\tif e.Type == recurly.ErrorTypeNotFound {\n\t\tfmt.Printf(\"Resource not found: %v\", e)\n\t\treturn nil, err\n\t}\n\tfmt.Printf(\"Unexpected Recurly error: %v\", e)\n\treturn nil, err\n}\nfmt.Printf(\"Fetched Account Acquisition: %v\", accountAcq.Id)"
          }
        ]
      },
      "put": {
        "tags": [
          "account",
          "account_acquisition"
        ],
        "summary": "Update an account's acquisition data",
        "operationId": "update_account_acquisition",
        "parameters": [
          {
            "name": "site_id",
            "in": "path",
            "description": "Site ID or subdomain. For ID no prefix is used e.g. `e28zov4fw0v2`. For subdomain use prefix `subdomain-`, e.g. `subdomain-recurly`.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "account_id",
            "in": "path",
            "description": "Account ID or code. For ID no prefix is used e.g. `e28zov4fw0v2`. For code use prefix `code-`, e.g. `code-bob`.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccountAcquisitionUpdatable"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "An account's updated acquisition data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountAcquisition"
                }
              }
            }
          },
          "400": {
            "description": "Bad request; perhaps missing or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Incorrect site or account ID.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "422": {
            "description": "A validation error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "Node.js",
            "source": "try {\n  const acquisitionUpdate = {\n    campaign: \"big-event-campaign\",\n    channel: \"social_media\",\n    subchannel: \"twitter\"\n  }\n  const accountAcquisition = await client.updateAccountAcquisition(accountId, acquisitionUpdate)\n  console.log('Edited Account Acquisition: ', accountAcquisition)\n} catch (err) {\n  if (err instanceof recurly.errors.ValidationError) {\n    // If the request was not valid, you may want to tell your user\n    // why. You can find the invalid params and reasons in err.params\n    console.log('Failed validation', err.params)\n  } else {\n    // If we don't know what to do with the err, we should\n    // probably re-raise and let our web framework and logger handle it\n    console.log('Unknown Error: ', err)\n  }\n}\n"
          },
          {
            "lang": "Python",
            "source": "try:\n    acquisition_update = {\n        \"campaign\": \"podcast-marketing\",\n        \"channel\": \"social_media\",\n        \"subchannel\": \"twitter\",\n        \"cost\": {\"currency\": \"USD\", \"amount\": 0.50},\n    }\n    acquisition = client.update_account_acquisition(account_id, acquisition_update)\n    print(\"Updated AccountAcquisition %s\" % acquisition)\nexcept recurly.errors.ValidationError as e:\n    # If the request was invalid, you may want to tell your user\n    # why. You can find the invalid params and reasons in e.error.params\n    print(\"ValidationError: %s\" % e.error.message)\n    print(e.error.params)\n"
          },
          {
            "lang": ".NET",
            "source": "try\n{\n    var acquisitionReq = new AccountAcquisitionUpdatable()\n    {\n        Campaign = \"big-event-campaign\",\n        Channel = \"social_media\",\n        Subchannel = \"twitter\"\n    };\n    AccountAcquisition accountAcquisition = client.UpdateAccountAcquisition(accountId, acquisitionReq);\n    Console.WriteLine(accountAcquisition);\n}\ncatch (Recurly.Errors.Validation ex)\n{\n    // If the request was not valid, you may want to tell your user\n    // why. You can find the invalid params and reasons in ex.Error.Params\n    Console.WriteLine($\"Failed validation: {ex.Error.Message}\");\n}\ncatch (Recurly.Errors.ApiError ex)\n{\n    // Use ApiError to catch a generic error from the API\n    Console.WriteLine($\"Unexpected Recurly Error: {ex.Error.Message}\");\n}\n"
          },
          {
            "lang": "Ruby",
            "source": "begin\n  acquisition_update = {\n    campaign: \"podcast-marketing\",\n    channel: \"social_media\",\n    subchannel: \"twitter\",\n    cost: {\n      currency: \"USD\",\n      amount: 0.50\n    }\n  }\n  acquisition = @client.update_account_acquisition(\n    account_id: account_id,\n    body: acquisition_update\n  )\n  puts \"Updated AccountAcqusition #{acquisition}\"\nrescue Recurly::Errors::ValidationError => e\n  # If the request was invalid, you may want to tell your user\n  # why. You can find the invalid params and reasons in e.recurly_error.params\n  puts \"ValidationError: #{e.recurly_error.params}\"\nend\n"
          },
          {
            "lang": "Java",
            "source": "try {\n    final AccountAcquisitionUpdatable acqUpdate = new AccountAcquisitionUpdatable();\n    acqUpdate.setCampaign(\"big-event-campaign\");\n    acqUpdate.setChannel(\"social_media\");\n    acqUpdate.setSubchannel(\"twitter\");\n\n    final AccountAcquisition accountAcquisition = client.updateAccountAcquisition(accountId, acqUpdate);\n    System.out.println(accountAcquisition);\n} catch (ValidationException e) {\n    // If the request was not valid, you may want to tell your user\n    // why. You can find the invalid params and reasons in e.getError().getParams()\n    System.out.println(\"Failed validation: \" + e.getError().getMessage());\n} catch (ApiException e) {\n    // Use ApiException to catch a generic error from the API\n    System.out.println(\"Unexpected Recurly Error: \" + e.getError().getMessage());\n}\n"
          },
          {
            "lang": "PHP",
            "source": "try {\n    $acquisition_update = array(\n        \"campaign\" => \"big-event-campaign\",\n        \"channel\" => \"social_media\",\n        \"subchannel\" => \"twitter\"\n    );\n    $acquisition = $client->updateAccountAcquisition($account_id, $acquisition_update);\n\n    echo 'Updated AccountAcquisition:' . PHP_EOL;\n    var_dump($acquisition);\n} catch (\\Recurly\\Errors\\Validation $e) {\n    // If the request was not valid, you may want to tell your user\n    // why. You can find the invalid params and reasons in err.params\n    var_dump($e);\n} catch (\\Recurly\\RecurlyError $e) {\n    // If we don't know what to do with the err, we should\n    // probably re-raise and let our web framework and logger handle it\n    var_dump($e);\n}\n"
          },
          {
            "lang": "Go",
            "source": "updateReq := &recurly.AccountAcquisitionUpdatable{\n\tCampaign:   recurly.String(\"big-event-campaign\"),\n\tChannel:    recurly.String(\"social_media\"),\n\tSubchannel: recurly.String(\"twitter\"),\n}\naccount, err := client.UpdateAccountAcquisition(accountID, updateReq)\nif e, ok := err.(*recurly.Error); ok {\n\tif e.Type == recurly.ErrorTypeValidation {\n\t\tfmt.Printf(\"Failed validation: %v\", e)\n\t\treturn nil, err\n\t}\n\tfmt.Printf(\"Unexpected Recurly error: %v\", e)\n\treturn nil, err\n}\nfmt.Printf(\"Updated Account Acquisition: %s\", account.Id)"
          }
        ]
      },
      "delete": {
        "tags": [
          "account",
          "account_acquisition"
        ],
        "summary": "Remove an account's acquisition data",
        "operationId": "remove_account_acquisition",
        "parameters": [
          {
            "name": "site_id",
            "in": "path",
            "description": "Site ID or subdomain. For ID no prefix is used e.g. `e28zov4fw0v2`. For subdomain use prefix `subdomain-`, e.g. `subdomain-recurly`.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "account_id",
            "in": "path",
            "description": "Account ID or code. For ID no prefix is used e.g. `e28zov4fw0v2`. For code use prefix `code-`, e.g. `code-bob`.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Acquisition data was succesfully deleted."
          },
          "404": {
            "description": "Incorrect site or account ID.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "Node.js",
            "source": "try {\n  await client.removeAccountAcquisition(accountId)\n  console.log('Removed account acquisition from account: ', accountId)\n} catch (err) {\n  if (err instanceof recurly.errors.NotFoundError) {\n    // If the request was not found, you may want to alert the user or\n    // just return null\n    console.log('Resource Not Found')\n  } else {\n    // If we don't know what to do with the err, we should\n    // probably re-raise and let our web framework and logger handle it\n    console.log('Unknown Error: ', err)\n  }\n}\n"
          },
          {
            "lang": "Python",
            "source": "try:\n    client.remove_account_acquisition(account_id)\n    print(\"Removed AccountAcquisition for Account id=%s\" % account_id)\nexcept recurly.errors.NotFoundError:\n    # If the resource was not found, you may want to alert the user or\n    # just return nil\n    print(\"Resource Not Found\")\n"
          },
          {
            "lang": ".NET",
            "source": "try\n{\n    client.RemoveAccountAcquisition(accountId);\n    Console.WriteLine($\"Removed account acquisition from account {accountId}\");\n}\ncatch (Recurly.Errors.Validation ex)\n{\n    // If the request was not valid, you may want to tell your user\n    // why. You can find the invalid params and reasons in ex.Error.Params\n    Console.WriteLine($\"Failed validation: {ex.Error.Message}\");\n}\ncatch (Recurly.Errors.ApiError ex)\n{\n    // Use ApiError to catch a generic error from the API\n    Console.WriteLine($\"Unexpected Recurly Error: {ex.Error.Message}\");\n}\n"
          },
          {
            "lang": "Ruby",
            "source": "begin\n  acquisition = @client.remove_account_acquisition(account_id: account_id)\n  puts \"Removed AccountAcqusition #{acquisition}\"\nrescue Recurly::Errors::NotFoundError\n  # If the resource was not found, you may want to alert the user or\n  # just return nil\n  puts \"Resource Not Found\"\nend\n"
          },
          {
            "lang": "Java",
            "source": "try {\n    client.removeAccountAcquisition(accountId);\n    System.out.println(\"Removed account acquisition from account \" + accountId);\n} catch (ValidationException e) {\n    // If the request was not valid, you may want to tell your user\n    // why. You can find the invalid params and reasons in e.getError().getParams()\n    System.out.println(\"Failed validation: \" + e.getError().getMessage());\n} catch (ApiException e) {\n    // Use ApiException to catch a generic error from the API\n    System.out.println(\"Unexpected Recurly Error: \" + e.getError().getMessage());\n}\n"
          },
          {
            "lang": "PHP",
            "source": "try {\n    $client->removeAccountAcquisition($account_id);\n    echo \"Removed Account Acquisition:\" . PHP_EOL;\n} catch (\\Recurly\\Errors\\Validation $e) {\n    // If the request was not valid, you may want to tell your user\n    // why. You can find the invalid params and reasons in err.params\n    var_dump($e);\n} catch (\\Recurly\\RecurlyError $e) {\n    // If we don't know what to do with the err, we should\n    // probably re-raise and let our web framework and logger handle it\n    var_dump($e);\n}"
          },
          {
            "lang": "Go",
            "source": "client.RemoveAccountAcquisition(accountID)\nif e, ok := err.(*recurly.Error); ok {\n\tif e.Type == recurly.ErrorTypeNotFound {\n\t\tfmt.Printf(\"Resource not found: %v\", e)\n\t\treturn nil, err\n\t}\n\tfmt.Printf(\"Unexpected Recurly error: %v\", e)\n\treturn nil, err\n}\nfmt.Printf(\"Removed Account Acquisition: %s\", accountAcquisition.Id)"
          }
        ]
      }
    },
    "/sites/{site_id}/accounts/{account_id}/reactivate": {
      "put": {
        "tags": [
          "account"
        ],
        "summary": "Reactivate an inactive account",
        "description": "Reactivating an account will restore its history but the customer will need to provide new billing information to continue billing.",
        "operationId": "reactivate_account",
        "parameters": [
          {
            "name": "site_id",
            "in": "path",
            "description": "Site ID or subdomain. For ID no prefix is used e.g. `e28zov4fw0v2`. For subdomain use prefix `subdomain-`, e.g. `subdomain-recurly`.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "account_id",
            "in": "path",
            "description": "Account ID or code. For ID no prefix is used e.g. `e28zov4fw0v2`. For code use prefix `code-`, e.g. `code-bob`.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An account.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Account"
                }
              }
            }
          },
          "404": {
            "description": "Incorrect site or account ID.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "422": {
            "description": "Account is already active.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "Node.js",
            "source": "try {\n  const account = await client.reactivateAccount(accountId)\n  console.log('Reactivated account: ', account.code)\n} catch (err) {\n  if (err && err.type === 'not_found') {\n    // If the request was not found, you may want to alert the user or\n    // just return null\n    console.log('Resource Not Found')\n  }\n  // If we don't know what to do with the err, we should\n  // probably re-raise and let our web framework and logger handle it\n  throw err\n}\n"
          },
          {
            "lang": "Python",
            "source": "try:\n    account = client.reactivate_account(account_id)\n    print(\"Reactivated Account %s\" % account)\nexcept recurly.errors.NotFoundError:\n    # If the resource was not found, you may want to alert the user or\n    # just return nil\n    print(\"Resource Not Found\")\n"
          },
          {
            "lang": ".NET",
            "source": "try\n{\n    Account account = client.ReactivateAccount(accountId);\n    Console.WriteLine($\"Reactivated account {account.Code}\");\n}\ncatch (Recurly.Errors.Validation ex)\n{\n    // If the request was not valid, you may want to tell your user\n    // why. You can find the invalid params and reasons in ex.Error.Params\n    Console.WriteLine($\"Failed validation: {ex.Error.Message}\");\n}\ncatch (Recurly.Errors.ApiError ex)\n{\n    // Use ApiError to catch a generic error from the API\n    Console.WriteLine($\"Unexpected Recurly Error: {ex.Error.Message}\");\n}\n"
          },
          {
            "lang": "Ruby",
            "source": "begin\n  account = @client.reactivate_account(account_id: account_id)\n  puts \"Reactivated account #{account}\"\nrescue Recurly::Errors::NotFoundError\n  # If the resource was not found, you may want to alert the user or\n  # just return nil\n  puts \"Resource Not Found\"\nend\n"
          },
          {
            "lang": "Java",
            "source": "try {\n    final Account account = client.reactivateAccount(accountId);\n    System.out.println(\"Reactivated account: \" + account.getCode());\n} catch (ValidationException e) {\n    // If the request was not valid, you may want to tell your user\n    // why. You can find the invalid params and reasons in e.getError().getParams()\n    System.out.println(\"Failed validation: \" + e.getError().getMessage());\n} catch (ApiException e) {\n    // Use ApiException to catch a generic error from the API\n    System.out.println(\"Unexpected Recurly Error: \" + e.getError().getMessage());\n}\n"
          },
          {
            "lang": "PHP",
            "source": "try {\n    $account = $client->reactivateAccount($account_id);\n\n    echo 'Reactivated Account:' . PHP_EOL;\n    var_dump($account);\n} catch (\\Recurly\\Errors\\NotFound $e) {\n    // Could not find the resource, you may want to inform the user\n    // or just return a NULL\n    echo 'Could not find resource.' . PHP_EOL;\n    var_dump($e);\n} catch (\\Recurly\\RecurlyError $e) {\n    // Something bad happened... tell the user so that they can fix it?\n    echo 'Some unexpected Recurly error happened. Try again later.' . PHP_EOL;\n}\n"
          },
          {
            "lang": "Go",
            "source": "account, err := client.ReactivateAccount(accountID)\nif e, ok := err.(*recurly.Error); ok {\n\tif e.Type == recurly.ErrorTypeValidation {\n\t\tfmt.Printf(\"Failed validation: %v\", e)\n\t\treturn nil, err\n\t}\n\tfmt.Printf(\"Unexpected Recurly error: %v\", e)\n\treturn nil, err\n}\nfmt.Printf(\"Reactivated Account: %s\", account.Id)"
          }
        ]
      }
    },
    "/sites/{site_id}/accounts/{account_id}/balance": {
      "get": {
        "tags": [
          "account"
        ],
        "summary": "Fetch an account's balance and past due status",
        "operationId": "get_account_balance",
        "parameters": [
          {
            "name": "site_id",
            "in": "path",
            "description": "Site ID or subdomain. For ID no prefix is used e.g. `e28zov4fw0v2`. For subdomain use prefix `subdomain-`, e.g. `subdomain-recurly`.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "account_id",
            "in": "path",
            "description": "Account ID or code. For ID no prefix is used e.g. `e28zov4fw0v2`. For code use prefix `code-`, e.g. `code-bob`.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An account's balance.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountBalance"
                }
              }
            }
          },
          "404": {
            "description": "Incorrect site or account ID.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "Node.js",
            "source": "try {\n  const balance = await client.getAccountBalance(accountId)\n  console.log('Fetched account balance: ', balance.balances)\n} catch (err) {\n  if (err instanceof recurly.errors.NotFoundError) {\n    // If the request was not found, you may want to alert the user or\n    // just return null\n    console.log('Resource Not Found')\n  } else {\n    // If we don't know what to do with the err, we should\n    // probably re-raise and let our web framework and logger handle it\n    console.log('Unknown Error: ', err)\n  }\n}\n"
          },
          {
            "lang": "Python",
            "source": "try:\n    balance = client.get_account_balance(account_id)\n    print(\"Got AccountBalance %s\" % balance)\nexcept recurly.errors.NotFoundError:\n    # If the resource was not found, you may want to alert the user or\n    # just return nil\n    print(\"Resource Not Found\")\n"
          },
          {
            "lang": ".NET",
            "source": "try\n{\n    AccountBalance balance = client.GetAccountBalance(accountId);\n    Console.WriteLine($\"Fetched account balance {balance.Balances}\");\n}\ncatch (Recurly.Errors.NotFound ex)\n{\n    // If the resource was not found\n    // we may want to alert the user or just return null\n    Console.WriteLine($\"Resource Not Found: {ex.Error.Message}\");\n}\ncatch (Recurly.Errors.ApiError ex)\n{\n    // Use ApiError to catch a generic error from the API\n    Console.WriteLine($\"Unexpected Recurly Error: {ex.Error.Message}\");\n}\n"
          },
          {
            "lang": "Ruby",
            "source": "begin\n  balance = @client.get_account_balance(account_id: account_id)\n  puts \"Got AccountBalance #{balance}\"\nrescue Recurly::Errors::NotFoundError\n  # If the resource was not found, you may want to alert the user or\n  # just return nil\n  puts \"Resource Not Found\"\nend\n"
          },
          {
            "lang": "Java",
            "source": "try {\n    final AccountBalance balance = client.getAccountBalance(accountId);\n    System.out.println(\"Fetched account balance \" + balance.getBalances());\n} catch (NotFoundException e) {\n    // If the resource was not found\n    // we may want to alert the user or just return null\n    System.out.println(\"Resource Not Found: \" + e.getError().getMessage());\n} catch (ApiException e) {\n    // Use ApiException to catch a generic error from the API\n    System.out.println(\"Unexpected Recurly Error: \" + e.getError().getMessage());\n}\n"
          },
          {
            "lang": "PHP",
            "source": "try {\n    $balance = $client->getAccountBalance($account_id);\n\n    echo 'Got Account Balance:' . PHP_EOL;\n    var_dump($balance);\n} catch (\\Recurly\\Errors\\NotFound $e) {\n    // Could not find the resource, you may want to inform the user\n    // or just return a NULL\n    echo 'Could not find resource.' . PHP_EOL;\n    var_dump($e);\n} catch (\\Recurly\\RecurlyError $e) {\n    // Something bad happened... tell the user so that they can fix it?\n    echo 'Some unexpected Recurly error happened. Try again later.' . PHP_EOL;\n}\n"
          },
          {
            "lang": "Go",
            "source": "accountBalance, err := client.GetAccountBalance(accountID)\nif e, ok := err.(*recurly.Error); ok {\n\tif e.Type == recurly.ErrorTypeNotFound {\n\t\tfmt.Printf(\"Resource not found: %v\", e)\n\t\treturn nil, err\n\t}\n\tfmt.Printf(\"Unexpected Recurly error: %v\", e)\n\treturn nil, err\n}\nfmt.Printf(\"Fetched Account Balance: %v\", accountBalance)"
          }
        ]
      }
    },
    "/sites/{site_id}/accounts/{account_id}/billing_info": {
      "get": {
        "tags": [
          "account",
          "billing_info"
        ],
        "summary": "Fetch an account's billing information",
        "operationId": "get_billing_info",
        "parameters": [
          {
            "name": "site_id",
            "in": "path",
            "description": "Site ID or subdomain. For ID no prefix is used e.g. `e28zov4fw0v2`. For subdomain use prefix `subdomain-`, e.g. `subdomain-recurly`.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "account_id",
            "in": "path",
            "description": "Account ID or code. For ID no prefix is used e.g. `e28zov4fw0v2`. For code use prefix `code-`, e.g. `code-bob`.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An account's billing information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BillingInfo"
                }
              }
            }
          },
          "404": {
            "description": "Account has no billing information, or incorrect site or account ID.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "Node.js",
            "source": "try {\n  const billingInfo = await client.getBillingInfo(accountId)\n  console.log('Fetched Billing Info: ', billingInfo.id)\n} catch (err) {\n  if (err instanceof recurly.errors.NotFoundError) {\n    // If the request was not found, you may want to alert the user or\n    // just return null\n    console.log('Resource Not Found')\n  } else {\n    // If we don't know what to do with the err, we should\n    // probably re-raise and let our web framework and logger handle it\n    console.log('Unknown Error: ', err)\n  }\n}\n"
          },
          {
            "lang": "Python",
            "source": "try:\n    binfo = client.get_billing_info(account_id)\n    print(\"Got BillingInfo %s\" % binfo)\nexcept recurly.errors.NotFoundError:\n    # If the resource was not found, you may want to alert the user or\n    # just return nil\n    print(\"Resource Not Found\")\n"
          },
          {
            "lang": ".NET",
            "source": "try\n{\n    BillingInfo billingInfo = client.GetBillingInfo(accountId);\n    Console.WriteLine($\"Fetched billing info {billingInfo.Id}\");\n}\ncatch (Recurly.Errors.NotFound ex)\n{\n    // If the resource was not found\n    // we may want to alert the user or just return null\n    Console.WriteLine($\"Resource Not Found: {ex.Error.Message}\");\n}\ncatch (Recurly.Errors.ApiError ex)\n{\n    // Use ApiError to catch a generic error from the API\n    Console.WriteLine($\"Unexpected Recurly Error: {ex.Error.Message}\");\n}\n"
          },
          {
            "lang": "Ruby",
            "source": "begin\n  billing = @client.get_billing_info(account_id: account_id)\n  puts \"Got BillingInfo #{billing}\"\nrescue Recurly::Errors::NotFoundError\n  # If the resource was not found, you may want to alert the user or\n  # just return nil\n  puts \"Resource Not Found\"\nend\n"
          },
          {
            "lang": "Java",
            "source": "try {\n    final BillingInfo billingInfo = client.getBillingInfo(accountId);\n    System.out.println(\"Fetched billing info \" + billingInfo.getId());\n} catch (NotFoundException e) {\n    // If the resource was not found\n    // we may want to alert the user or just return null\n    System.out.println(\"Resource Not Found: \" + e.getError().getMessage());\n} catch (ApiException e) {\n    // Use ApiException to catch a generic error from the API\n    System.out.println(\"Unexpected Recurly Error: \" + e.getError().getMessage());\n}\n"
          },
          {
            "lang": "PHP",
            "source": "try {\n    $binfo = $client->getBillingInfo($account_id);\n\n    echo 'Got BillingInfo:' . PHP_EOL;\n    var_dump($binfo);\n} catch (\\Recurly\\Errors\\NotFound $e) {\n    // Could not find the resource, you may want to inform the user\n    // or just return a NULL\n    echo 'Could not find resource.' . PHP_EOL;\n    var_dump($e);\n} catch (\\Recurly\\RecurlyError $e) {\n    // Something bad happened... tell the user so that they can fix it?\n    echo 'Some unexpected Recurly error happened. Try again later.' . PHP_EOL;\n}\n"
          },
          {
            "lang": "Go",
            "source": "billingInfo, err := client.GetBillingInfo(accountID)\nif e, ok := err.(*recurly.Error); ok {\n\tif e.Type == recurly.ErrorTypeNotFound {\n\t\tfmt.Printf(\"Resource not found: %v\", e)\n\t\treturn nil, err\n\t}\n\tfmt.Printf(\"Unexpected Recurly error: %v\", e)\n\treturn nil, err\n}\n\nfmt.Printf(\"Fetched Billing Info: %v\", billingInfo)"
          }
        ]
      },
      "put": {
        "tags": [
          "account",
          "billing_info"
        ],
        "summary": "Set an account's billing information",
        "description": "If you're using Recurly.js to securely submit data from webforms without sending it through your server,\nyou can associate the billing information with an account by passing in the `token_id`. Be sure to only\nset this field.\n\nFor credit card payments you'll need the following required fields:\n\n- first_name\n- last_name\n- number\n- month\n- year\n\nFor external (not Recurly.js) tokenized payments you'll need the following required fields:\n\n- first_name\n- last_name\n- gateway_token\n- gateway_code\n",
        "operationId": "update_billing_info",
        "parameters": [
          {
            "name": "site_id",
            "in": "path",
            "description": "Site ID or subdomain. For ID no prefix is used e.g. `e28zov4fw0v2`. For subdomain use prefix `subdomain-`, e.g. `subdomain-recurly`.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "account_id",
            "in": "path",
            "description": "Account ID or code. For ID no prefix is used e.g. `e28zov4fw0v2`. For code use prefix `code-`, e.g. `code-bob`.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BillingInfoCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Updated billing information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BillingInfo"
                }
              }
            }
          },
          "400": {
            "description": "Bad request, perhaps invalid JSON?",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Incorrect site or account ID.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "422": {
            "description": "Invalid billing information, or error running the verification transaction.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMayHaveTransaction"
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "Node.js",
            "source": "try {\n  const billingInfoUpdate = {\n    firstName: 'Aaron',\n    lastName: 'Du Monde',\n  }\n  const billingInfo = await client.updateBillingInfo(accountId, billingInfoUpdate)\n  console.log('Updated billing info: ', billingInfo.id)\n} catch (err) {\n  if (err instanceof recurly.errors.ValidationError) {\n    // If the request was not valid, you may want to tell your user\n    // why. You can find the invalid params and reasons in err.params\n    console.log('Failed validation', err.params)\n  } else {\n    // If we don't know what to do with the err, we should\n    // probably re-raise and let our web framework and logger handle it\n    console.log('Unknown Error: ', err)\n  }\n}\n"
          },
          {
            "lang": "Python",
            "source": "try:\n    billing_update = {\"first_name\": \"Aaron\", \"last_name\": \"Du Monde\"}\n    billing = client.update_billing_info(account_id, billing_update)\n    print(\"Updated BillingInfo %s\" % billing)\nexcept recurly.errors.ValidationError as e:\n    # If the request was invalid, you may want to tell your user\n    # why. You can find the invalid params and reasons in e.error.params\n    print(\"ValidationError: %s\" % e.error.message)\n    print(e.error.params)\n"
          },
          {
            "lang": ".NET",
            "source": "try\n{\n    var billingReq = new BillingInfoCreate() {\n        FirstName = \"Benjamin\",\n        LastName = \"Du Monde\"\n    };\n    BillingInfo billingInfo = client.UpdateBillingInfo(accountId, billingReq);\n    Console.WriteLine($\"Updated billing info {billingInfo.Id}\");\n}\ncatch (Recurly.Errors.Validation ex)\n{\n    // If the request was not valid, you may want to tell your user\n    // why. You can find the invalid params and reasons in ex.Error.Params\n    Console.WriteLine($\"Failed validation: {ex.Error.Message}\");\n}\ncatch (Recurly.Errors.ApiError ex)\n{\n    // Use ApiError to catch a generic error from the API\n    Console.WriteLine($\"Unexpected Recurly Error: {ex.Error.Message}\");\n}\n"
          },
          {
            "lang": "Ruby",
            "source": "begin\n  billing_update = {\n    first_name: \"Aaron\",\n    last_name: \"Du Monde\",\n  }\n  billing = @client.update_billing_info(\n    account_id: account_id,\n    body: billing_update\n  )\n  puts \"Updated BillingInfo #{billing}\"\nrescue Recurly::Errors::ValidationError => e\n  # If the request was invalid, you may want to tell your user\n  # why. You can find the invalid params and reasons in e.recurly_error.params\n  puts \"ValidationError: #{e.recurly_error.params}\"\nend\n"
          },
          {
            "lang": "Java",
            "source": "try {\n    final BillingInfoCreate billingUpdate = new BillingInfoCreate();\n    billingUpdate.setFirstName(\"Aaron\");\n    billingUpdate.setLastName(\"Du Monde\");\n\n    final BillingInfo billingInfo = client.updateBillingInfo(accountId, billingUpdate);\n    System.out.println(\"Updated billing info \" + billingInfo.getId());\n} catch (ValidationException e) {\n    // If the request was not valid, you may want to tell your user\n    // why. You can find the invalid params and reasons in e.getError().getParams()\n    System.out.println(\"Failed validation: \" + e.getError().getMessage());\n} catch (ApiException e) {\n    // Use ApiException to catch a generic error from the API\n    System.out.println(\"Unexpected Recurly Error: \" + e.getError().getMessage());\n}\n"
          },
          {
            "lang": "PHP",
            "source": "try {\n    $binfo_update = array(\n        \"first_name\" => \"Douglas\",\n        \"last_name\" => \"Du Monde\",\n    );\n    $binfo = $client->updateBillingInfo($account_id, $binfo_update);\n\n    echo 'Updated BillingInfo:' . PHP_EOL;\n    var_dump($binfo);\n} catch (\\Recurly\\Errors\\Validation $e) {\n    // If the request was not valid, you may want to tell your user\n    // why. You can find the invalid params and reasons in err.params\n    var_dump($e);\n} catch (\\Recurly\\RecurlyError $e) {\n    // If we don't know what to do with the err, we should\n    // probably re-raise and let our web framework and logger handle it\n    var_dump($e);\n}\n"
          },
          {
            "lang": "Go",
            "source": "updateReq := &recurly.BillingInfoCreate{\n\tFirstName: recurly.String(\"Joanna\"),\n\tLastName:  recurly.String(\"DuMonde\"),\n}\nbillingInfo, err := client.UpdateBillingInfo(accountID, updateReq)\nif e, ok := err.(*recurly.Error); ok {\n\tif e.Type == recurly.ErrorTypeValidation {\n\t\tfmt.Printf(\"Failed validation: %v\", e)\n\t\treturn nil, err\n\t}\n\tfmt.Printf(\"Unexpected Recurly error: %v\", e)\n\treturn nil, err\n}\nfmt.Printf(\"Updated Billing Info: %s\", billingInfo)"
          }
        ]
      },
      "delete": {
        "tags": [
          "account",
          "billing_info"
        ],
        "summary": "Remove an account's billing information",
        "description": "You may remove any stored billing information for an account. If the account has a subscription, the renewal will go into dunning unless the billing information is updated before the renewal occurs.",
        "operationId": "remove_billing_info",
        "parameters": [
          {
            "name": "site_id",
            "in": "path",
            "description": "Site ID or subdomain. For ID no prefix is used e.g. `e28zov4fw0v2`. For subdomain use prefix `subdomain-`, e.g. `subdomain-recurly`.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "account_id",
            "in": "path",
            "description": "Account ID or code. For ID no prefix is used e.g. `e28zov4fw0v2`. For code use prefix `code-`, e.g. `code-bob`.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Billing information deleted"
          },
          "404": {
            "description": "Account has no billing information, or incorrect site or account ID.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "Node.js",
            "source": "try {\n  client.removeBillingInfo(accountId)\n  console.log('Removed billing info from account: ', accountId)\n} catch (err) {\n  if (err instanceof recurly.errors.NotFoundError) {\n    // If the request was not found, you may want to alert the user or\n    // just return null\n    console.log('Resource Not Found')\n  } else {\n    // If we don't know what to do with the err, we should\n    // probably re-raise and let our web framework and logger handle it\n    console.log('Unknown Error: ', err)\n  }\n}\n"
          },
          {
            "lang": "Python",
            "source": "try:\n    client.remove_billing_info(account_id)\n    print(\"Removed BillingInfo for Account id=%s\" % account_id)\nexcept recurly.errors.NotFoundError:\n    # If the resource was not found, you may want to alert the user or\n    # just return nil\n    print(\"Resource Not Found\")\n"
          },
          {
            "lang": ".NET",
            "source": "try\n{\n    client.RemoveBillingInfo(accountId);\n    Console.WriteLine($\"Removed billing info from account {accountId}\");\n}\ncatch (Recurly.Errors.Validation ex)\n{\n    // If the request was not valid, you may want to tell your user\n    // why. You can find the invalid params and reasons in ex.Error.Params\n    Console.WriteLine($\"Failed validation: {ex.Error.Message}\");\n}\ncatch (Recurly.Errors.ApiError ex)\n{\n    // Use ApiError to catch a generic error from the API\n    Console.WriteLine($\"Unexpected Recurly Error: {ex.Error.Message}\");\n}\n"
          },
          {
            "lang": "Ruby",
            "source": "begin\n  @client.remove_billing_info(account_id: account_id)\n  puts \"Removed BillingInfo #{account_id}\"\nrescue Recurly::Errors::NotFoundError\n  # If the resource was not found, you may want to alert the user or\n  # just return nil\n  puts \"Resource Not Found\"\nend\n"
          },
          {
            "lang": "Java",
            "source": "try {\n    client.removeBillingInfo(accountId);\n    System.out.println(\"Removed billing info from account \" + accountId);\n} catch (ValidationException e) {\n    // If the request was not valid, you may want to tell your user\n    // why. You can find the invalid params and reasons in e.getError().getParams()\n    System.out.println(\"Failed validation: \" + e.getError().getMessage());\n} catch (ApiException e) {\n    // Use ApiException to catch a generic error from the API\n    System.out.println(\"Unexpected Recurly Error: \" + e.getError().getMessage());\n}\n"
          },
          {
            "lang": "PHP",
            "source": "try {\n    $client->removeBillingInfo($account_id);\n    echo \"Removed Billing Info: \" . $account_id . PHP_EOL;\n} catch (\\Recurly\\Errors\\Validation $e) {\n    // If the request was not valid, you may want to tell your user\n    // why. You can find the invalid params and reasons in err.params\n    var_dump($e);\n} catch (\\Recurly\\RecurlyError $e) {\n    // If we don't know what to do with the err, we should\n    // probably re-raise and let our web framework and logger handle it\n    var_dump($e);\n}"
          },
          {
            "lang": "Go",
            "source": "billingInfo, err := client.RemoveBillingInfo(accountID)\nif e, ok := err.(*recurly.Error); ok {\n\tif e.Type == recurly.ErrorTypeNotFound {\n\t\tfmt.Printf(\"Resource not found: %v\", e)\n\t\treturn nil, err\n\t}\n\tfmt.Printf(\"Unexpected Recurly error: %v\", e)\n\treturn nil, err\n}\n\nfmt.Printf(\"Removed Billing Info: %v\", billingInfo)"
          }
        ]
      }
    },
    "/sites/{site_id}/accounts/{account_id}/coupon_redemptions": {
      "get": {
        "tags": [
          "account",
          "coupon_redemption"
        ],
        "summary": "Show the coupon redemptions for an account",
        "operationId": "list_account_coupon_redemptions",
        "parameters": [
          {
            "name": "site_id",
            "in": "path",
            "description": "Site ID or subdomain. For ID no prefix is used e.g. `e28zov4fw0v2`. For subdomain use prefix `subdomain-`, e.g. `subdomain-recurly`.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "account_id",
            "in": "path",
            "description": "Account ID or code. For ID no prefix is used e.g. `e28zov4fw0v2`. For code use prefix `code-`, e.g. `code-bob`.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ids",
            "in": "query",
            "description": "Filter results by their IDs. Up to 200 IDs can be passed at once using\ncommas as separators, e.g. `ids=h1at4d57xlmy,gyqgg0d3v9n1,jrsm5b4yefg6`.\n\n**Important notes:**\n\n* The `ids` parameter cannot be used with any other ordering or filtering\n  parameters (`limit`, `order`, `sort`, `begin_time`, `end_time`, etc)\n* Invalid or unknown IDs will be ignored, so you should check that the\n  results correspond to your request.\n* Records are returned in an arbitrary order. Since results are all\n  returned at once you can sort the records yourself.\n",
            "required": false,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort field. You *really* only want to sort by `updated_at` in ascending\norder. In descending order updated records will move behind the cursor and could\nprevent some records from being returned.\n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "default": "created_at",
              "enum": [
                "created_at",
                "updated_at"
              ]
            }
          },
          {
            "name": "begin_time",
            "in": "query",
            "description": "Filter by begin_time when `sort=created_at` or `sort=updated_at`.\n**Note:** this value is an ISO8601 timestamp. A partial timestamp that does not include a time zone will default to UTC.\n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "end_time",
            "in": "query",
            "description": "Filter by end_time when `sort=created_at` or `sort=updated_at`.\n**Note:** this value is an ISO8601 timestamp. A partial timestamp that does not include a time zone will default to UTC.\n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of the the coupon redemptions on an account.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CouponRedemptionList"
                }
              }
            }
          },
          "404": {
            "description": "Incorrect site or invoice ID.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "Node.js",
            "source": "const redemptions = client.listAccountCouponRedemptions(accountId, { limit: 200 })\n\nfor await (const redemption of redemptions.each()) {\n  console.log(redemption.id)\n}\n"
          },
          {
            "lang": "Python",
            "source": "redemptions = client.list_account_coupon_redemptions(account_id, limit=200).items()\nfor redemption in redemptions:\n    print(redemption.id)\n"
          },
          {
            "lang": ".NET",
            "source": "var redemptions = client.ListAccountCouponRedemptions(accountId);\nforeach(CouponRedemption redemption in redemptions)\n{\n    Console.WriteLine(redemption.Id);\n}\n"
          },
          {
            "lang": "Ruby",
            "source": "redemptions = @client.list_account_coupon_redemptions(\n  account_id: account_id,\n  limit: 200\n)\nredemptions.each do |redemption|\n  puts \"CouponRedemption: #{redemption.id}\"\nend\n"
          },
          {
            "lang": "Java",
            "source": "QueryParams params = new QueryParams();\nparams.setLimit(200); // Pull 200 records at a time\nfinal Pager<CouponRedemption> redemptions = client.listAccountCouponRedemptions(accountId, params);\n\nfor (CouponRedemption redemption : redemptions) {\n    System.out.println(redemption.getId());\n}\n"
          },
          {
            "lang": "PHP",
            "source": "$params = ['limit' => 200];\n$account_coupon_redemptions = $client->listAccountCouponRedemptions($account->getId(), $params);\n\nforeach($account_coupon_redemptions as $coupon_redemption) {\n  echo 'Coupon redemption: ' . $coupon_redemption->getId() . PHP_EOL;\n}\n"
          },
          {
            "lang": "Go",
            "source": "listParams := &recurly.ListAccountCouponRedemptionsParams{\n\tSort: recurly.String(\"created_at\"),\n}\naccountCouponRedemptions := client.ListAccountCouponRedemptions(accountID, listParams)\n\nfor accountCouponRedemptions.HasMore {\n\terr := accountCouponRedemptions.Fetch()\n\tif e, ok := err.(*recurly.Error); ok {\n\t\tfmt.Printf(\"Failed to retrieve next page: %v\", e)\n\t\tbreak\n\t}\n\tfor i, couponRedemption := range accountCouponRedemptions.Data {\n\t\tfmt.Printf(\"Account Coupon Redemption %3d: %s\\n\",\n\t\t\ti,\n\t\t\tcouponRedemption.Id,\n\t\t)\n\t}\n}"
          }
        ]
      }
    },
    "/sites/{site_id}/accounts/{account_id}/coupon_redemptions/active": {
      "get": {
        "tags": [
          "account",
          "coupon_redemption"
        ],
        "summary": "Show the coupon redemption that is active on an account",
        "operationId": "get_active_coupon_redemption",
        "parameters": [
          {
            "name": "site_id",
            "in": "path",
            "description": "Site ID or subdomain. For ID no prefix is used e.g. `e28zov4fw0v2`. For subdomain use prefix `subdomain-`, e.g. `subdomain-recurly`.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "account_id",
            "in": "path",
            "description": "Account ID or code. For ID no prefix is used e.g. `e28zov4fw0v2`. For code use prefix `code-`, e.g. `code-bob`.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An active coupon redemption on an account.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CouponRedemption"
                }
              }
            }
          },
          "404": {
            "description": "Incorrect site or account ID.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "Node.js",
            "source": "try {\n  const redemption = await client.getActiveCouponRedemption(accountId)\n  console.log('Fetched coupon redemption: ', redemption.id)\n} catch (err) {\n  if (err instanceof recurly.errors.NotFoundError) {\n    // If the request was not found, you may want to alert the user or\n    // just return null\n    console.log('Resource Not Found')\n  } else {\n    // If we don't know what to do with the err, we should\n    // probably re-raise and let our web framework and logger handle it\n    console.log('Unknown Error: ', err)\n  }\n}\n"
          },
          {
            "lang": "Python",
            "source": "try:\n    redemption = client.get_active_coupon_redemption(account_id)\n    print(\"Got Redemption %s\" % redemption)\nexcept recurly.errors.NotFoundError:\n    # If the resource was not found, you may want to alert the user or\n    # just return nil\n    print(\"Resource Not Found\")\n"
          },
          {
            "lang": ".NET",
            "source": "try\n{\n    CouponRedemption redemption = client.GetActiveCouponRedemption(accountId);\n    Console.WriteLine($\"Fetched coupon redemption {redemption.Id}\");\n}\ncatch (Recurly.Errors.NotFound ex)\n{\n    // If the resource was not found\n    // we may want to alert the user or just return null\n    Console.WriteLine($\"Resource Not Found: {ex.Error.Message}\");\n}\ncatch (Recurly.Errors.ApiError ex)\n{\n    // Use ApiError to catch a generic error from the API\n    Console.WriteLine($\"Unexpected Recurly Error: {ex.Error.Message}\");\n}\n"
          },
          {
            "lang": "Ruby",
            "source": "begin\n  redemption = @client.get_active_coupon_redemption(account_id: account_id)\n  puts \"Got CouponRedemption #{redemption}\"\nrescue Recurly::Errors::NotFoundError\n  # If the resource was not found, you may want to alert the user or\n  # just return nil\n  puts \"Resource Not Found\"\nend\n"
          },
          {
            "lang": "Java",
            "source": "try {\n    final CouponRedemption redemption = client.getActiveCouponRedemption(accountId);\n    System.out.println(\"Fetched coupon redemption \" + redemption.getId());\n} catch (NotFoundException e) {\n    // If the resource was not found\n    // we may want to alert the user or just return null\n    System.out.println(\"Resource Not Found: \" + e.getError().getMessage());\n} catch (ApiException e) {\n    // Use ApiException to catch a generic error from the API\n    System.out.println(\"Unexpected Recurly Error: \" + e.getError().getMessage());\n}\n"
          },
          {
            "lang": "PHP",
            "source": "try {\n    $redemption = $client->getActiveCouponRedemption($account_id);\n\n    echo 'Got Redemption:' . PHP_EOL;\n    var_dump($redemption);\n} catch (\\Recurly\\Errors\\NotFound $e) {\n    // Could not find the resource, you may want to inform the user\n    // or just return a NULL\n    echo 'Could not find resource.' . PHP_EOL;\n    var_dump($e);\n} catch (\\Recurly\\RecurlyError $e) {\n    // Something bad happened... tell the user so that they can fix it?\n    echo 'Some unexpected Recurly error happened. Try again later.' . PHP_EOL;\n}\n"
          },
          {
            "lang": "Go",
            "source": "couponRedemption, err := client.GetActiveCouponRedemption(accountID)\nif e, ok := err.(*recurly.Error); ok {\n\tif e.Type == recurly.ErrorTypeNotFound {\n\t\tfmt.Printf(\"Resource not found: %v\", e)\n\t\treturn nil, err\n\t}\n\tfmt.Printf(\"Unexpected Recurly error: %v\", e)\n\treturn nil, err\n}\n\nfmt.Printf(\"Fetched Active Coupon Redemption: %v\", couponRedemption.Id)"
          }
        ]
      },
      "post": {
        "tags": [
          "account",
          "coupon_redemption"
        ],
        "summary": "Generate an active coupon redemption on an account",
        "operationId": "create_coupon_redemption",
        "parameters": [
          {
            "name": "site_id",
            "in": "path",
            "description": "Site ID or subdomain. For ID no prefix is used e.g. `e28zov4fw0v2`. For subdomain use prefix `subdomain-`, e.g. `subdomain-recurly`.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "account_id",
            "in": "path",
            "description": "Account ID or code. For ID no prefix is used e.g. `e28zov4fw0v2`. For code use prefix `code-`, e.g. `code-bob`.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CouponRedemptionCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Returns the new coupon redemption.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CouponRedemption"
                }
              }
            }
          },
          "400": {
            "description": "Bad request; perhaps missing or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Incorrect site or account ID.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "422": {
            "description": "A validation error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "Python",
            "source": "try:\n    redemption_create = {\"currency\": \"USD\", \"coupon_id\": coupon_id}\n    redemption = client.create_coupon_redemption(account_id, redemption_create)\n    print(\"Created Redemption %s\" % redemption)\nexcept recurly.errors.ValidationError as e:\n    # If the request was invalid, you may want to tell your user\n    # why. You can find the invalid params and reasons in e.error.params\n    print(\"ValidationError: %s\" % e.error.message)\n    print(e.error.params)\n"
          },
          {
            "lang": ".NET",
            "source": "try {\n  var redemptionReq = new CouponRedemptionCreate()\n  {\n    CouponId = couponId,\n  };\n  var redemption = client.CreateCouponRedemption(accountId, redemptionReq);\n  Console.WriteLine($\"Created coupon redemption: {redemption.Id}\");\n\n} catch (Recurly.Errors.Validation ex)\n{\n    // If the request was not valid, you may want to tell your user\n    // why. You can find the invalid params and reasons in ex.Error.Params\n    Console.WriteLine($\"Failed validation: {ex.Error.Message}\");\n}\ncatch (Recurly.Errors.ApiError ex)\n{\n    // Use ApiError to catch a generic error from the API\n    Console.WriteLine($\"Unexpected Recurly Error: {ex.Error.Message}\");\n}"
          },
          {
            "lang": "Ruby",
            "source": "begin\n  redemption_create = {\n    currency: 'USD',\n    coupon_id: coupon_id\n  }\n  redemption = @client.create_coupon_redemption(\n    account_id: account_id,\n    body: redemption_create\n  )\n  puts \"Created CouponRedemption #{redemption}\"\nrescue Recurly::Errors::ValidationError => e\n  # If the request was invalid, you may want to tell your user\n  # why. You can find the invalid params and reasons in e.recurly_error.params\n  puts \"ValidationError: #{e.recurly_error.params}\"\nend\n"
          },
          {
            "lang": "Java",
            "source": "try {\n    CouponRedemptionCreate coupRedCreate = new CouponRedemptionCreate();\n    coupRedCreate.setCouponId(couponId);\n\n    CouponRedemption redemption = client.createCouponRedemption(accountId, coupRedCreate);\n    System.out.println(\"Created coupon redemption \" + redemption.getId());\n} catch (ValidationException e) {\n    // If the request was not valid, you may want to tell your user\n    // why. You can find the invalid params and reasons in e.getError().getParams()\n    System.out.println(\"Failed validation: \" + e.getError().getMessage());\n} catch (ApiException e) {\n    // Use ApiException to catch a generic error from the API\n    System.out.println(\"Unexpected Recurly Error: \" + e.getError().getMessage());\n}\n"
          },
          {
            "lang": "PHP",
            "source": "try {\n    $redemption_create = array(\n        \"currency\" => \"USD\",\n        \"coupon_id\" => \"code-$coupon_code\"\n    );\n    $redemption = $client->createCouponRedemption($account_id, $redemption_create);\n    echo \"Created Redemption:\" . PHP_EOL;\n    var_dump($redemption);\n} catch (\\Recurly\\Errors\\Validation $e) {\n    // If the request was not valid, you may want to tell your user\n    // why. You can find the invalid params and reasons in err.params\n    var_dump($e);\n} catch (\\Recurly\\RecurlyError $e) {\n    // If we don't know what to do with the err, we should\n    // probably re-raise and let our web framework and logger handle it\n    var_dump($e);\n}"
          },
          {
            "lang": "Go",
            "source": "redemptionReq := &recurly.CouponRedemptionCreate{\n\tCouponId: recurly.String(couponID),\n\tCurrency: recurly.String(\"USD\"),\n}\n\ncouponRedemption, err := client.CreateCouponRedemption(accountID, redemptionReq)\nif e, ok := err.(*recurly.Error); ok {\n\tif e.Type == recurly.ErrorTypeValidation {\n\t\tfmt.Printf(\"Failed validation: %v\", e)\n\t\treturn nil, err\n\t}\n\tfmt.Printf(\"Unexpected Recurly error: %v\", e)\n\treturn nil, err\n}\nfmt.Printf(\"Created Coupon Redemption: %v\", couponRedemption)"
          }
        ]
      },
      "delete": {
        "tags": [
          "account",
          "coupon_redemption"
        ],
        "summary": "Delete the active coupon redemption from an account",
        "operationId": "remove_coupon_redemption",
        "parameters": [
          {
            "name": "site_id",
            "in": "path",
            "description": "Site ID or subdomain. For ID no prefix is used e.g. `e28zov4fw0v2`. For subdomain use prefix `subdomain-`, e.g. `subdomain-recurly`.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "account_id",
            "in": "path",
            "description": "Account ID or code. For ID no prefix is used e.g. `e28zov4fw0v2`. For code use prefix `code-`, e.g. `code-bob`.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Coupon redemption deleted.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CouponRedemption"
                }
              }
            }
          },
          "404": {
            "description": "Incorrect site or account ID.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "Node.js",
            "source": "try {\n  const redemption = await client.removeCouponRedemption(accountId)\n  console.log('Removed coupon redemption: ', redemption.id)\n} catch (err) {\n  if (err instanceof recurly.errors.NotFoundError) {\n    // If the request was not found, you may want to alert the user or\n    // just return null\n    console.log('Resource Not Found')\n  } else {\n    // If we don't know what to do with the err, we should\n    // probably re-raise and let our web framework and logger handle it\n    console.log('Unknown Error: ', err)\n  }\n}\n"
          },
          {
            "lang": "Python",
            "source": "try:\n    client.remove_coupon_redemption(account_id)\n    print(\"Removed Redemption from Account id=%s\" % account_id)\nexcept recurly.errors.NotFoundError:\n    # If the resource was not found, you may want to alert the user or\n    # just return nil\n    print(\"Resource Not Found\")\n"
          },
          {
            "lang": ".NET",
            "source": "try {\n  var redemption = client.RemoveCouponRedemption(accountId);\n  Console.WriteLine($\"Removed coupon redemption from account: {redemption.Id}\");\n\n} catch (Recurly.Errors.Validation ex)\n{\n    // If the request was not valid, you may want to tell your user\n    // why. You can find the invalid params and reasons in ex.Error.Params\n    Console.WriteLine($\"Failed validation: {ex.Error.Message}\");\n}\ncatch (Recurly.Errors.ApiError ex)\n{\n    // Use ApiError to catch a generic error from the API\n    Console.WriteLine($\"Unexpected Recurly Error: {ex.Error.Message}\");\n}"
          },
          {
            "lang": "Ruby",
            "source": "begin\n  @client.remove_coupon_redemption(account_id: account_id)\n  puts \"Removed CouponRedemption #{account_id}\"\nrescue Recurly::Errors::NotFoundError\n  # If the resource was not found, you may want to alert the user or\n  # just return nil\n  puts \"Resource Not Found\"\nend\n"
          },
          {
            "lang": "Java",
            "source": "try {\n    final CouponRedemption redemption = client.removeCouponRedemption(accountId);\n    System.out.println(\"Removed coupon redemption \" + redemption.getId());\n} catch (NotFoundException e) {\n    // If the resource was not found\n    // we may want to alert the user or just return null\n    System.out.println(\"Resource Not Found: \" + e.getError().getMessage());\n} catch (ApiException e) {\n    // Use ApiException to catch a generic error from the API\n    System.out.println(\"Unexpected Recurly Error: \" + e.getError().getMessage());\n}\n"
          },
          {
            "lang": "PHP",
            "source": "try {\n    $redemption = $client->removeCouponRedemption($account_id);\n    echo \"Removed Active Coupon Redemption:\" . PHP_EOL;\n    var_dump($redemption);\n} catch (\\Recurly\\Errors\\Validation $e) {\n    // If the request was not valid, you may want to tell your user\n    // why. You can find the invalid params and reasons in err.params\n    var_dump($e);\n} catch (\\Recurly\\RecurlyError $e) {\n    // If we don't know what to do with the err, we should\n    // probably re-raise and let our web framework and logger handle it\n    var_dump($e);\n}"
          },
          {
            "lang": "Go",
            "source": "couponRedemption, err := client.RemoveCouponRedemption(accountID)\nif e, ok := err.(*recurly.Error); ok {\n\tif e.Type == recurly.ErrorTypeNotFound {\n\t\tfmt.Printf(\"Resource not found: %v\", e)\n\t\treturn nil, err\n\t}\n\tfmt.Printf(\"Unexpected Recurly error: %v\", e)\n\treturn nil, err\n}\n\nfmt.Printf(\"Removed Coupon Redemption: %v\", couponRedemption.Id)"
          }
        ]
      }
    },
    "/sites/{site_id}/accounts/{account_id}/credit_payments": {
      "get": {
        "tags": [
          "account",
          "credit_payment"
        ],
        "summary": "List an account's credit payments",
        "operationId": "list_account_credit_payments",
        "parameters": [
          {
            "name": "site_id",
            "in": "path",
            "description": "Site ID or subdomain. For ID no prefix is used e.g. `e28zov4fw0v2`. For subdomain use prefix `subdomain-`, e.g. `subdomain-recurly`.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "account_id",
            "in": "path",
            "description": "Account ID or code. For ID no prefix is used e.g. `e28zov4fw0v2`. For code use prefix `code-`, e.g. `code-bob`.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit number of records 1-200.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maximum": 200,
              "minimum": 1,
              "type": "integer",
              "default": 20
            }
          },
          {
            "name": "order",
            "in": "query",
            "description": "Sort order.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "default": "desc",
              "enum": [
                "asc",
                "desc"
              ]
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort field. You *really* only want to sort by `updated_at` in ascending\norder. In descending order updated records will move behind the cursor and could\nprevent some records from being returned.\n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "default": "created_at",
              "enum": [
                "created_at",
                "updated_at"
              ]
            }
          },
          {
            "name": "begin_time",
            "in": "query",
            "description": "Filter by begin_time when `sort=created_at` or `sort=updated_at`.\n**Note:** this value is an ISO8601 timestamp. A partial timestamp that does not include a time zone will default to UTC.\n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "end_time",
            "in": "query",
            "description": "Filter by end_time when `sort=created_at` or `sort=updated_at`.\n**Note:** this value is an ISO8601 timestamp. A partial timestamp that does not include a time zone will default to UTC.\n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of the account's credit payments.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreditPaymentList"
                }
              }
            }
          },
          "400": {
            "description": "Invalid or unpermitted parameter.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Incorrect site or account ID.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "Node.js",
            "source": "const payments = client.listAccountCreditPayments(accountId, { limit: 200 })\n\nfor await (const payment of payments.each()) {\n  console.log(payment.uuid)\n}\n"
          },
          {
            "lang": "Python",
            "source": "payments = client.list_account_credit_payments(account_id, limit=200).items()\nfor payment in payments:\n    print(payment.id)\n"
          },
          {
            "lang": ".NET",
            "source": "var payments = client.ListAccountCreditPayments(accountId, limit: 200);\nforeach(CreditPayment payment in payments)\n{\n    Console.WriteLine(payment.Uuid);\n}\n"
          },
          {
            "lang": "Ruby",
            "source": "payments = @client.list_account_credit_payments(\n  account_id: account_id,\n  limit: 200\n)\npayments.each do |payment|\n  puts \"CreditPayment: #{payment.id}\"\nend\n"
          },
          {
            "lang": "Java",
            "source": "QueryParams params = new QueryParams();\nparams.setLimit(200); // Pull 200 records at a time\nPager<CreditPayment> payments = client.listAccountCreditPayments(accountId, params);\n\nfor (CreditPayment payment : payments) {\n    System.out.println(payment.getUuid());\n}\n"
          },
          {
            "lang": "PHP",
            "source": "$params = ['limit' => 200];\n$credit_payments = $client->listAccountCreditPayments($account->getId(), $params);\n\nforeach($credit_payments as $payment) {\n  echo 'Credit Payment: ' . $payment->getId() . PHP_EOL;\n}\n"
          },
          {
            "lang": "Go",
            "source": "listParams := &recurly.ListAccountCreditPaymentsParams{\n\tSort:  recurly.String(\"created_at\"),\n\tOrder: recurly.String(\"desc\"),\n\tLimit: recurly.Int(200),\n}\ncreditPayments := client.ListAccountCreditPayments(accountID, listParams)\n\nfor creditPayments.HasMore {\n\terr := creditPayments.Fetch()\n\tif e, ok := err.(*recurly.Error); ok {\n\t\tfmt.Printf(\"Failed to retrieve next page: %v\", e)\n\t\tbreak\n\t}\n\tfor i, creditPayment := range creditPayments.Data {\n\t\tfmt.Printf(\"Account Credit Payment %3d: %s\\n\",\n\t\t\ti,\n\t\t\tcreditPayment.Id,\n\t\t)\n\t}\n}"
          }
        ]
      }
    },
    "/sites/{site_id}/accounts/{account_id}/invoices": {
      "get": {
        "tags": [
          "invoice",
          "account"
        ],
        "summary": "List an account's invoices",
        "operationId": "list_account_invoices",
        "parameters": [
          {
            "name": "site_id",
            "in": "path",
            "description": "Site ID or subdomain. For ID no prefix is used e.g. `e28zov4fw0v2`. For subdomain use prefix `subdomain-`, e.g. `subdomain-recurly`.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "account_id",
            "in": "path",
            "description": "Account ID or code. For ID no prefix is used e.g. `e28zov4fw0v2`. For code use prefix `code-`, e.g. `code-bob`.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ids",
            "in": "query",
            "description": "Filter results by their IDs. Up to 200 IDs can be passed at once using\ncommas as separators, e.g. `ids=h1at4d57xlmy,gyqgg0d3v9n1,jrsm5b4yefg6`.\n\n**Important notes:**\n\n* The `ids` parameter cannot be used with any other ordering or filtering\n  parameters (`limit`, `order`, `sort`, `begin_time`, `end_time`, etc)\n* Invalid or unknown IDs will be ignored, so you should check that the\n  results correspond to your request.\n* Records are returned in an arbitrary order. Since results are all\n  returned at once you can sort the records yourself.\n",
            "required": false,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit number of records 1-200.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maximum": 200,
              "minimum": 1,
              "type": "integer",
              "default": 20
            }
          },
          {
            "name": "order",
            "in": "query",
            "description": "Sort order.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "default": "desc",
              "enum": [
                "asc",
                "desc"
              ]
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort field. You *really* only want to sort by `updated_at` in ascending\norder. In descending order updated records will move behind the cursor and could\nprevent some records from being returned.\n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "default": "created_at",
              "enum": [
                "created_at",
                "updated_at"
              ]
            }
          },
          {
            "name": "begin_time",
            "in": "query",
            "description": "Filter by begin_time when `sort=created_at` or `sort=updated_at`.\n**Note:** this value is an ISO8601 timestamp. A partial timestamp that does not include a time zone will default to UTC.\n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "end_time",
            "in": "query",
            "description": "Filter by end_time when `sort=created_at` or `sort=updated_at`.\n**Note:** this value is an ISO8601 timestamp. A partial timestamp that does not include a time zone will default to UTC.\n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Filter by type when:\n- `type=charge`, only charge invoices will be returned.\n- `type=credit`, only credit invoices will be returned.\n- `type=non-legacy`, only charge and credit invoices will be returned.\n- `type=legacy`, only legacy invoices will be returned.\n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": [
                "charge",
                "credit",
                "non-legacy",
                "legacy"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of the account's invoices.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvoiceList"
                }
              }
            }
          },
          "400": {
            "description": "Invalid or unpermitted parameter.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Incorrect site or account ID.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "Node.js",
            "source": "const invoices = client.listAccountInvoices(accountId, { limit: 200 })\n\nfor await (const invoice of invoices.each()) {\n  console.log(invoice.number)\n}\n"
          },
          {
            "lang": "Python",
            "source": "invoices = client.list_account_invoices(account_id, limit=200).items()\nfor invoice in invoices:\n    print(invoice.number)\n"
          },
          {
            "lang": ".NET",
            "source": "var invoices = client.ListAccountInvoices(accountId);\nforeach(Invoice invoice in invoices)\n{\n    Console.WriteLine(invoice.Id);\n}\n"
          },
          {
            "lang": "Ruby",
            "source": "invoices = @client.list_account_invoices(\n  account_id: account_id,\n  limit: 200\n)\ninvoices.each do |invoice|\n  puts \"Invoice: #{invoice.number}\"\nend\n"
          },
          {
            "lang": "Java",
            "source": "QueryParams params = new QueryParams();\nparams.setLimit(200); // Pull 200 records at a time\nfinal Pager<Invoice> invoices = client.listAccountInvoices(accountId, params);\n\nfor (Invoice invoice : invoices) {\n    System.out.println(invoice.getNumber());\n}\n"
          },
          {
            "lang": "PHP",
            "source": "$params = ['limit' => 10];\n$invoices = $client->listAccountInvoices($account->getId(), $params);\nforeach($invoices as $invoice) {\n  echo 'Account invoice: ' . $invoice->getNumber() . PHP_EOL;\n}\n"
          },
          {
            "lang": "Go",
            "source": "listParams := &recurly.ListAccountInvoicesParams{\n\tSort:  recurly.String(\"created_at\"),\n\tOrder: recurly.String(\"desc\"),\n\tLimit: recurly.Int(200),\n}\naccountInvoices := client.ListAccountInvoices(accountID, listParams)\n\nfor accountInvoices.HasMore {\n\terr := accountInvoices.Fetch()\n\tif e, ok := err.(*recurly.Error); ok {\n\t\tfmt.Printf(\"Failed to retrieve next page: %v\", e)\n\t\tbreak\n\t}\n\tfor i, invoice := range accountInvoices.Data {\n\t\tfmt.Printf(\"Account Invoice %3d: %s\\n\",\n\t\t\ti,\n\t\t\tinvoice.Id,\n\t\t)\n\t}\n}"
          }
        ]
      },
      "post": {
        "tags": [
          "invoice",
          "account"
        ],
        "summary": "Create an invoice for pending line items",
        "operationId": "create_invoice",
        "parameters": [
          {
            "name": "site_id",
            "in": "path",
            "description": "Site ID or subdomain. For ID no prefix is used e.g. `e28zov4fw0v2`. For subdomain use prefix `subdomain-`, e.g. `subdomain-recurly`.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "account_id",
            "in": "path",
            "description": "Account ID or code. For ID no prefix is used e.g. `e28zov4fw0v2`. For code use prefix `code-`, e.g. `code-bob`.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InvoiceCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Returns the new invoices.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvoiceCollection"
                }
              }
            }
          },
          "400": {
            "description": "Bad request, perhaps invalid JSON?",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Incorrect site or account ID.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "422": {
            "description": "Invalid parameters, no pending line items, or error running the transaction.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMayHaveTransaction"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "Node.js",
            "source": "try {\n  let invoiceCreate = {\n    currency: 'USD',\n    collectionMethod: 'automatic'\n  }\n  let invoiceCollection = await client.createInvoice(accountId, invoiceCreate)\n  console.log('Created Invoice')\n  console.log('Charge Invoice: ', invoiceCollection.chargeInvoice)\n  console.log('Credit Invoices: ', invoiceCollection.creditInvoices)\n} catch (err) {\n  if (err instanceof recurly.errors.ValidationError) {\n    // If the request was not valid, you may want to tell your user\n    // why. You can find the invalid params and reasons in err.params\n    console.log('Failed validation', err.params)\n  } else {\n    // If we don't know what to do with the err, we should\n    // probably re-raise and let our web framework and logger handle it\n    console.log('Unknown Error: ', err)\n  }\n}\n"
          },
          {
            "lang": "Python",
            "source": "try:\n    invoice_create = {\"currency\": \"USD\", \"collection_method\": \"automatic\"}\n    invoice_collection = client.create_invoice(account_id, invoice_create)\n    print(\"Created InvoiceCollection %s\" % invoice_collection)\nexcept recurly.errors.ValidationError as e:\n    # If the request was invalid, you may want to tell your user\n    # why. You can find the invalid params and reasons in e.error.params\n    print(\"ValidationError: %s\" % e.error.message)\n    print(e.error.params)\n"
          },
          {
            "lang": ".NET",
            "source": "try\n{\n    // creates an invoice based on pending charges or credits on account\n    var collection = client.CreateInvoice(accountId, new InvoiceCreate()\n    {\n        Currency = \"USD\",\n        CollectionMethod = \"automatic\"\n    });\n    Console.WriteLine(\"Created Invoice\");\n    Console.WriteLine(collection.ChargeInvoice);\n    Console.WriteLine(collection.CreditInvoices);\n}\ncatch (Recurly.Errors.Validation ex)\n{\n    // If the request was not valid, you may want to tell your user\n    // why. You can find the invalid params and reasons in ex.Error.Params\n    Console.WriteLine($\"Failed validation: {ex.Error.Message}\");\n}\ncatch (Recurly.Errors.ApiError ex)\n{\n    // Use ApiError to catch a generic error from the API\n    Console.WriteLine($\"Unexpected Recurly Error: {ex.Error.Message}\");\n}\n"
          },
          {
            "lang": "Ruby",
            "source": "begin\n  invoice_create = {\n    currency: 'USD',\n    collection_method: 'automatic'\n  }\n  collection = @client.create_invoice(\n    account_id: account_id,\n    body: invoice_create\n  )\n  puts \"Created InvoiceCollection #{collection}\"\nrescue Recurly::Errors::ValidationError => e\n  # If the request was invalid, you may want to tell your user\n  # why. You can find the invalid params and reasons in e.recurly_error.params\n  puts \"ValidationError: #{e.recurly_error.params}\"\nend\n"
          },
          {
            "lang": "Java",
            "source": "try {\n    InvoiceCreate invoiceCreate = new InvoiceCreate();\n    invoiceCreate.setCurrency(\"USD\");\n    invoiceCreate.setCollectionMethod(\"automatic\");\n\n    InvoiceCollection collection = client.createInvoice(accountId, invoiceCreate);\n    System.out.println(\"Created Invoice\");\n    System.out.println(collection.getChargeInvoice());\n    System.out.println(collection.getCreditInvoices());\n} catch (ValidationException e) {\n    // If the request was not valid, you may want to tell your user\n    // why. You can find the invalid params and reasons in e.getError().getParams()\n    System.out.println(\"Failed validation: \" + e.getError().getMessage());\n} catch (ApiException e) {\n    // Use ApiException to catch a generic error from the API\n    System.out.println(\"Unexpected Recurly Error: \" + e.getError().getMessage());\n}\n"
          },
          {
            "lang": "PHP",
            "source": "try {\n    $invoice_create = array(\n        \"currency\" => \"USD\",\n        \"collection_method\" => \"automatic\"\n    );\n    $invoice_collection = $client->createInvoice(\n        $account_id,\n        $invoice_create\n    );\n    echo \"Created Invoice:\" . PHP_EOL;\n    var_dump($invoice_collection);\n} catch (\\Recurly\\Errors\\Validation $e) {\n    // If the request was not valid, you may want to tell your user\n    // why. You can find the invalid params and reasons in err.params\n    var_dump($e);\n} catch (\\Recurly\\RecurlyError $e) {\n    // If we don't know what to do with the err, we should\n    // probably re-raise and let our web framework and logger handle it\n    var_dump($e);\n}"
          },
          {
            "lang": "Go",
            "source": "invoiceReq := &recurly.InvoiceCreate{\n\tCurrency:         recurly.String(\"USD\"),\n\tCollectionMethod: recurly.String(\"automatic\"),\n}\n\ncollection, err := client.CreateInvoice(accountID, invoiceReq)\nif e, ok := err.(*recurly.Error); ok {\n\tif e.Type == recurly.ErrorTypeValidation {\n\t\tfmt.Printf(\"Failed validation: %v\", e)\n\t\treturn nil, err\n\t}\n\tfmt.Printf(\"Unexpected Recurly error: %v\", e)\n\treturn nil, err\n}\nfmt.Printf(\"Created Invoice Collection: %v\", collection)"
          }
        ]
      }
    },
    "/sites/{site_id}/accounts/{account_id}/invoices/preview": {
      "post": {
        "tags": [
          "invoice",
          "account"
        ],
        "summary": "Preview new invoice for pending line items",
        "operationId": "preview_invoice",
        "parameters": [
          {
            "name": "site_id",
            "in": "path",
            "description": "Site ID or subdomain. For ID no prefix is used e.g. `e28zov4fw0v2`. For subdomain use prefix `subdomain-`, e.g. `subdomain-recurly`.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "account_id",
            "in": "path",
            "description": "Account ID or code. For ID no prefix is used e.g. `e28zov4fw0v2`. For code use prefix `code-`, e.g. `code-bob`.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InvoiceCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Returns the invoice previews.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvoiceCollection"
                }
              }
            }
          },
          "400": {
            "description": "Bad request, perhaps invalid JSON?",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Incorrect site or account ID.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "422": {
            "description": "Invalid parameter or pending line items.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "Node.js",
            "source": "try {\n  const collection = await client.previewInvoice(accountId, {\n    currency: \"USD\",\n    collectionMethod: \"automatic\"\n  })\n  console.log(`Previewed invoice due at ${collection.chargeInvoice.dueAt}`)\n  console.log(collection.chargeInvoice)\n  console.log(collection.creditInvoices)\n} catch(err) {\n\n  if (err instanceof recurly.errors.ValidationError) {\n    // If the request was not valid, you may want to tell your user\n    // why. You can find the invalid params and reasons in err.params\n    console.log('Failed validation', err.params)\n  } else {\n    // If we don't know what to do with the err, we should\n    // probably re-raise and let our web framework and logger handle it\n    console.log('Unknown Error: ', err)\n  }\n}\n"
          },
          {
            "lang": "Python",
            "source": "try:\n    invoice_preview = {\"currency\": \"USD\", \"collection_method\": \"automatic\"}\n    invoice_collection = client.preview_invoice(account_id, invoice_preview)\n    print(\"Preview InvoiceCollection %s\" % invoice_collection)\nexcept recurly.errors.ValidationError as e:\n    # If the request was invalid, you may want to tell your user\n    # why. You can find the invalid params and reasons in e.error.params\n    print(\"ValidationError: %s\" % e.error.message)\n    print(e.error.params)\n"
          },
          {
            "lang": ".NET",
            "source": "try\n{\n    // creates a preview invoice based on pending charges or credits on account\n    var collection = client.PreviewInvoice(accountId, new InvoiceCreate()\n    {\n        Currency = \"USD\",\n        CollectionMethod = \"automatic\"\n    });\n    Console.WriteLine($\"Previewed invoice DueAt {collection.ChargeInvoice.DueAt}\");\n    Console.WriteLine(collection.ChargeInvoice);\n    Console.WriteLine(collection.CreditInvoices);\n}\ncatch (Recurly.Errors.Validation ex)\n{\n    // If the request was not valid, you may want to tell your user\n    // why. You can find the invalid params and reasons in ex.Error.Params\n    Console.WriteLine($\"Failed validation: {ex.Error.Message}\");\n}\ncatch (Recurly.Errors.ApiError ex)\n{\n    // Use ApiError to catch a generic error from the API\n    Console.WriteLine($\"Unexpected Recurly Error: {ex.Error.Message}\");\n}\n"
          },
          {
            "lang": "Ruby",
            "source": "begin\n  invoice_preview = {\n    currency: \"USD\",\n    collection_method: \"automatic\"\n  }\n  collection = @client.create_invoice(\n    account_id: account_id,\n    body: invoice_preview\n  )\n  puts \"Created InvoiceCollection #{collection}\"\nrescue Recurly::Errors::ValidationError => e\n  # If the request was invalid, you may want to tell your user\n  # why. You can find the invalid params and reasons in e.recurly_error.params\n  puts \"ValidationError: #{e.recurly_error.params}\"\nend\n"
          },
          {
            "lang": "Java",
            "source": "try {\n    InvoiceCreate invoiceCreate = new InvoiceCreate();\n    invoiceCreate.setCurrency(\"USD\");\n    invoiceCreate.setCollectionMethod(\"automatic\");\n\n    InvoiceCollection collection = client.previewInvoice(accountId, invoiceCreate);\n    System.out.println(\"Previewed Invoice due at \" + collection.getChargeInvoice().getDueAt());\n    System.out.println(collection.getChargeInvoice());\n    System.out.println(collection.getCreditInvoices());\n} catch (ValidationException e) {\n    // If the request was not valid, you may want to tell your user\n    // why. You can find the invalid params and reasons in e.getError().getParams()\n    System.out.println(\"Failed validation: \" + e.getError().getMessage());\n} catch (ApiException e) {\n    // Use ApiException to catch a generic error from the API\n    System.out.println(\"Unexpected Recurly Error: \" + e.getError().getMessage());\n}\n"
          },
          {
            "lang": "PHP",
            "source": "try {\n    $invoice_preview = array(\n        \"currency\" => \"USD\",\n        \"collection_method\" => \"automatic\"\n    );\n    $invoice_collection = $client->previewInvoice(\n        $account_id,\n        $invoice_preview\n    );\n    echo \"Previewed Invoice:\" . PHP_EOL;\n    var_dump($invoice_collection);\n} catch (\\Recurly\\Errors\\Validation $e) {\n    // If the request was not valid, you may want to tell your user\n    // why. You can find the invalid params and reasons in err.params\n    var_dump($e);\n} catch (\\Recurly\\RecurlyError $e) {\n    // If we don't know what to do with the err, we should\n    // probably re-raise and let our web framework and logger handle it\n    var_dump($e);\n}"
          },
          {
            "lang": "Go",
            "source": "invoiceReq := &recurly.InvoiceCreate{\n\tCurrency: recurly.String(\"USD\"),\n}\n\ncollection, err := client.PreviewInvoice(accountID, invoiceReq)\nif e, ok := err.(*recurly.Error); ok {\n\tif e.Type == recurly.ErrorTypeValidation {\n\t\tfmt.Printf(\"Failed validation: %v\", e)\n\t\treturn nil, err\n\t}\n\tfmt.Printf(\"Unexpected Recurly error: %v\", e)\n\treturn nil, err\n}\nfmt.Printf(\"Preview Invoice %v\", collection.ChargeInvoice)"
          }
        ]
      }
    },
    "/sites/{site_id}/accounts/{account_id}/line_items": {
      "get": {
        "tags": [
          "account",
          "line_item"
        ],
        "summary": "List an account's line items",
        "operationId": "list_account_line_items",
        "parameters": [
          {
            "name": "site_id",
            "in": "path",
            "description": "Site ID or subdomain. For ID no prefix is used e.g. `e28zov4fw0v2`. For subdomain use prefix `subdomain-`, e.g. `subdomain-recurly`.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "account_id",
            "in": "path",
            "description": "Account ID or code. For ID no prefix is used e.g. `e28zov4fw0v2`. For code use prefix `code-`, e.g. `code-bob`.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ids",
            "in": "query",
            "description": "Filter results by their IDs. Up to 200 IDs can be passed at once using\ncommas as separators, e.g. `ids=h1at4d57xlmy,gyqgg0d3v9n1,jrsm5b4yefg6`.\n\n**Important notes:**\n\n* The `ids` parameter cannot be used with any other ordering or filtering\n  parameters (`limit`, `order`, `sort`, `begin_time`, `end_time`, etc)\n* Invalid or unknown IDs will be ignored, so you should check that the\n  results correspond to your request.\n* Records are returned in an arbitrary order. Since results are all\n  returned at once you can sort the records yourself.\n",
            "required": false,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit number of records 1-200.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maximum": 200,
              "minimum": 1,
              "type": "integer",
              "default": 20
            }
          },
          {
            "name": "order",
            "in": "query",
            "description": "Sort order.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "default": "desc",
              "enum": [
                "asc",
                "desc"
              ]
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort field. You *really* only want to sort by `updated_at` in ascending\norder. In descending order updated records will move behind the cursor and could\nprevent some records from being returned.\n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "default": "created_at",
              "enum": [
                "created_at",
                "updated_at"
              ]
            }
          },
          {
            "name": "begin_time",
            "in": "query",
            "description": "Filter by begin_time when `sort=created_at` or `sort=updated_at`.\n**Note:** this value is an ISO8601 timestamp. A partial timestamp that does not include a time zone will default to UTC.\n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "end_time",
            "in": "query",
            "description": "Filter by end_time when `sort=created_at` or `sort=updated_at`.\n**Note:** this value is an ISO8601 timestamp. A partial timestamp that does not include a time zone will default to UTC.\n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "original",
            "in": "query",
            "description": "Filter by original field.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": [
                "true"
              ]
            }
          },
          {
            "name": "state",
            "in": "query",
            "description": "Filter by state field.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": [
                "invoiced",
                "pending"
              ]
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Filter by type field.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": [
                "charge",
                "credit"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of the account's line items.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LineItemList"
                }
              }
            }
          },
          "400": {
            "description": "Invalid or unpermitted parameter.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Incorrect site ID.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "Node.js",
            "source": "const lineItems = client.listAccountLineItems(accountId, { limit: 200 })\n\nfor await (const lineItem of lineItems.each()) {\n  console.log(lineItem.id)\n}\n"
          },
          {
            "lang": "Python",
            "source": "line_items = client.list_account_line_items(account_id, limit=200).items()\nfor line_item in line_items:\n    print(line_item.id)\n"
          },
          {
            "lang": ".NET",
            "source": "var lineItems = client.ListAccountLineItems(accountId);\nforeach(LineItem lineItem in lineItems)\n{\n    Console.WriteLine(lineItem.Id);\n}\n"
          },
          {
            "lang": "Ruby",
            "source": "line_items = @client.list_account_line_items(\n  account_id: account_id,\n  limit: 200\n)\nline_items.each do |line_item|\n  puts \"LineItem: #{line_item.id}\"\nend\n"
          },
          {
            "lang": "Java",
            "source": "QueryParams params = new QueryParams();\nparams.setLimit(200); // Pull 200 records at a time\nfinal Pager<LineItem> lineItems = client.listAccountLineItems(accountId, params);\n\nfor (LineItem lineItem : lineItems) {\n    System.out.println(lineItem.getId());\n}\n"
          },
          {
            "lang": "PHP",
            "source": "$params = ['limit' => 200];\n$account_line_items = $client->listAccountLineItems($account_id, $params);\n\nforeach($account_line_items as $line_item) {\n  echo 'Account line item: ' . $line_item->getId() . PHP_EOL;\n}\n"
          },
          {
            "lang": "Go",
            "source": "listParams := &recurly.ListAccountLineItemsParams{\n\tSort:  recurly.String(\"created_at\"),\n\tOrder: recurly.String(\"desc\"),\n\tLimit: recurly.Int(200),\n}\naccountLineItems := client.ListAccountLineItems(accountID, listParams)\n\nfor accountLineItems.HasMore {\n\terr := accountLineItems.Fetch()\n\tif e, ok := err.(*recurly.Error); ok {\n\t\tfmt.Printf(\"Failed to retrieve next page: %v\", e)\n\t\tbreak\n\t}\n\tfor i, lineItem := range accountLineItems.Data {\n\t\tfmt.Printf(\"Account Line Item %3d: %s\\n\",\n\t\t\ti,\n\t\t\tlineItem.Id,\n\t\t)\n\t}\n}"
          }
        ]
      },
      "post": {
        "tags": [
          "account",
          "line_item"
        ],
        "summary": "Create a new line item for the account",
        "operationId": "create_line_item",
        "parameters": [
          {
            "name": "site_id",
            "in": "path",
            "description": "Site ID or subdomain. For ID no prefix is used e.g. `e28zov4fw0v2`. For subdomain use prefix `subdomain-`, e.g. `subdomain-recurly`.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "account_id",
            "in": "path",
            "description": "Account ID or code. For ID no prefix is used e.g. `e28zov4fw0v2`. For code use prefix `code-`, e.g. `code-bob`.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LineItemCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Returns the new line item.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LineItem"
                }
              }
            }
          },
          "404": {
            "description": "Incorrect site or account ID.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "422": {
            "description": "A validation error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "Node.js",
            "source": "try {\n  let lineItemReq = {\n    currency: 'USD',\n    unitAmount: 1000,\n    type: 'charge' // choose \"credit\" for a credit\n  }\n  let lineItem = await client.createLineItem(accountId, lineItemReq)\n  console.log('Created Line Item: ', lineItem.uuid)\n} catch (err) {\n  if (err instanceof recurly.errors.ValidationError) {\n    // If the request was not valid, you may want to tell your user\n    // why. You can find the invalid params and reasons in err.params\n    console.log('Failed validation', err.params)\n  } else {\n    // If we don't know what to do with the err, we should\n    // probably re-raise and let our web framework and logger handle it\n    console.log('Unknown Error: ', err)\n  }\n}\n"
          },
          {
            "lang": "Python",
            "source": "try:\n    line_item_create = {\n        \"currency\": \"USD\",\n        \"unit_amount\": 1000,\n        \"type\": \"charge\",  # choose \"credit\" for a credit\n    }\n    line_item = client.create_line_item(account_id, line_item_create)\n    print(\"Created LineItem %s\" % line_item)\nexcept recurly.errors.ValidationError as e:\n    # If the request was invalid, you may want to tell your user\n    # why. You can find the invalid params and reasons in e.error.params\n    print(\"ValidationError: %s\" % e.error.message)\n    print(e.error.params)\n"
          },
          {
            "lang": ".NET",
            "source": "try\n{\n    // creates a pending charge or credit on the account\n    var lineItemReq = new LineItemCreate()\n    {\n        Currency = \"USD\",\n        UnitAmount = 1000,\n        Type = \"charge\" // choose \"credit\" for a credit\n    };\n    LineItem lineItem = client.CreateLineItem(accountId, lineItemReq);\n    Console.WriteLine($\"Created line item {lineItem.Uuid}\");\n}\ncatch (Recurly.Errors.Validation ex)\n{\n    // If the request was not valid, you may want to tell your user\n    // why. You can find the invalid params and reasons in ex.Error.Params\n    Console.WriteLine($\"Failed validation: {ex.Error.Message}\");\n}\ncatch (Recurly.Errors.ApiError ex)\n{\n    // Use ApiError to catch a generic error from the API\n    Console.WriteLine($\"Unexpected Recurly Error: {ex.Error.Message}\");\n}\n"
          },
          {
            "lang": "Ruby",
            "source": "begin\n  line_item_create = {\n    currency: 'USD',\n    unit_amount: 1_000,\n    type: :charge\n  }\n  line_item = @client.create_line_item(\n    account_id: account_id,\n    body: line_item_create\n  )\n  puts \"Created LineItem #{line_item}\"\nrescue Recurly::Errors::ValidationError => e\n  # If the request was invalid, you may want to tell your user\n  # why. You can find the invalid params and reasons in e.recurly_error.params\n  puts \"ValidationError: #{e.recurly_error.params}\"\nend\n"
          },
          {
            "lang": "Java",
            "source": "try {\n    LineItemCreate lineItemCreate = new LineItemCreate();\n    lineItemCreate.setCurrency(\"USD\");\n    lineItemCreate.setUnitAmount(1000.0f);\n    lineItemCreate.setType(\"charge\"); // choose \"credit\" for a credit\n\n    LineItem lineItem = client.createLineItem(accountId, lineItemCreate);\n    System.out.println(\"Created line item \" + lineItem.getUuid());\n} catch (ValidationException e) {\n    // If the request was not valid, you may want to tell your user\n    // why. You can find the invalid params and reasons in e.getError().getParams()\n    System.out.println(\"Failed validation: \" + e.getError().getMessage());\n} catch (ApiException e) {\n    // Use ApiException to catch a generic error from the API\n    System.out.println(\"Unexpected Recurly Error: \" + e.getError().getMessage());\n}\n"
          },
          {
            "lang": "PHP",
            "source": "try {\n    $line_item_create = [\n        'currency' => 'USD',\n        'unit_amount' => 1000,\n        'type' => 'charge'\n    ];\n    $line_item = $client->createLineItem(\n        $account->getId(),\n        $line_item_create\n    );\n    echo 'Created Line Item:' . PHP_EOL;\n    var_dump($line_item);\n} catch (\\Recurly\\Errors\\Validation $e) {\n    // If the request was not valid, you may want to tell your user\n    // why. You can find the invalid params and reasons in err.params\n    var_dump($e);\n} catch (\\Recurly\\RecurlyError $e) {\n    // If we don't know what to do with the err, we should\n    // probably re-raise and let our web framework and logger handle it\n    var_dump($e);\n}"
          },
          {
            "lang": "Go",
            "source": "lineItemReq := &recurly.LineItemCreate{\n\tCurrency:   recurly.String(\"USD\"),\n\tUnitAmount: recurly.Float(1000),\n\tType:       recurly.String(\"charge\"),\n}\n\nlineItem, err := client.CreateLineItem(accountID, lineItemReq)\nif e, ok := err.(*recurly.Error); ok {\n\tif e.Type == recurly.ErrorTypeValidation {\n\t\tfmt.Printf(\"Failed validation: %v\", e)\n\t\treturn nil, err\n\t}\n\tfmt.Printf(\"Unexpected Recurly error: %v\", e)\n\treturn nil, err\n}\nfmt.Printf(\"Created Line Item: %v\", lineItem)"
          }
        ]
      }
    },
    "/sites/{site_id}/accounts/{account_id}/notes": {
      "get": {
        "tags": [
          "account",
          "note"
        ],
        "summary": "Fetch a list of an account's notes",
        "operationId": "list_account_notes",
        "parameters": [
          {
            "name": "site_id",
            "in": "path",
            "description": "Site ID or subdomain. For ID no prefix is used e.g. `e28zov4fw0v2`. For subdomain use prefix `subdomain-`, e.g. `subdomain-recurly`.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "account_id",
            "in": "path",
            "description": "Account ID or code. For ID no prefix is used e.g. `e28zov4fw0v2`. For code use prefix `code-`, e.g. `code-bob`.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ids",
            "in": "query",
            "description": "Filter results by their IDs. Up to 200 IDs can be passed at once using\ncommas as separators, e.g. `ids=h1at4d57xlmy,gyqgg0d3v9n1,jrsm5b4yefg6`.\n\n**Important notes:**\n\n* The `ids` parameter cannot be used with any other ordering or filtering\n  parameters (`limit`, `order`, `sort`, `begin_time`, `end_time`, etc)\n* Invalid or unknown IDs will be ignored, so you should check that the\n  results correspond to your request.\n* Records are returned in an arbitrary order. Since results are all\n  returned at once you can sort the records yourself.\n",
            "required": false,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of an account's notes.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountNoteList"
                }
              }
            }
          },
          "404": {
            "description": "Incorrect site or account ID.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "Node.js",
            "source": "const notes = client.listAccountNotes(accountId, { limit: 200 })\n\nfor await (const note of notes.each()) {\n  console.log(note.message)\n}\n"
          },
          {
            "lang": "Python",
            "source": "line_items = client.list_account_line_items(account_id, limit=200).items()\nfor line_item in line_items:\n    print(line_item.id)\n"
          },
          {
            "lang": ".NET",
            "source": "var notes = client.ListAccountNotes(accountId);\nforeach(AccountNote note in notes)\n{\n    Console.WriteLine(note.Message);\n}\n"
          },
          {
            "lang": "Ruby",
            "source": "account_notes = @client.list_account_notes(account_id: account_id, limit: 200)\naccount_notes.each do |note|\n  puts \"AccountNote: #{note.message}\"\nend\n"
          },
          {
            "lang": "Java",
            "source": "QueryParams params = new QueryParams();\nparams.setLimit(200); // Pull 200 records at a time\nfinal Pager<AccountNote> notes = client.listAccountNotes(accountId, params);\n\nfor (AccountNote note : notes) {\n    System.out.println(note.getMessage());\n}\n"
          },
          {
            "lang": "PHP",
            "source": "$params = ['limit' => 200];\n$account_notes = $client->listAccountNotes($account_id, $params);\n\nforeach($account_notes as $note) {\n  echo 'Account note: ' . $note->getMessage() . PHP_EOL;\n}\n"
          },
          {
            "lang": "Go",
            "source": "listParams := &recurly.ListAccountNotesParams{}\naccountNotes := client.ListAccountNotes(accountID, listParams)\n\nfor accountNotes.HasMore {\n\terr := accountNotes.Fetch()\n\tif e, ok := err.(*recurly.Error); ok {\n\t\tfmt.Printf(\"Failed to retrieve next page: %v\", e)\n\t\tbreak\n\t}\n\tfor i, note := range accountNotes.Data {\n\t\tfmt.Printf(\"Account Note %3d: %s\\n\",\n\t\t\ti,\n\t\t\tnote.Id,\n\t\t)\n\t}\n}"
          }
        ]
      }
    },
    "/sites/{site_id}/accounts/{account_id}/notes/{account_note_id}": {
      "get": {
        "tags": [
          "account",
          "note"
        ],
        "summary": "Fetch an account note",
        "operationId": "get_account_note",
        "parameters": [
          {
            "name": "site_id",
            "in": "path",
            "description": "Site ID or subdomain. For ID no prefix is used e.g. `e28zov4fw0v2`. For subdomain use prefix `subdomain-`, e.g. `subdomain-recurly`.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "account_id",
            "in": "path",
            "description": "Account ID or code. For ID no prefix is used e.g. `e28zov4fw0v2`. For code use prefix `code-`, e.g. `code-bob`.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "account_note_id",
            "in": "path",
            "description": "Account Note ID.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An account note.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountNote"
                }
              }
            }
          },
          "404": {
            "description": "Incorrect site, account or note ID.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "Node.js",
            "source": "try {\n  console.log(accountId)\n  const note = await client.getAccountNote(accountId, accountNoteId)\n  console.log('Fetched account note: ', note.message)\n} catch (err) {\n  if (err instanceof recurly.errors.NotFoundError) {\n    // If the request was not found, you may want to alert the user or\n    // just return null\n    console.log('Resource Not Found')\n  } else {\n    // If we don't know what to do with the err, we should\n    // probably re-raise and let our web framework and logger handle it\n    console.log('Unknown Error: ', err)\n  }\n}\n"
          },
          {
            "lang": "Python",
            "source": "try:\n    note = client.get_account_note(account_id, note_id)\n    print(\"Got AccountNote %s\" % note)\nexcept recurly.errors.NotFoundError:\n    # If the resource was not found, you may want to alert the user or\n    # just return nil\n    print(\"Resource Not Found\")\n"
          },
          {
            "lang": ".NET",
            "source": "try\n{\n    AccountNote note = client.GetAccountNote(accountId, accountNoteId);\n    Console.WriteLine($\"Fetched account note: {note.Message}\");\n}\ncatch (Recurly.Errors.NotFound ex)\n{\n    // If the resource was not found\n    // we may want to alert the user or just return null\n    Console.WriteLine($\"Resource Not Found: {ex.Error.Message}\");\n}\ncatch (Recurly.Errors.ApiError ex)\n{\n    // Use ApiError to catch a generic error from the API\n    Console.WriteLine($\"Unexpected Recurly Error: {ex.Error.Message}\");\n}\n"
          },
          {
            "lang": "Ruby",
            "source": "begin\n  note = @client.get_account_note(\n    account_id: account_id,\n    account_note_id: note_id\n  )\n  puts \"Got AccountNote #{note}\"\nrescue Recurly::Errors::NotFoundError\n  # If the resource was not found, you may want to alert the user or\n  # just return nil\n  puts \"Resource Not Found\"\nend\n"
          },
          {
            "lang": "Java",
            "source": "try {\n    final AccountNote note = client.getAccountNote(accountId, accountNoteId);\n    System.out.println(\"Fetched account note: \" + note.getMessage());\n} catch (NotFoundException e) {\n    // If the resource was not found\n    // we may want to alert the user or just return null\n    System.out.println(\"Resource Not Found: \" + e.getError().getMessage());\n} catch (ApiException e) {\n    // Use ApiException to catch a generic error from the API\n    System.out.println(\"Unexpected Recurly Error: \" + e.getError().getMessage());\n}\n"
          },
          {
            "lang": "PHP",
            "source": "try {\n    $note = $client->getAccountNote($account_id, $account_node_id);\n\n    echo 'Got Account Note:' . PHP_EOL;\n    var_dump($note);\n} catch (\\Recurly\\Errors\\NotFound $e) {\n    // Could not find the resource, you may want to inform the user\n    // or just return a NULL\n    echo 'Could not find resource.' . PHP_EOL;\n    var_dump($e);\n} catch (\\Recurly\\RecurlyError $e) {\n    // Something bad happened... tell the user so that they can fix it?\n    echo 'Some unexpected Recurly error happened. Try again later.' . PHP_EOL;\n}\n"
          },
          {
            "lang": "Go",
            "source": "accountNote, err := client.GetAccountNote(accountID, accountNoteID)\nif e, ok := err.(*recurly.Error); ok {\n\tif e.Type == recurly.ErrorTypeNotFound {\n\t\tfmt.Printf(\"Resource not found: %v\", e)\n\t\treturn nil, err\n\t}\n\tfmt.Printf(\"Unexpected Recurly error: %v\", e)\n\treturn nil, err\n}\nfmt.Printf(\"Fetched Account Note: %v\", accountNote)"
          }
        ]
      }
    },
    "/sites/{site_id}/accounts/{account_id}/shipping_addresses": {
      "get": {
        "tags": [
          "account",
          "shipping_address"
        ],
        "summary": "Fetch a list of an account's shipping addresses",
        "operationId": "list_shipping_addresses",
        "parameters": [
          {
            "name": "site_id",
            "in": "path",
            "description": "Site ID or subdomain. For ID no prefix is used e.g. `e28zov4fw0v2`. For subdomain use prefix `subdomain-`, e.g. `subdomain-recurly`.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "account_id",
            "in": "path",
            "description": "Account ID or code. For ID no prefix is used e.g. `e28zov4fw0v2`. For code use prefix `code-`, e.g. `code-bob`.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ids",
            "in": "query",
            "description": "Filter results by their IDs. Up to 200 IDs can be passed at once using\ncommas as separators, e.g. `ids=h1at4d57xlmy,gyqgg0d3v9n1,jrsm5b4yefg6`.\n\n**Important notes:**\n\n* The `ids` parameter cannot be used with any other ordering or filtering\n  parameters (`limit`, `order`, `sort`, `begin_time`, `end_time`, etc)\n* Invalid or unknown IDs will be ignored, so you should check that the\n  results correspond to your request.\n* Records are returned in an arbitrary order. Since results are all\n  returned at once you can sort the records yourself.\n",
            "required": false,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit number of records 1-200.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maximum": 200,
              "minimum": 1,
              "type": "integer",
              "default": 20
            }
          },
          {
            "name": "order",
            "in": "query",
            "description": "Sort order.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "default": "desc",
              "enum": [
                "asc",
                "desc"
              ]
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort field. You *really* only want to sort by `updated_at` in ascending\norder. In descending order updated records will move behind the cursor and could\nprevent some records from being returned.\n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "default": "created_at",
              "enum": [
                "created_at",
                "updated_at"
              ]
            }
          },
          {
            "name": "begin_time",
            "in": "query",
            "description": "Filter by begin_time when `sort=created_at` or `sort=updated_at`.\n**Note:** this value is an ISO8601 timestamp. A partial timestamp that does not include a time zone will default to UTC.\n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "end_time",
            "in": "query",
            "description": "Filter by end_time when `sort=created_at` or `sort=updated_at`.\n**Note:** this value is an ISO8601 timestamp. A partial timestamp that does not include a time zone will default to UTC.\n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of an account's shipping addresses.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ShippingAddressList"
                }
              }
            }
          },
          "404": {
            "description": "Incorrect site or account ID.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "Node.js",
            "source": "const addresses = client.listShippingAddresses(accountId, { limit: 200 })\n\nfor await (const address of addresses.each()) {\n  console.log(address.street1)\n}\n"
          },
          {
            "lang": "Python",
            "source": "shipping_addresses = client.list_shipping_addresses(account_id).items()\nfor shipping_address in shipping_addresses:\n    print(shipping_address.id)\n"
          },
          {
            "lang": ".NET",
            "source": "var addresses = client.ListShippingAddresses(accountId);\nforeach(ShippingAddress address in addresses)\n{\n    Console.WriteLine(address.Street1);\n}\n"
          },
          {
            "lang": "Ruby",
            "source": "shipping_addresses = @client.list_shipping_addresses(\n  account_id: account_id,\n  limit: 200\n)\nshipping_addresses.each do |addr|\n  puts \"ShippingAddress: #{addr.nickname} - #{addr.street1}\"\nend\n"
          },
          {
            "lang": "Java",
            "source": "QueryParams params = new QueryParams();\nparams.setLimit(200); // Pull 200 records at a time\nfinal Pager<ShippingAddress> addresses = client.listShippingAddresses(accountId, params);\n\nfor (ShippingAddress address : addresses) {\n    System.out.println(address.getStreet1());\n}\n"
          },
          {
            "lang": "PHP",
            "source": "$params = ['limit' => 200];\n$shippingAddresses = $client->listShippingAddresses($account_id, $params);\n\nforeach($shippingAddresses as $address) {\n  echo 'Shipping Address: ' . $address->getId() . PHP_EOL;\n}\n"
          },
          {
            "lang": "Go",
            "source": "listParams := &recurly.ListShippingAddressesParams{\n\tSort:  recurly.String(\"created_at\"),\n\tOrder: recurly.String(\"desc\"),\n\tLimit: recurly.Int(200),\n}\nshippingAddresses := client.ListShippingAddresses(accountID, listParams)\n\nfor shippingAddresses.HasMore {\n\terr := shippingAddresses.Fetch()\n\tif e, ok := err.(*recurly.Error); ok {\n\t\tfmt.Printf(\"Failed to retrieve next page: %v\", e)\n\t\tbreak\n\t}\n\tfor i, shippingAddress := range shippingAddresses.Data {\n\t\tfmt.Printf(\"Shipping Address %3d: %s, %s\\n\",\n\t\t\ti,\n\t\t\tshippingAddress.Id,\n\t\t\tshippingAddress.Street1,\n\t\t)\n\t}\n}"
          }
        ]
      },
      "post": {
        "tags": [
          "account",
          "shipping_address"
        ],
        "summary": "Create a new shipping address for the account",
        "operationId": "create_shipping_address",
        "parameters": [
          {
            "name": "site_id",
            "in": "path",
            "description": "Site ID or subdomain. For ID no prefix is used e.g. `e28zov4fw0v2`. For subdomain use prefix `subdomain-`, e.g. `subdomain-recurly`.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "account_id",
            "in": "path",
            "description": "Account ID or code. For ID no prefix is used e.g. `e28zov4fw0v2`. For code use prefix `code-`, e.g. `code-bob`.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ShippingAddressCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Returns the new shipping address.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ShippingAddress"
                }
              }
            }
          },
          "400": {
            "description": "Bad request; perhaps missing or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Incorrect site or account ID.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "422": {
            "description": "A validation error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "Node.js",
            "source": "try {\n  const shippingAddressCreate = {\n    firstName: 'Aaron',\n    lastName: 'Du Monde',\n    street1: '900 Camp St.',\n    city: 'New Orleans',\n    region: 'LA',\n    postalCode: '70115',\n    country: 'US'\n  }\n  const address = await client.createShippingAddress(accountId, shippingAddressCreate)\n  console.log('Created shipping address: ', address.street1)\n} catch (err) {\n  if (err instanceof recurly.errors.ValidationError) {\n    // If the request was not valid, you may want to tell your user\n    // why. You can find the invalid params and reasons in err.params\n    console.log('Failed validation', err.params)\n  } else {\n    // If we don't know what to do with the err, we should\n    // probably re-raise and let our web framework and logger handle it\n    console.log('Unknown Error: ', err)\n  }\n}\n"
          },
          {
            "lang": "Python",
            "source": "try:\n    shipping_addr_create = {\n        \"first_name\": \"Aaron\",\n        \"last_name\": \"Du Monde\",\n        \"street1\": \"900 Camp St.\",\n        \"city\": \"New Orleans\",\n        \"postal_code\": \"70115\",\n        \"country\": \"US\",\n    }\n    shad = client.create_shipping_address(account_id, shipping_addr_create)\n    print(\"Created ShippingAddress %s\" % shad)\nexcept recurly.errors.ValidationError as e:\n    # If the request was invalid, you may want to tell your user\n    # why. You can find the invalid params and reasons in e.error.params\n    print(\"ValidationError: %s\" % e.error.message)\n    print(e.error.params)\n"
          },
          {
            "lang": ".NET",
            "source": "try\n{\n    var addrReq = new ShippingAddressCreate()\n    {\n        FirstName = \"Benjamin\",\n        LastName = \"Du Monde\",\n        Street1 = \"900 Camp St.\",\n        City = \"New Orleans\",\n        Region = \"LA\",\n        PostalCode = \"70115\",\n        Country = \"US\",\n    };\n    ShippingAddress address = client.CreateShippingAddress(accountId, addrReq);\n    Console.WriteLine($\"Created shipping address {address.Street1}\");\n}\ncatch (Recurly.Errors.Validation ex)\n{\n    // If the request was not valid, you may want to tell your user\n    // why. You can find the invalid params and reasons in ex.Error.Params\n    Console.WriteLine($\"Failed validation: {ex.Error.Message}\");\n}\ncatch (Recurly.Errors.ApiError ex)\n{\n    // Use ApiError to catch a generic error from the API\n    Console.WriteLine($\"Unexpected Recurly Error: {ex.Error.Message}\");\n}\n"
          },
          {
            "lang": "Ruby",
            "source": "begin\n  shipping_address_create = {\n    nickname: 'Work',\n    street1: '900 Camp St',\n    city: 'New Orleans',\n    region: 'LA',\n    country: 'US',\n    postal_code: '70115',\n    first_name: 'Joanna',\n    last_name: 'Du Monde'\n  }\n  shipping_address = @client.create_shipping_address(account_id: account_id, body: shipping_address_create)\n  puts \"Created Shipping Address #{shipping_address}\"\nrescue Recurly::Errors::NotFoundError\n  # If the resource was not found, you may want to alert the user or\n  # just return nil\n  puts \"Resource Not Found\"\nend\n"
          },
          {
            "lang": "Java",
            "source": "try {\n    ShippingAddressCreate shippingAddressCreate = new ShippingAddressCreate();\n    shippingAddressCreate.setFirstName(\"Aaron\");\n    shippingAddressCreate.setLastName(\"Du Monde\");\n    shippingAddressCreate.setStreet1(\"900 Camp St\");\n    shippingAddressCreate.setCity(\"New Orleans\");\n    shippingAddressCreate.setRegion(\"LA\");\n    shippingAddressCreate.setPostalCode(\"70115\");\n    shippingAddressCreate.setCountry(\"US\");\n\n    ShippingAddress shippingAddress = client.createShippingAddress(accountId, shippingAddressCreate);\n    System.out.println(\"Created shipping address \" + shippingAddress.getStreet1());\n} catch (ValidationException e) {\n    // If the request was not valid, you may want to tell your user\n    // why. You can find the invalid params and reasons in e.getError().getParams()\n    System.out.println(\"Failed validation: \" + e.getError().getMessage());\n} catch (ApiException e) {\n    // Use ApiException to catch a generic error from the API\n    System.out.println(\"Unexpected Recurly Error: \" + e.getError().getMessage());\n}\n"
          },
          {
            "lang": "PHP",
            "source": "try {\n    $address_create = array(\n        \"nickname\" => \"Work\",\n        \"street1\" => \"900 Camp St\",\n        \"city\" => \"New Orleans\",\n        \"region\" => \"LA\",\n        \"country\" => \"US\",\n        \"postal_code\" => \"70115\",\n        \"first_name\" => \"Douglas\",\n        \"last_name\" => \"Du Monde\"\n    );\n    $shipping_address = $client->createShippingAddress($account_id, $address_create);\n\n    echo \"Created Shpping Address:\" . PHP_EOL;\n    var_dump($shipping_address);\n} catch (\\Recurly\\Errors\\Validation $e) {\n    // If the request was not valid, you may want to tell your user\n    // why. You can find the invalid params and reasons in err.params\n    var_dump($e);\n} catch (\\Recurly\\RecurlyError $e) {\n    // If we don\"t know what to do with the err, we should\n    // probably re-raise and let our web framework and logger handle it\n    var_dump($e);\n}\n"
          },
          {
            "lang": "Go",
            "source": "shippingReq := &recurly.ShippingAddressCreate{\n\tNickname:   recurly.String(\"Home\"),\n\tStreet1:    recurly.String(\"1 Tchoupitoulas St\"),\n\tCity:       recurly.String(\"New Orleans\"),\n\tRegion:     recurly.String(\"LA\"),\n\tCountry:    recurly.String(\"US\"),\n\tPostalCode: recurly.String(\"70115\"),\n\tFirstName:  recurly.String(\"Aaron\"),\n\tLastName:   recurly.String(\"Du Monde\"),\n}\n\nshippingAddress, err := client.CreateShippingAddress(accountID, shippingReq)\nif e, ok := err.(*recurly.Error); ok {\n\tif e.Type == recurly.ErrorTypeValidation {\n\t\tfmt.Printf(\"Failed validation: %v\", e)\n\t\treturn nil, err\n\t}\n\tfmt.Printf(\"Unexpected Recurly error: %v\", e)\n\treturn nil, err\n}\nfmt.Printf(\"Created Shipping Address: %v\", shippingAddress.Id)"
          }
        ]
      }
    },
    "/sites/{site_id}/accounts/{account_id}/shipping_addresses/{shipping_address_id}": {
      "get": {
        "tags": [
          "account",
          "shipping_address"
        ],
        "summary": "Fetch an account's shipping address",
        "operationId": "get_shipping_address",
        "parameters": [
          {
            "name": "site_id",
            "in": "path",
            "description": "Site ID or subdomain. For ID no prefix is used e.g. `e28zov4fw0v2`. For subdomain use prefix `subdomain-`, e.g. `subdomain-recurly`.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "account_id",
            "in": "path",
            "description": "Account ID or code. For ID no prefix is used e.g. `e28zov4fw0v2`. For code use prefix `code-`, e.g. `code-bob`.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "shipping_address_id",
            "in": "path",
            "description": "Shipping Address ID.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A shipping address.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ShippingAddress"
                }
              }
            }
          },
          "404": {
            "description": "Incorrect site, account, or shipping address ID.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "Node.js",
            "source": "try {\n  const address = await client.getShippingAddress(accountId, shippingAddressId)\n  console.log('Fetched shipping address: ', address.street1)\n} catch (err) {\n  if (err instanceof recurly.errors.NotFoundError) {\n    // If the request was not found, you may want to alert the user or\n    // just return null\n    console.log('Resource Not Found')\n  } else {\n    // If we don't know what to do with the err, we should\n    // probably re-raise and let our web framework and logger handle it\n    console.log('Unknown Error: ', err)\n  }\n}\n"
          },
          {
            "lang": "Python",
            "source": "try:\n    client.get_shipping_address(account_id, shipping_address_id)\n    print(\"Got ShippingAddress %s\" % shipping_address_id)\nexcept recurly.errors.NotFoundError:\n    # If the resource was not found, you may want to alert the user or\n    # just return nil\n    print(\"Resource Not Found\")\n"
          },
          {
            "lang": ".NET",
            "source": "try\n{\n    ShippingAddress address = client.GetShippingAddress(accountId, shippingAddressId);\n    Console.WriteLine($\"Fetched shipping address {address.Id}\");\n}\ncatch (Recurly.Errors.NotFound ex)\n{\n    // If the resource was not found\n    // we may want to alert the user or just return null\n    Console.WriteLine($\"Resource Not Found: {ex.Error.Message}\");\n}\ncatch (Recurly.Errors.ApiError ex)\n{\n    // Use ApiError to catch a generic error from the API\n    Console.WriteLine($\"Unexpected Recurly Error: {ex.Error.Message}\");\n}\n"
          },
          {
            "lang": "Ruby",
            "source": "begin\n  address = @client.get_shipping_address(\n    account_id: account_id,\n    shipping_address_id: shipping_address_id\n  )\n  puts \"Got ShippingAddress #{address}\"\nrescue Recurly::Errors::NotFoundError\n  # If the resource was not found, you may want to alert the user or\n  # just return nil\n  puts \"Resource Not Found\"\nend\n"
          },
          {
            "lang": "Java",
            "source": "try {\n    final ShippingAddress address = client.getShippingAddress(accountId, shippingAddressId);\n    System.out.println(\"Fetched shipping address \" + address.getId());\n} catch (NotFoundException e) {\n    // If the resource was not found\n    // we may want to alert the user or just return null\n    System.out.println(\"Resource Not Found: \" + e.getError().getMessage());\n} catch (ApiException e) {\n    // Use ApiException to catch a generic error from the API\n    System.out.println(\"Unexpected Recurly Error: \" + e.getError().getMessage());\n}\n"
          },
          {
            "lang": "PHP",
            "source": "try {\n    $shipping_address = $client->getShippingAddress($account_id, $shipping_address_id);\n\n    echo 'Got Shipping Address:' . PHP_EOL;\n    var_dump($shipping_address);\n} catch (\\Recurly\\Errors\\NotFound $e) {\n    // Could not find the resource, you may want to inform the user\n    // or just return a NULL\n    echo 'Could not find resource.' . PHP_EOL;\n    var_dump($e);\n} catch (\\Recurly\\RecurlyError $e) {\n    // Something bad happened... tell the user so that they can fix it?\n    echo 'Some unexpected Recurly error happened. Try again later.' . PHP_EOL;\n}\n"
          },
          {
            "lang": "Go",
            "source": "shippingAddress, err := client.GetShippingAddress(accountID, shippingAddressID)\nif e, ok := err.(*recurly.Error); ok {\n\tif e.Type == recurly.ErrorTypeNotFound {\n\t\tfmt.Printf(\"Resource not found: %v\", e)\n\t\treturn nil, err\n\t}\n\tfmt.Printf(\"Unexpected Recurly error: %v\", e)\n\treturn nil, err\n}\nfmt.Printf(\"Fetched Shipping Address: %v\", shippingAddress)"
          }
        ]
      },
      "put": {
        "tags": [
          "account",
          "shipping_address"
        ],
        "summary": "Update an account's shipping address",
        "operationId": "update_shipping_address",
        "parameters": [
          {
            "name": "site_id",
            "in": "path",
            "description": "Site ID or subdomain. For ID no prefix is used e.g. `e28zov4fw0v2`. For subdomain use prefix `subdomain-`, e.g. `subdomain-recurly`.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "account_id",
            "in": "path",
            "description": "Account ID or code. For ID no prefix is used e.g. `e28zov4fw0v2`. For code use prefix `code-`, e.g. `code-bob`.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "shipping_address_id",
            "in": "path",
            "description": "Shipping Address ID.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ShippingAddressUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The updated shipping address.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ShippingAddress"
                }
              }
            }
          },
          "400": {
            "description": "Bad request, perhaps invalid JSON?",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Incorrect site, account, or shipping address ID.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "422": {
            "description": "Invalid request parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "Node.js",
            "source": "try {\n  const shadUpdate = {\n    firstName: \"Benjamin\",\n    lastName: \"Du Monde\"\n  }\n  const address = await client.updateShippingAddress(accountId, shippingAddressId, shadUpdate)\n  console.log('Updated shipping address: ', address.street1)\n} catch (err) {\n  if (err instanceof recurly.errors.ValidationError) {\n    // If the request was not valid, you may want to tell your user\n    // why. You can find the invalid params and reasons in err.params\n    console.log('Failed validation', err.params)\n  } else {\n    // If we don't know what to do with the err, we should\n    // probably re-raise and let our web framework and logger handle it\n    console.log('Unknown Error: ', err)\n  }\n}\n"
          },
          {
            "lang": "Python",
            "source": "try:\n    address_update = {\n        \"first_name\": \"Aaron\",\n        \"last_name\": \"Du Monde\",\n        \"postal_code\": \"70130\",\n    }\n    address = client.update_shipping_address(\n        account_id, shipping_address_id, address_update\n    )\n    print(\"Updated ShippingAddress %s\" % address)\nexcept recurly.errors.ValidationError as e:\n    # If the request was invalid, you may want to tell your user\n    # why. You can find the invalid params and reasons in e.error.params\n    print(\"ValidationError: %s\" % e.error.message)\n    print(e.error.params)\n"
          },
          {
            "lang": ".NET",
            "source": "try\n{\n    var shadReq = new ShippingAddressUpdate()\n    {\n        FirstName = \"Aaron\",\n        LastName = \"Du Monde\"\n    };\n    ShippingAddress address = client.UpdateShippingAddress(accountId, shippingAddressId, shadReq);\n    Console.WriteLine($\"Updated shipping address {address.Street1}\");\n}\ncatch (Recurly.Errors.Validation ex)\n{\n    // If the request was not valid, you may want to tell your user\n    // why. You can find the invalid params and reasons in ex.Error.Params\n    Console.WriteLine($\"Failed validation: {ex.Error.Message}\");\n}\ncatch (Recurly.Errors.ApiError ex)\n{\n    // Use ApiError to catch a generic error from the API\n    Console.WriteLine($\"Unexpected Recurly Error: {ex.Error.Message}\");\n}\n"
          },
          {
            "lang": "Ruby",
            "source": "begin\n  address_update = {\n    first_name: \"Aaron\",\n    last_name: \"Du Monde\",\n    postal_code: \"70130\"\n  }\n  address = @client.update_shipping_address(\n    account_id: account_id,\n    shipping_address_id: shipping_address_id,\n    body: address_update\n  )\n  puts \"Updated ShippingAddress #{address}\"\nrescue Recurly::Errors::ValidationError => e\n  # If the request was invalid, you may want to tell your user\n  # why. You can find the invalid params and reasons in e.recurly_error.params\n  puts \"ValidationError: #{e.recurly_error.params}\"\nend\n"
          },
          {
            "lang": "Java",
            "source": "try {\n    final ShippingAddressUpdate shadUpdate = new ShippingAddressUpdate();\n    shadUpdate.setFirstName(\"Aaron\");\n    shadUpdate.setLastName(\"Du Monde\");\n\n    final ShippingAddress address = client.updateShippingAddress(accountId, shippingAddressId, shadUpdate);\n    System.out.println(\"Updated shipping address \" + address.getStreet1());\n} catch (ValidationException e) {\n    // If the request was not valid, you may want to tell your user\n    // why. You can find the invalid params and reasons in e.getError().getParams()\n    System.out.println(\"Failed validation: \" + e.getError().getMessage());\n} catch (ApiException e) {\n    // Use ApiException to catch a generic error from the API\n    System.out.println(\"Unexpected Recurly Error: \" + e.getError().getMessage());\n}\n"
          },
          {
            "lang": "PHP",
            "source": "try {\n    $shad_update = array(\n        \"first_name\" => \"Douglas\",\n        \"last_name\" => \"Du Monde\",\n    );\n    $shad = $client->updateShippingAddress($account_id, $shipping_address_id, $shad_update);\n\n    echo 'Updated Shipping Address:' . PHP_EOL;\n    var_dump($shad);\n} catch (\\Recurly\\Errors\\Validation $e) {\n    // If the request was not valid, you may want to tell your user\n    // why. You can find the invalid params and reasons in err.params\n    var_dump($e);\n} catch (\\Recurly\\RecurlyError $e) {\n    // If we don't know what to do with the err, we should\n    // probably re-raise and let our web framework and logger handle it\n    var_dump($e);\n}\n"
          },
          {
            "lang": "Go",
            "source": "updateReq := &recurly.ShippingAddressUpdate{\n\tFirstName: recurly.String(\"Joanna\"),\n\tLastName:  recurly.String(\"DuMonde\"),\n}\nshippingAddress, err := client.UpdateShippingAddress(accountID, shippingAddressID, updateReq)\nif e, ok := err.(*recurly.Error); ok {\n\tif e.Type == recurly.ErrorTypeNotFound {\n\t\tfmt.Printf(\"Resource not found: %v\", e)\n\t\treturn nil, err\n\t}\n\tfmt.Printf(\"Unexpected Recurly error: %v\", e)\n\treturn nil, err\n}\nfmt.Printf(\"Updated Shipping Address: %v\", shippingAddress)"
          }
        ]
      },
      "delete": {
        "tags": [
          "account",
          "shipping_address"
        ],
        "summary": "Remove an account's shipping address",
        "operationId": "remove_shipping_address",
        "parameters": [
          {
            "name": "site_id",
            "in": "path",
            "description": "Site ID or subdomain. For ID no prefix is used e.g. `e28zov4fw0v2`. For subdomain use prefix `subdomain-`, e.g. `subdomain-recurly`.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "account_id",
            "in": "path",
            "description": "Account ID or code. For ID no prefix is used e.g. `e28zov4fw0v2`. For code use prefix `code-`, e.g. `code-bob`.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "shipping_address_id",
            "in": "path",
            "description": "Shipping Address ID.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Shipping address deleted."
          },
          "404": {
            "description": "Incorrect site, account, or shipping address ID.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "Node.js",
            "source": "try {\n  await client.removeShippingAddress(accountId, shippingAddress.id)\n  console.log('Removed shipping address: ', shippingAddress.street1)\n} catch (err) {\n  if (err instanceof recurly.errors.NotFoundError) {\n    // If the request was not found, you may want to alert the user or\n    // just return null\n    console.log('Resource Not Found')\n  } else {\n    // If we don't know what to do with the err, we should\n    // probably re-raise and let our web framework and logger handle it\n    console.log('Unknown Error: ', err)\n  }\n}\n"
          },
          {
            "lang": "Python",
            "source": "try:\n    client.remove_shipping_address(account_id, shipping_address_id)\n    print(\"Removed ShippingAddress %s\" % shipping_address_id)\nexcept recurly.errors.NotFoundError:\n    # If the resource was not found, you may want to alert the user or\n    # just return nil\n    print(\"Resource Not Found\")\n"
          },
          {
            "lang": ".NET",
            "source": "try\n{\n    client.RemoveShippingAddress(accountId, shippingAddressId);\n    Console.WriteLine($\"Removed shipping address {shippingAddressId}\");\n}\ncatch (Recurly.Errors.Validation ex)\n{\n    // If the request was not valid, you may want to tell your user\n    // why. You can find the invalid params and reasons in ex.Error.Params\n    Console.WriteLine($\"Failed validation: {ex.Error.Message}\");\n}\ncatch (Recurly.Errors.ApiError ex)\n{\n    // Use ApiError to catch a generic error from the API\n    Console.WriteLine($\"Unexpected Recurly Error: {ex.Error.Message}\");\n}\n"
          },
          {
            "lang": "Ruby",
            "source": "begin\n  @client.remove_shipping_address(\n    account_id: account_id,\n    shipping_address_id: shipping_address_id\n  )\n  puts \"Removed ShippingAddress #{shipping_address_id}\"\nrescue Recurly::Errors::NotFoundError\n  # If the resource was not found, you may want to alert the user or\n  # just return nil\n  puts \"Resource Not Found\"\nend\n"
          },
          {
            "lang": "Java",
            "source": "try {\n    client.removeShippingAddress(accountId, shippingAddressId);\n    System.out.println(\"Removed shipping address \" + shippingAddressId);\n} catch (ValidationException e) {\n    // If the request was not valid, you may want to tell your user\n    // why. You can find the invalid params and reasons in e.getError().getParams()\n    System.out.println(\"Failed validation: \" + e.getError().getMessage());\n} catch (ApiException e) {\n    // Use ApiException to catch a generic error from the API\n    System.out.println(\"Unexpected Recurly Error: \" + e.getError().getMessage());\n}\n"
          },
          {
            "lang": "PHP",
            "source": "try {\n    $client->removeShippingAddress($account_id, $shipping_address_id);\n    echo \"Removed Shipping Address:\" . PHP_EOL;\n} catch (\\Recurly\\Errors\\Validation $e) {\n    // If the request was not valid, you may want to tell your user\n    // why. You can find the invalid params and reasons in err.params\n    var_dump($e);\n} catch (\\Recurly\\RecurlyError $e) {\n    // If we don't know what to do with the err, we should\n    // probably re-raise and let our web framework and logger handle it\n    var_dump($e);\n}"
          },
          {
            "lang": "Go",
            "source": "shippingAddress, err := client.RemoveShippingAddress(accountID, shippingAddressID)\nif e, ok := err.(*recurly.Error); ok {\n\tif e.Type == recurly.ErrorTypeNotFound {\n\t\tfmt.Printf(\"Resource not found: %v\", e)\n\t\treturn nil, err\n\t}\n\tfmt.Printf(\"Unexpected Recurly error: %v\", e)\n\treturn nil, err\n}\n\nfmt.Printf(\"Removed Shipping Address: %v\", shippingAddress)"
          }
        ]
      }
    },
    "/sites/{site_id}/accounts/{account_id}/subscriptions": {
      "get": {
        "tags": [
          "subscription",
          "account"
        ],
        "summary": "List an account's subscriptions",
        "operationId": "list_account_subscriptions",
        "parameters": [
          {
            "name": "site_id",
            "in": "path",
            "description": "Site ID or subdomain. For ID no prefix is used e.g. `e28zov4fw0v2`. For subdomain use prefix `subdomain-`, e.g. `subdomain-recurly`.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "account_id",
            "in": "path",
            "description": "Account ID or code. For ID no prefix is used e.g. `e28zov4fw0v2`. For code use prefix `code-`, e.g. `code-bob`.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ids",
            "in": "query",
            "description": "Filter results by their IDs. Up to 200 IDs can be passed at once using\ncommas as separators, e.g. `ids=h1at4d57xlmy,gyqgg0d3v9n1,jrsm5b4yefg6`.\n\n**Important notes:**\n\n* The `ids` parameter cannot be used with any other ordering or filtering\n  parameters (`limit`, `order`, `sort`, `begin_time`, `end_time`, etc)\n* Invalid or unknown IDs will be ignored, so you should check that the\n  results correspond to your request.\n* Records are returned in an arbitrary order. Since results are all\n  returned at once you can sort the records yourself.\n",
            "required": false,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit number of records 1-200.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maximum": 200,
              "minimum": 1,
              "type": "integer",
              "default": 20
            }
          },
          {
            "name": "order",
            "in": "query",
            "description": "Sort order.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "default": "desc",
              "enum": [
                "asc",
                "desc"
              ]
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort field. You *really* only want to sort by `updated_at` in ascending\norder. In descending order updated records will move behind the cursor and could\nprevent some records from being returned.\n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "default": "created_at",
              "enum": [
                "created_at",
                "updated_at"
              ]
            }
          },
          {
            "name": "begin_time",
            "in": "query",
            "description": "Filter by begin_time when `sort=created_at` or `sort=updated_at`.\n**Note:** this value is an ISO8601 timestamp. A partial timestamp that does not include a time zone will default to UTC.\n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "end_time",
            "in": "query",
            "description": "Filter by end_time when `sort=created_at` or `sort=updated_at`.\n**Note:** this value is an ISO8601 timestamp. A partial timestamp that does not include a time zone will default to UTC.\n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "state",
            "in": "query",
            "description": "Filter by state.\n\n- When `state=active`, `state=canceled`, `state=expired`, or `state=future`, subscriptions with states that match the query and only those subscriptions will be returned.\n- When `state=in_trial`, only subscriptions that have a trial_started_at date earlier than now and a trial_ends_at date later than now will be returned.\n- When `state=live`, only subscriptions that are in an active, canceled, or future state or are in trial will be returned.\n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": [
                "active",
                "canceled",
                "expired",
                "future",
                "in_trial",
                "live"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of the account's subscriptions.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriptionList"
                }
              }
            }
          },
          "400": {
            "description": "Invalid or unpermitted parameter.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Incorrect site or account ID.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "Node.js",
            "source": "const subscriptions = client.listAccountSubscriptions(accountId, { limit: 200 })\n\nfor await (const subscription of subscriptions.each()) {\n  console.log(subscription.uuid)\n}\n"
          },
          {
            "lang": "Python",
            "source": "subscriptions = client.list_account_subscriptions(account.id, limit=200).items()\nfor subscription in subscriptions:\n    print(subscription.uuid)\n"
          },
          {
            "lang": ".NET",
            "source": "var subscriptions = client.ListAccountSubscriptions(accountId);\nforeach(Subscription subscription in subscriptions) {\n  Console.WriteLine(subscription.Id);\n}\n"
          },
          {
            "lang": "Ruby",
            "source": "subscriptions = @client.list_account_subscriptions(\n  account_id: account_id,\n  limit: 200\n)\nsubscriptions.each do |subscription|\n  puts \"Subscription: #{subscription.uuid}\"\nend\n"
          },
          {
            "lang": "Java",
            "source": "QueryParams params = new QueryParams();\nparams.setLimit(200); // Pull 200 records at a time\nfinal Pager<Subscription> subscriptions = client.listAccountSubscriptions(accountId, params);\n\nfor (Subscription subscription : subscriptions) {\n    System.out.println(subscription.getUuid());\n}\n"
          },
          {
            "lang": "PHP",
            "source": "$params = ['limit' => 200];\n$account_subscriptions = $client->listAccountSubscriptions($account_id, $params);\n\nforeach($account_subscriptions as $sub) {\n    echo 'Account subscription: ' . $sub->getUuid() . PHP_EOL;\n}\n"
          },
          {
            "lang": "Go",
            "source": "listParams := &recurly.ListAccountSubscriptionsParams{\n\tSort:  recurly.String(\"created_at\"),\n\tOrder: recurly.String(\"desc\"),\n\tLimit: recurly.Int(200),\n}\naccountSubscriptions := client.ListAccountSubscriptions(accountID, listParams)\n\nfor accountSubscriptions.HasMore {\n\terr := accountSubscriptions.Fetch()\n\tif e, ok := err.(*recurly.Error); ok {\n\t\tfmt.Printf(\"Failed to retrieve next page: %v\", e)\n\t\tbreak\n\t}\n\tfor i, sub := range accountSubscriptions.Data {\n\t\tfmt.Printf(\"Account Subscription %3d: %s\\n\",\n\t\t\ti,\n\t\t\tsub.Id,\n\t\t)\n\t}\n}"
          }
        ]
      }
    },
    "/sites/{site_id}/accounts/{account_id}/transactions": {
      "get": {
        "tags": [
          "account",
          "transaction"
        ],
        "summary": "List an account's transactions",
        "operationId": "list_account_transactions",
        "parameters": [
          {
            "name": "site_id",
            "in": "path",
            "description": "Site ID or subdomain. For ID no prefix is used e.g. `e28zov4fw0v2`. For subdomain use prefix `subdomain-`, e.g. `subdomain-recurly`.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "account_id",
            "in": "path",
            "description": "Account ID or code. For ID no prefix is used e.g. `e28zov4fw0v2`. For code use prefix `code-`, e.g. `code-bob`.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ids",
            "in": "query",
            "description": "Filter results by their IDs. Up to 200 IDs can be passed at once using\ncommas as separators, e.g. `ids=h1at4d57xlmy,gyqgg0d3v9n1,jrsm5b4yefg6`.\n\n**Important notes:**\n\n* The `ids` parameter cannot be used with any other ordering or filtering\n  parameters (`limit`, `order`, `sort`, `begin_time`, `end_time`, etc)\n* Invalid or unknown IDs will be ignored, so you should check that the\n  results correspond to your request.\n* Records are returned in an arbitrary order. Since results are all\n  returned at once you can sort the records yourself.\n",
            "required": false,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit number of records 1-200.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maximum": 200,
              "minimum": 1,
              "type": "integer",
              "default": 20
            }
          },
          {
            "name": "order",
            "in": "query",
            "description": "Sort order.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "default": "desc",
              "enum": [
                "asc",
                "desc"
              ]
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort field. You *really* only want to sort by `updated_at` in ascending\norder. In descending order updated records will move behind the cursor and could\nprevent some records from being returned.\n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "default": "created_at",
              "enum": [
                "created_at",
                "updated_at"
              ]
            }
          },
          {
            "name": "begin_time",
            "in": "query",
            "description": "Filter by begin_time when `sort=created_at` or `sort=updated_at`.\n**Note:** this value is an ISO8601 timestamp. A partial timestamp that does not include a time zone will default to UTC.\n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "end_time",
            "in": "query",
            "description": "Filter by end_time when `sort=created_at` or `sort=updated_at`.\n**Note:** this value is an ISO8601 timestamp. A partial timestamp that does not include a time zone will default to UTC.\n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Filter by type field. The value `payment` will return both `purchase` and `capture` transactions.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": [
                "verify",
                "authorization",
                "capture",
                "purchase",
                "refund",
                "payment"
              ]
            }
          },
          {
            "name": "success",
            "in": "query",
            "description": "Filter by success field.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": [
                "true"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of the account's transactions.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionList"
                }
              }
            }
          },
          "400": {
            "description": "Invalid or unpermitted parameter.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Incorrect site or subscription ID.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "Node.js",
            "source": "const transactions = client.listAccountTransactions(accountId, { limit: 200 })\n\nfor await (const transaction of transactions.each()) {\n  console.log(transaction.uuid)\n}\n"
          },
          {
            "lang": "Python",
            "source": "transactions = client.list_account_transactions(account_id, limit=200).items()\nfor transaction in transactions:\n    print(\"Transaction %s\" % transaction.id)\n"
          },
          {
            "lang": ".NET",
            "source": "var transactions = client.ListAccountTransactions(accountId);\nforeach(Transaction transaction in transactions)\n{\n    Console.WriteLine(transaction.Id);\n}\n"
          },
          {
            "lang": "Ruby",
            "source": "transactions = @client.list_account_transactions(\n  account_id: account_id,\n  limit: 200\n)\ntransactions.each do |transaction|\n  puts \"Transaction: #{transaction.uuid}\"\nend\n"
          },
          {
            "lang": "Java",
            "source": "QueryParams params = new QueryParams();\nparams.setLimit(200); // Pull 200 records at a time\nfinal Pager<Transaction> transactions = client.listAccountTransactions(accountId, params);\n\nfor (Transaction transaction : transactions) {\n    System.out.println(transaction.getUuid());\n}\n"
          },
          {
            "lang": "PHP",
            "source": "$params = ['limit' => 200];\n$account_transactions = $client->listAccountTransactions($account_id, $params);\n\nforeach($account_transactions as $transaction) {\n  echo 'Account transactions: ' . $transaction->getUuid() . PHP_EOL;\n}\n"
          },
          {
            "lang": "Go",
            "source": "listParams := &recurly.ListAccountTransactionsParams{\n\tSort:  recurly.String(\"created_at\"),\n\tOrder: recurly.String(\"desc\"),\n\tLimit: recurly.Int(200),\n}\naccountTransactions := client.ListAccountTransactions(accountID, listParams)\n\nfor accountTransactions.HasMore {\n\terr := accountTransactions.Fetch()\n\tif e, ok := err.(*recurly.Error); ok {\n\t\tfmt.Printf(\"Failed to retrieve next page: %v\", e)\n\t\tbreak\n\t}\n\tfor i, transaction := range accountTransactions.Data {\n\t\tfmt.Printf(\"Account Transaction %3d: %s\\n\",\n\t\t\ti,\n\t\t\ttransaction.Id,\n\t\t)\n\t}\n}"
          }
        ]
      }
    },
    "/sites/{site_id}/accounts/{account_id}/accounts": {
      "get": {
        "tags": [
          "account"
        ],
        "summary": "List an account's child accounts",
        "operationId": "list_child_accounts",
        "parameters": [
          {
            "name": "site_id",
            "in": "path",
            "description": "Site ID or subdomain. For ID no prefix is used e.g. `e28zov4fw0v2`. For subdomain use prefix `subdomain-`, e.g. `subdomain-recurly`.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "account_id",
            "in": "path",
            "description": "Account ID or code. For ID no prefix is used e.g. `e28zov4fw0v2`. For code use prefix `code-`, e.g. `code-bob`.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ids",
            "in": "query",
            "description": "Filter results by their IDs. Up to 200 IDs can be passed at once using\ncommas as separators, e.g. `ids=h1at4d57xlmy,gyqgg0d3v9n1,jrsm5b4yefg6`.\n\n**Important notes:**\n\n* The `ids` parameter cannot be used with any other ordering or filtering\n  parameters (`limit`, `order`, `sort`, `begin_time`, `end_time`, etc)\n* Invalid or unknown IDs will be ignored, so you should check that the\n  results correspond to your request.\n* Records are returned in an arbitrary order. Since results are all\n  returned at once you can sort the records yourself.\n",
            "required": false,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit number of records 1-200.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maximum": 200,
              "minimum": 1,
              "type": "integer",
              "default": 20
            }
          },
          {
            "name": "order",
            "in": "query",
            "description": "Sort order.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "default": "desc",
              "enum": [
                "asc",
                "desc"
              ]
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort field. You *really* only want to sort by `updated_at` in ascending\norder. In descending order updated records will move behind the cursor and could\nprevent some records from being returned.\n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "default": "created_at",
              "enum": [
                "created_at",
                "updated_at"
              ]
            }
          },
          {
            "name": "begin_time",
            "in": "query",
            "description": "Filter by begin_time when `sort=created_at` or `sort=updated_at`.\n**Note:** this value is an ISO8601 timestamp. A partial timestamp that does not include a time zone will default to UTC.\n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "end_time",
            "in": "query",
            "description": "Filter by end_time when `sort=created_at` or `sort=updated_at`.\n**Note:** this value is an ISO8601 timestamp. A partial timestamp that does not include a time zone will default to UTC.\n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "email",
            "in": "query",
            "description": "Filter for accounts with this exact email address. A blank value will return accounts with both `null` and `\"\"` email addresses. Note that multiple accounts can share one email address.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "subscriber",
            "in": "query",
            "description": "Filter for accounts with or without a subscription in the `active`,\n`canceled`, or `future` state.\n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "past_due",
            "in": "query",
            "description": "Filter for accounts with an invoice in the `past_due` state.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": [
                "true"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of an account's child accounts.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountList"
                }
              }
            }
          },
          "400": {
            "description": "Invalid or unpermitted parameter.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Incorrect site or account ID.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "Python",
            "source": "child_accounts = client.list_child_accounts(account_id, limit=200).items()\nfor account in child_accounts:\n    print(\"Child Account %s\" % account.code)\n"
          },
          {
            "lang": "Ruby",
            "source": "child_accounts = @client.list_child_accounts(\n  account_id: account_id,\n  limit: 200\n)\nchild_accounts.each do |child|\n  puts \"Account: #{child.code}\"\nend\n"
          },
          {
            "lang": "PHP",
            "source": "$params = ['limit' => 200];\n$child_accounts = $client->listChildAccounts($account_id, $params);\n\nforeach($child_accounts as $child_account) {\n  echo 'Child Account: ' . $child_account->getId() . PHP_EOL;\n}\n"
          },
          {
            "lang": "Go",
            "source": "listParams := &recurly.ListChildAccountsParams{\n\tSort:  recurly.String(\"created_at\"),\n\tOrder: recurly.String(\"desc\"),\n\tLimit: recurly.Int(200),\n}\naccounts := client.ListChildAccounts(accountID, listParams)\n\nfor accounts.HasMore {\n\terr := accounts.Fetch()\n\tif e, ok := err.(*recurly.Error); ok {\n\t\tfmt.Printf(\"Failed to retrieve next page: %v\", e)\n\t\tbreak\n\t}\n\tfor i, account := range accounts.Data {\n\t\tfmt.Printf(\"Child Account %3d: %s, %s\\n\",\n\t\t\ti,\n\t\t\taccount.Id,\n\t\t\taccount.Code,\n\t\t)\n\t}\n}"
          }
        ]
      }
    },
    "/sites/{site_id}/acquisitions": {
      "get": {
        "tags": [
          "account_acquisition"
        ],
        "summary": "List a site's account acquisition data",
        "operationId": "list_account_acquisition",
        "parameters": [
          {
            "name": "site_id",
            "in": "path",
            "description": "Site ID or subdomain. For ID no prefix is used e.g. `e28zov4fw0v2`. For subdomain use prefix `subdomain-`, e.g. `subdomain-recurly`.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ids",
            "in": "query",
            "description": "Filter results by their IDs. Up to 200 IDs can be passed at once using\ncommas as separators, e.g. `ids=h1at4d57xlmy,gyqgg0d3v9n1,jrsm5b4yefg6`.\n\n**Important notes:**\n\n* The `ids` parameter cannot be used with any other ordering or filtering\n  parameters (`limit`, `order`, `sort`, `begin_time`, `end_time`, etc)\n* Invalid or unknown IDs will be ignored, so you should check that the\n  results correspond to your request.\n* Records are returned in an arbitrary order. Since results are all\n  returned at once you can sort the records yourself.\n",
            "required": false,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit number of records 1-200.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maximum": 200,
              "minimum": 1,
              "type": "integer",
              "default": 20
            }
          },
          {
            "name": "order",
            "in": "query",
            "description": "Sort order.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "default": "desc",
              "enum": [
                "asc",
                "desc"
              ]
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort field. You *really* only want to sort by `updated_at` in ascending\norder. In descending order updated records will move behind the cursor and could\nprevent some records from being returned.\n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "default": "created_at",
              "enum": [
                "created_at",
                "updated_at"
              ]
            }
          },
          {
            "name": "begin_time",
            "in": "query",
            "description": "Filter by begin_time when `sort=created_at` or `sort=updated_at`.\n**Note:** this value is an ISO8601 timestamp. A partial timestamp that does not include a time zone will default to UTC.\n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "end_time",
            "in": "query",
            "description": "Filter by end_time when `sort=created_at` or `sort=updated_at`.\n**Note:** this value is an ISO8601 timestamp. A partial timestamp that does not include a time zone will default to UTC.\n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of the site's account acquisition data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountAcquisitionList"
                }
              }
            }
          },
          "400": {
            "description": "Invalid or unpermitted parameter.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Incorrect site ID.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "Node.js",
            "source": "const acquisitions = client.listAccountAcquisition({ limit: 200 })\n\nfor await (const acquisition of acquisitions.each()) {\n  console.log(acquisition.id)\n}\n"
          },
          {
            "lang": "Python",
            "source": "acquisitions = client.list_account_acquisition(limit=200).items()\nfor acquisition in acquisitions:\n    print(acquisition.id)\n"
          },
          {
            "lang": ".NET",
            "source": "var acquisitions = client.ListAccountAcquisition();\nforeach(AccountAcquisition acquisition in acquisitions)\n{\n    Console.WriteLine(acquisition.Id);\n}\n"
          },
          {
            "lang": "Ruby",
            "source": "acquisitions = @client.list_account_acquisition(limit: 200)\nacquisitions.each do |acquisition|\n  puts \"AccountAcquisition: #{acquisition.cost}\"\nend\n"
          },
          {
            "lang": "Java",
            "source": "QueryParams params = new QueryParams();\nparams.setLimit(200); // Pull 200 records at a time\nfinal Pager<AccountAcquisition> acquisitions = client.listAccountAcquisition(params);\n\nfor (AccountAcquisition acquisition : acquisitions) {\n    System.out.println(acquisition.getId());\n}\n"
          },
          {
            "lang": "PHP",
            "source": "$params = ['limit' => 200];\n$account_acquisition = $client->listAccountAcquisition($params);\n\nforeach($account_acquisition as $aa) {\n  echo 'Account acquisition: ' . $aa->getId() . PHP_EOL;\n}\n"
          },
          {
            "lang": "Go",
            "source": "listParams := &recurly.ListAccountAcquisitionParams{\n\tSort:  recurly.String(\"created_at\"),\n\tOrder: recurly.String(\"asc\"),\n\tLimit: recurly.Int(200),\n}\naccountAcquisition := client.ListAccountAcquisition(listParams)\n\nfor accountAcquisition.HasMore {\n\terr := accountAcquisition.Fetch()\n\tif e, ok := err.(*recurly.Error); ok {\n\t\tfmt.Printf(\"Failed to retrieve next page: %v\", e)\n\t\tbreak\n\t}\n\tfor i, a := range accountAcquisition.Data {\n\t\tfmt.Printf(\"Account Acquisition %3d: %s\\n\",\n\t\t\ti,\n\t\t\ta.Id,\n\t\t)\n\t}\n}"
          }
        ]
      }
    },
    "/sites/{site_id}/coupons": {
      "get": {
        "tags": [
          "coupon"
        ],
        "summary": "List a site's coupons",
        "operationId": "list_coupons",
        "parameters": [
          {
            "name": "site_id",
            "in": "path",
            "description": "Site ID or subdomain. For ID no prefix is used e.g. `e28zov4fw0v2`. For subdomain use prefix `subdomain-`, e.g. `subdomain-recurly`.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ids",
            "in": "query",
            "description": "Filter results by their IDs. Up to 200 IDs can be passed at once using\ncommas as separators, e.g. `ids=h1at4d57xlmy,gyqgg0d3v9n1,jrsm5b4yefg6`.\n\n**Important notes:**\n\n* The `ids` parameter cannot be used with any other ordering or filtering\n  parameters (`limit`, `order`, `sort`, `begin_time`, `end_time`, etc)\n* Invalid or unknown IDs will be ignored, so you should check that the\n  results correspond to your request.\n* Records are returned in an arbitrary order. Since results are all\n  returned at once you can sort the records yourself.\n",
            "required": false,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit number of records 1-200.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maximum": 200,
              "minimum": 1,
              "type": "integer",
              "default": 20
            }
          },
          {
            "name": "order",
            "in": "query",
            "description": "Sort order.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "default": "desc",
              "enum": [
                "asc",
                "desc"
              ]
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort field. You *really* only want to sort by `updated_at` in ascending\norder. In descending order updated records will move behind the cursor and could\nprevent some records from being returned.\n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "default": "created_at",
              "enum": [
                "created_at",
                "updated_at"
              ]
            }
          },
          {
            "name": "begin_time",
            "in": "query",
            "description": "Filter by begin_time when `sort=created_at` or `sort=updated_at`.\n**Note:** this value is an ISO8601 timestamp. A partial timestamp that does not include a time zone will default to UTC.\n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "end_time",
            "in": "query",
            "description": "Filter by end_time when `sort=created_at` or `sort=updated_at`.\n**Note:** this value is an ISO8601 timestamp. A partial timestamp that does not include a time zone will default to UTC.\n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of the site's coupons.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CouponList"
                }
              }
            }
          },
          "400": {
            "description": "Invalid or unpermitted parameter.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Incorrect site ID.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "Node.js",
            "source": "const coupons = client.listCoupons({ limit: 200 })\n\nfor await (const coupon of coupons.each()) {\n  console.log(coupon.code)\n}\n"
          },
          {
            "lang": "Python",
            "source": "coupons = client.list_coupons(limit=200).items()\nfor coupon in coupons:\n    print(coupon.code)\n"
          },
          {
            "lang": ".NET",
            "source": "var coupons = client.ListCoupons(limit: 200);\nforeach(Coupon coupon in coupons)\n{\n    Console.WriteLine(coupon.Code);\n}\n"
          },
          {
            "lang": "Ruby",
            "source": "coupons = @client.list_coupons(limit: 200)\ncoupons.each do |coupon|\n  puts \"coupon: #{coupon.code}\"\nend\n"
          },
          {
            "lang": "Java",
            "source": "QueryParams params = new QueryParams();\nparams.setLimit(200); // Pull 200 records at a time\nfinal Pager<Coupon> coupons = client.listCoupons(params);\n\nfor (Coupon coupon : coupons) {\n    System.out.println(coupon.getCode());\n}\n"
          },
          {
            "lang": "PHP",
            "source": "$params = ['limit' => 200];\n$coupons = $client->listCoupons($params);\n\nforeach($coupons as $coupon) {\n  echo 'Coupon: ' . $coupon->getCode() . PHP_EOL;\n}\n"
          },
          {
            "lang": "Go",
            "source": "listParams := &recurly.ListCouponsParams{\n\tSort:  recurly.String(\"created_at\"),\n\tOrder: recurly.String(\"desc\"),\n\tLimit: recurly.Int(200),\n}\ncoupons := client.ListCoupons(listParams)\n\nfor coupons.HasMore {\n\terr := coupons.Fetch()\n\tif e, ok := err.(*recurly.Error); ok {\n\t\tfmt.Printf(\"Failed to retrieve next page: %v\", e)\n\t\tbreak\n\t}\n\tfor i, coupon := range coupons.Data {\n\t\tfmt.Printf(\"Coupon %3d: %s, %s\\n\",\n\t\t\ti,\n\t\t\tcoupon.Id,\n\t\t\tcoupon.Code,\n\t\t)\n\t}\n}"
          }
        ]
      },
      "post": {
        "tags": [
          "coupon"
        ],
        "summary": "Create a new coupon",
        "operationId": "create_coupon",
        "parameters": [
          {
            "name": "site_id",
            "in": "path",
            "description": "Site ID or subdomain. For ID no prefix is used e.g. `e28zov4fw0v2`. For subdomain use prefix `subdomain-`, e.g. `subdomain-recurly`.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CouponCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "A new coupon.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Coupon"
                }
              }
            }
          },
          "400": {
            "description": "Bad request, perhaps invalid JSON?",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Incorrect site ID.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "422": {
            "description": "Invalid request parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "Node.js",
            "source": "try {\n  const couponCreate = {\n    name: \"Promotional Coupon\",\n    code: couponCode,\n    discount_type: \"fixed\",\n    currencies: [{\"currency\": \"USD\", \"discount\": 10}],\n  }\n  const coupon = await client.createCoupon(couponCreate)\n  console.log('Created coupon: ', coupon.id)\n} catch (err) {\n  if (err instanceof recurly.errors.ValidationError) {\n    // If the request was not valid, you may want to tell your user\n    // why. You can find the invalid params and reasons in err.params\n    console.log('Failed validation', err.params)\n  } else {\n    // If we don't know what to do with the err, we should\n    // probably re-raise and let our web framework and logger handle it\n    console.log('Unknown Error: ', err)\n  }\n}\n"
          },
          {
            "lang": "Python",
            "source": "try:\n    coupon_create = {\n        \"name\": \"Promotional Coupon\",\n        \"code\": coupon_code,\n        \"discount_type\": \"fixed\",\n        \"currencies\": [{\"currency\": \"USD\", \"discount\": 10000}],\n    }\n    coupon = client.create_coupon(coupon_create)\n    print(\"Created Coupon %s\" % coupon)\nexcept recurly.errors.ValidationError as e:\n    # If the request was invalid, you may want to tell your user\n    # why. You can find the invalid params and reasons in e.error.params\n    print(\"ValidationError: %s\" % e.error.message)\n    print(e.error.params)\n"
          },
          {
            "lang": ".NET",
            "source": "try\n{\n    var couponReq = new CouponCreate()\n    {\n        Name = \"Promotional Coupon\",\n        Code = couponCode,\n        DiscountType = \"fixed\",\n        Currencies = new List<CouponPricing>() {\n          new CouponPricing() {\n            Currency = \"USD\",\n            Discount = 1000\n          }\n        }\n    };\n    Coupon coupon = client.CreateCoupon(couponReq);\n    Console.WriteLine($\"Created coupon {coupon.Id}\");\n}\ncatch (Recurly.Errors.Validation ex)\n{\n    // If the request was not valid, you may want to tell your user\n    // why. You can find the invalid params and reasons in ex.Error.Params\n    Console.WriteLine($\"Failed validation: {ex.Error.Message}\");\n}\ncatch (Recurly.Errors.ApiError ex)\n{\n    // Use ApiError to catch a generic error from the API\n    Console.WriteLine($\"Unexpected Recurly Error: {ex.Error.Message}\");\n}\n"
          },
          {
            "lang": "Ruby",
            "source": "begin\n  coupon_create = {\n    name: \"Promotional Coupon\",\n    code: coupon_code,\n    discount_type: 'fixed',\n    currencies: [\n      {\n        currency: 'USD',\n        discount: 10_000\n      }\n    ]\n  }\n  coupon = @client.create_coupon(\n    body: coupon_create\n  )\n  puts \"Created Coupon #{coupon}\"\nrescue Recurly::Errors::ValidationError => e\n  # If the request was invalid, you may want to tell your user\n  # why. You can find the invalid params and reasons in e.recurly_error.params\n  puts \"ValidationError: #{e.recurly_error.params}\"\nend\n"
          },
          {
            "lang": "Java",
            "source": "try {\n    CouponCreate couponCreate = new CouponCreate();\n\n    couponCreate.setName(\"Promotional Coupon\");\n    couponCreate.setCode(couponCode);\n\n    List<CouponPricing> currencies = new ArrayList<CouponPricing>();\n    CouponPricing couponPrice = new CouponPricing();\n    couponPrice.setCurrency(\"USD\");\n    couponPrice.setDiscount(10.0f);\n    currencies.add(couponPrice);\n\n    couponCreate.setCurrencies(currencies);\n\n    Coupon coupon = client.createCoupon(couponCreate);\n    System.out.println(\"Created coupon \" + coupon.getCode());\n} catch (ValidationException e) {\n    // If the request was not valid, you may want to tell your user\n    // why. You can find the invalid params and reasons in e.getError().getParams()\n    System.out.println(\"Failed validation: \" + e.getError().getMessage());\n} catch (ApiException e) {\n    // Use ApiException to catch a generic error from the API\n    System.out.println(\"Unexpected Recurly Error: \" + e.getError().getMessage());\n}\n"
          },
          {
            "lang": "PHP",
            "source": "try {\n    $coupon_create = array(\n        \"name\" => \"Promotional Coupon\",\n        \"code\" => $coupon_code,\n        \"discount_type\" => \"fixed\",\n        \"currencies\" => [\n            \"currency\" => \"USD\",\n            \"discount\" => 10\n        ]\n    );\n\n    $coupon = $client->createCoupon($coupon_create);\n\n    echo 'Created Coupon:' . PHP_EOL;\n    var_dump($coupon);\n} catch (\\Recurly\\Errors\\Validation $e) {\n    // If the request was not valid, you may want to tell your user\n    // why. You can find the invalid params and reasons in err.params\n    var_dump($e);\n} catch (\\Recurly\\RecurlyError $e) {\n    // If we don't know what to do with the err, we should\n    // probably re-raise and let our web framework and logger handle it\n    var_dump($e);\n}\n"
          },
          {
            "lang": "Go",
            "source": "couponReq := &recurly.CouponCreate{\n\tName:                     recurly.String(\"Promotional Coupon\"),\n\tMaxRedemptions:           recurly.Int(50),\n\tMaxRedemptionsPerAccount: recurly.Int(1),\n\tCode:                     recurly.String(genUuid()),\n\tDiscountType:             recurly.String(\"percent\"),\n\tDiscountPercent:          recurly.Int(25),\n}\n\ncoupon, err := client.CreateCoupon(couponReq)\nif e, ok := err.(*recurly.Error); ok {\n\tif e.Type == recurly.ErrorTypeValidation {\n\t\tfmt.Printf(\"Failed validation: %v\", e)\n\t\treturn nil, err\n\t}\n\tfmt.Printf(\"Unexpected Recurly error: %v\", e)\n\treturn nil, err\n}\nfmt.Printf(\"Created Coupon: %v\", coupon.Id)"
          }
        ]
      }
    },
    "/sites/{site_id}/coupons/{coupon_id}": {
      "get": {
        "tags": [
          "coupon"
        ],
        "summary": "Fetch a coupon",
        "operationId": "get_coupon",
        "parameters": [
          {
            "name": "site_id",
            "in": "path",
            "description": "Site ID or subdomain. For ID no prefix is used e.g. `e28zov4fw0v2`. For subdomain use prefix `subdomain-`, e.g. `subdomain-recurly`.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "coupon_id",
            "in": "path",
            "description": "Coupon ID or code. For ID no prefix is used e.g. `e28zov4fw0v2`. For code use prefix `code-`, e.g. `code-10off`.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A coupon.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Coupon"
                }
              }
            }
          },
          "404": {
            "description": "Incorrect site or coupon ID.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "Node.js",
            "source": "try {\n  const coupon = await client.getCoupon(couponId)\n  console.log('Fetched coupon: ', coupon.code)\n} catch (err) {\n  if (err instanceof recurly.errors.NotFoundError) {\n    // If the request was not found, you may want to alert the user or\n    // just return null\n    console.log('Resource Not Found')\n  } else {\n    // If we don't know what to do with the err, we should\n    // probably re-raise and let our web framework and logger handle it\n    console.log('Unknown Error: ', err)\n  }\n}\n"
          },
          {
            "lang": "Python",
            "source": "try:\n    coupon = client.get_coupon(coupon_id)\n    print(\"Got Coupon %s\" % coupon)\nexcept recurly.errors.NotFoundError:\n    # If the resource was not found, you may want to alert the user or\n    # just return nil\n    print(\"Resource Not Found\")\n"
          },
          {
            "lang": ".NET",
            "source": "try\n{\n    Coupon coupon = client.GetCoupon(couponId);\n    Console.WriteLine($\"Fetched coupon {coupon.Code}\");\n}\ncatch (Recurly.Errors.NotFound ex)\n{\n    // If the resource was not found\n    // we may want to alert the user or just return null\n    Console.WriteLine($\"Resource Not Found: {ex.Error.Message}\");\n}\ncatch (Recurly.Errors.ApiError ex)\n{\n    // Use ApiError to catch a generic error from the API\n    Console.WriteLine($\"Unexpected Recurly Error: {ex.Error.Message}\");\n}\n"
          },
          {
            "lang": "Ruby",
            "source": "begin\n  coupon = @client.get_coupon(coupon_id: coupon_id)\n  puts \"Got Coupon #{coupon}\"\nrescue Recurly::Errors::NotFoundError\n  # If the resource was not found, you may want to alert the user or\n  # just return nil\n  puts \"Resource Not Found\"\nend\n"
          },
          {
            "lang": "Java",
            "source": "try {\n    final Coupon coupon = client.getCoupon(couponId);\n    System.out.println(\"Fetched coupon \" + coupon.getCode());\n} catch (NotFoundException e) {\n    // If the resource was not found\n    // we may want to alert the user or just return null\n    System.out.println(\"Resource Not Found: \" + e.getError().getMessage());\n} catch (ApiException e) {\n    // Use ApiException to catch a generic error from the API\n    System.out.println(\"Unexpected Recurly Error: \" + e.getError().getMessage());\n}\n"
          },
          {
            "lang": "PHP",
            "source": "try {\n    $coupon = $client->getCoupon($coupon_id);\n\n    echo 'Got Coupon:' . PHP_EOL;\n    var_dump($coupon);\n} catch (\\Recurly\\Errors\\NotFound $e) {\n    // Could not find the resource, you may want to inform the user\n    // or just return a NULL\n    echo 'Could not find resource.' . PHP_EOL;\n    var_dump($e);\n} catch (\\Recurly\\RecurlyError $e) {\n    // Something bad happened... tell the user so that they can fix it?\n    echo 'Some unexpected Recurly error happened. Try again later.' . PHP_EOL;\n}\n"
          },
          {
            "lang": "Go",
            "source": "coupon, err := client.GetCoupon(couponID)\nif e, ok := err.(*recurly.Error); ok {\n\tif e.Type == recurly.ErrorTypeNotFound {\n\t\tfmt.Printf(\"Resource not found: %v\", e)\n\t\treturn nil, err\n\t}\n\tfmt.Printf(\"Unexpected Recurly error: %v\", e)\n\treturn nil, err\n}\n\nfmt.Printf(\"Fetched Coupon: %v\", coupon.Id)"
          }
        ]
      },
      "put": {
        "tags": [
          "coupon"
        ],
        "summary": "Update an active coupon",
        "operationId": "update_coupon",
        "parameters": [
          {
            "name": "site_id",
            "in": "path",
            "description": "Site ID or subdomain. For ID no prefix is used e.g. `e28zov4fw0v2`. For subdomain use prefix `subdomain-`, e.g. `subdomain-recurly`.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "coupon_id",
            "in": "path",
            "description": "Coupon ID or code. For ID no prefix is used e.g. `e28zov4fw0v2`. For code use prefix `code-`, e.g. `code-10off`.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CouponUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The updated coupon.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Coupon"
                }
              }
            }
          },
          "400": {
            "description": "Bad request, perhaps invalid JSON?",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Incorrect site or coupon ID.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "422": {
            "description": "Invalid request parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "Node.js",
            "source": "try {\n  const couponUpdate = {\n    name: \"New Coupon Name\"\n  }\n  const coupon = await client.updateCoupon(couponId, couponUpdate)\n  console.log('Updated coupon: ', coupon)\n} catch (err) {\n  if (err instanceof recurly.errors.ValidationError) {\n    // If the request was not valid, you may want to tell your user\n    // why. You can find the invalid params and reasons in err.params\n    console.log('Failed validation', err.params)\n  } else {\n    // If we don't know what to do with the err, we should\n    // probably re-raise and let our web framework and logger handle it\n    console.log('Unknown Error: ', err)\n  }\n}\n"
          },
          {
            "lang": "Python",
            "source": "try:\n    coupon_update = {\n      \"name\": \"New Coupon Name\",\n    }\n    coupon = client.update_coupon(coupon_id, coupon_update)\n    print(\"Updated Coupon %s\" % coupon)\nexcept recurly.errors.NotFoundError:\n    # If the resource was not found, you may want to alert the user or\n    # just return nil\n    print(\"Resource Not Found\")\n"
          },
          {
            "lang": ".NET",
            "source": "try\n{\n    var couponReq = new CouponUpdate() {\n        Name = \"New Coupon Name\"\n    };\n    Coupon coupon = client.UpdateCoupon(couponId, couponReq);\n    Console.WriteLine($\"Updated Coupon: {coupon.Id}\");\n}\ncatch (Recurly.Errors.Validation ex)\n{\n    // If the request was not valid, you may want to tell your user\n    // why. You can find the invalid params and reasons in ex.Error.Params\n    Console.WriteLine($\"Failed validation: {ex.Error.Message}\");\n}\ncatch (Recurly.Errors.ApiError ex)\n{\n    // Use ApiError to catch a generic error from the API\n    Console.WriteLine($\"Unexpected Recurly Error: {ex.Error.Message}\");\n}\n"
          },
          {
            "lang": "Ruby",
            "source": "begin\n  coupon_update = {\n    name: \"New Coupon Name\"\n  }\n  coupon = @client.update_coupon(coupon_id: coupon_id, body: coupon_update)\n  puts \"Updated Coupon #{coupon}\"\nrescue Recurly::Errors::NotFoundError\n  # If the resource was not found, you may want to alert the user or\n  # just return nil\n  puts \"Resource Not Found\"\nend\n"
          },
          {
            "lang": "Java",
            "source": "try {\n  final CouponUpdate couponUpdate = new CouponUpdate();\n  couponUpdate.setName(\"New Coupon Name\");\n\n  final Coupon coupon = client.updateCoupon(couponId, couponUpdate);\n  System.out.println(\"Updated coupon: \" + coupon.getCode());\n  System.out.println(coupon.getName());\n} catch (ValidationException e) {\n    // If the request was not valid, you may want to tell your user\n    // why. You can find the invalid params and reasons in e.getError().getParams()\n    System.out.println(\"Failed validation: \" + e.getError().getMessage());\n} catch (ApiException e) {\n    // Use ApiException to catch a generic error from the API\n    System.out.println(\"Unexpected Recurly Error: \" + e.getError().getMessage());\n}\n"
          },
          {
            "lang": "PHP",
            "source": "try {\n    $coupon_update = array(\n        \"name\" => \"New Coupon Name\"\n    );\n    $coupon = $client->updateCoupon($coupon_id, $coupon_update);\n\n    echo 'Updated Coupon:' . PHP_EOL;\n    var_dump($coupon);\n} catch (\\Recurly\\Errors\\Validation $e) {\n    // If the request was not valid, you may want to tell your user\n    // why. You can find the invalid params and reasons in err.params\n    var_dump($e);\n} catch (\\Recurly\\RecurlyError $e) {\n    // If we don't know what to do with the err, we should\n    // probably re-raise and let our web framework and logger handle it\n    var_dump($e);\n}\n"
          },
          {
            "lang": "Go",
            "source": "updateReq := &recurly.CouponUpdate{\n\tName: recurly.String(\"New Coupon Name\"),\n}\ncoupon, err := client.UpdateCoupon(couponID, updateReq)\nif e, ok := err.(*recurly.Error); ok {\n\tif e.Type == recurly.ErrorTypeValidation {\n\t\tfmt.Printf(\"Failed validation: %v\", e)\n\t\treturn nil, err\n\t}\n\tfmt.Printf(\"Unexpected Recurly error: %v\", e)\n\treturn nil, err\n}\n\nfmt.Printf(\"Updated Coupon: %v\", coupon.Id)"
          }
        ]
      },
      "delete": {
        "tags": [
          "coupon"
        ],
        "summary": "Expire a coupon",
        "description": "Mark an existing Coupon as expired",
        "operationId": "deactivate_coupon",
        "parameters": [
          {
            "name": "site_id",
            "in": "path",
            "description": "Site ID or subdomain. For ID no prefix is used e.g. `e28zov4fw0v2`. For subdomain use prefix `subdomain-`, e.g. `subdomain-recurly`.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "coupon_id",
            "in": "path",
            "description": "Coupon ID or code. For ID no prefix is used e.g. `e28zov4fw0v2`. For code use prefix `code-`, e.g. `code-10off`.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The expired Coupon",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Coupon"
                }
              }
            }
          },
          "404": {
            "description": "Incorrect site or coupon ID.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "Node.js",
            "source": "try {\n  const coupon = await client.deactivateCoupon(couponId)\n  console.log('Deactivated coupon: ', coupon.code)\n} catch (err) {\n  if (err instanceof recurly.errors.NotFoundError) {\n    // If the request was not found, you may want to alert the user or\n    // just return null\n    console.log('Resource Not Found')\n  } else {\n    // If we don't know what to do with the err, we should\n    // probably re-raise and let our web framework and logger handle it\n    console.log('Unknown Error: ', err)\n  }\n}\n"
          },
          {
            "lang": "Python",
            "source": "try:\n    coupon = client.deactivate_coupon(coupon_id)\n    print(\"Deactivated Coupon %s\" % coupon)\nexcept recurly.errors.NotFoundError:\n    # If the resource was not found, you may want to alert the user or\n    # just return nil\n    print(\"Resource Not Found\")\n"
          },
          {
            "lang": ".NET",
            "source": "try\n{\n    Coupon coupon = client.DeactivateCoupon(couponId);\n    Console.WriteLine($\"Deactivated coupon {coupon.Code}\");\n}\ncatch (Recurly.Errors.NotFound ex)\n{\n    // If the resource was not found\n    // we may want to alert the user or just return null\n    Console.WriteLine($\"Resource Not Found: {ex.Error.Message}\");\n}\ncatch (Recurly.Errors.ApiError ex)\n{\n    // Use ApiError to catch a generic error from the API\n    Console.WriteLine($\"Unexpected Recurly Error: {ex.Error.Message}\");\n}\n"
          },
          {
            "lang": "Ruby",
            "source": "begin\n  coupon = @client.deactivate_coupon(coupon_id: coupon_id)\n  puts \"Deactivated Coupon #{coupon}\"\nrescue Recurly::Errors::NotFoundError\n  # If the resource was not found, you may want to alert the user or\n  # just return nil\n  puts \"Resource Not Found\"\nend\n"
          },
          {
            "lang": "Java",
            "source": "try {\n    final Coupon coupon = client.deactivateCoupon(couponId);\n    System.out.println(\"Deactivated coupon \" + coupon.getCode());\n} catch (NotFoundException e) {\n    // If the resource was not found\n    // we may want to alert the user or just return null\n    System.out.println(\"Resource Not Found: \" + e.getError().getMessage());\n} catch (ApiException e) {\n    // Use ApiException to catch a generic error from the API\n    System.out.println(\"Unexpected Recurly Error: \" + e.getError().getMessage());\n}\n"
          },
          {
            "lang": "PHP",
            "source": "try {\n    $coupon = $client->deactivateCoupon($coupon_id);\n\n    echo 'Deactivated Coupon:' . PHP_EOL;\n    var_dump($coupon);\n} catch (\\Recurly\\Errors\\NotFound $e) {\n    // Could not find the resource, you may want to inform the user\n    // or just return a NULL\n    echo 'Could not find resource.' . PHP_EOL;\n    var_dump($e);\n} catch (\\Recurly\\RecurlyError $e) {\n    // Something bad happened... tell the user so that they can fix it?\n    echo 'Some unexpected Recurly error happened. Try again later.' . PHP_EOL;\n}\n"
          }
        ]
      }
    },
    "/sites/{site_id}/coupons/{coupon_id}/generate": {
      "post": {
        "tags": [
          "coupon",
          "unique_coupon_code"
        ],
        "summary": "Generate unique coupon codes",
        "operationId": "generate_unique_coupon_codes",
        "parameters": [
          {
            "name": "site_id",
            "in": "path",
            "description": "Site ID or subdomain. For ID no prefix is used e.g. `e28zov4fw0v2`. For subdomain use prefix `subdomain-`, e.g. `subdomain-recurly`.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "coupon_id",
            "in": "path",
            "description": "Coupon ID or code. For ID no prefix is used e.g. `e28zov4fw0v2`. For code use prefix `code-`, e.g. `code-10off`.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CouponBulkCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "The `Location` header will specify the location created coupon codes",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Empty"
                }
              }
            }
          },
          "400": {
            "description": "Invalid or unpermitted parameter; perhaps you tried to generate more than 200 codes at a time?",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Incorrect site or coupon ID.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-code-samples": []
      }
    },
    "/sites/{site_id}/coupons/{coupon_id}/unique_coupon_codes": {
      "get": {
        "tags": [
          "coupon",
          "unique_coupon_code"
        ],
        "summary": "List unique coupon codes associated with a bulk coupon",
        "operationId": "list_unique_coupon_codes",
        "parameters": [
          {
            "name": "site_id",
            "in": "path",
            "description": "Site ID or subdomain. For ID no prefix is used e.g. `e28zov4fw0v2`. For subdomain use prefix `subdomain-`, e.g. `subdomain-recurly`.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "coupon_id",
            "in": "path",
            "description": "Coupon ID or code. For ID no prefix is used e.g. `e28zov4fw0v2`. For code use prefix `code-`, e.g. `code-10off`.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ids",
            "in": "query",
            "description": "Filter results by their IDs. Up to 200 IDs can be passed at once using\ncommas as separators, e.g. `ids=h1at4d57xlmy,gyqgg0d3v9n1,jrsm5b4yefg6`.\n\n**Important notes:**\n\n* The `ids` parameter cannot be used with any other ordering or filtering\n  parameters (`limit`, `order`, `sort`, `begin_time`, `end_time`, etc)\n* Invalid or unknown IDs will be ignored, so you should check that the\n  results correspond to your request.\n* Records are returned in an arbitrary order. Since results are all\n  returned at once you can sort the records yourself.\n",
            "required": false,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit number of records 1-200.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maximum": 200,
              "minimum": 1,
              "type": "integer",
              "default": 20
            }
          },
          {
            "name": "order",
            "in": "query",
            "description": "Sort order.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "default": "desc",
              "enum": [
                "asc",
                "desc"
              ]
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort field. You *really* only want to sort by `updated_at` in ascending\norder. In descending order updated records will move behind the cursor and could\nprevent some records from being returned.\n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "default": "created_at",
              "enum": [
                "created_at",
                "updated_at"
              ]
            }
          },
          {
            "name": "begin_time",
            "in": "query",
            "description": "Filter by begin_time when `sort=created_at` or `sort=updated_at`.\n**Note:** this value is an ISO8601 timestamp. A partial timestamp that does not include a time zone will default to UTC.\n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "end_time",
            "in": "query",
            "description": "Filter by end_time when `sort=created_at` or `sort=updated_at`.\n**Note:** this value is an ISO8601 timestamp. A partial timestamp that does not include a time zone will default to UTC.\n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of unique coupon codes that were generated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UniqueCouponCodeList"
                }
              }
            }
          },
          "404": {
            "description": "Incorrect site or coupon ID.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-code-samples": []
      }
    },
    "/sites/{site_id}/credit_payments": {
      "get": {
        "tags": [
          "credit_payment"
        ],
        "summary": "List a site's credit payments",
        "operationId": "list_credit_payments",
        "parameters": [
          {
            "name": "site_id",
            "in": "path",
            "description": "Site ID or subdomain. For ID no prefix is used e.g. `e28zov4fw0v2`. For subdomain use prefix `subdomain-`, e.g. `subdomain-recurly`.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit number of records 1-200.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maximum": 200,
              "minimum": 1,
              "type": "integer",
              "default": 20
            }
          },
          {
            "name": "order",
            "in": "query",
            "description": "Sort order.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "default": "desc",
              "enum": [
                "asc",
                "desc"
              ]
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort field. You *really* only want to sort by `updated_at` in ascending\norder. In descending order updated records will move behind the cursor and could\nprevent some records from being returned.\n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "default": "created_at",
              "enum": [
                "created_at",
                "updated_at"
              ]
            }
          },
          {
            "name": "begin_time",
            "in": "query",
            "description": "Filter by begin_time when `sort=created_at` or `sort=updated_at`.\n**Note:** this value is an ISO8601 timestamp. A partial timestamp that does not include a time zone will default to UTC.\n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "end_time",
            "in": "query",
            "description": "Filter by end_time when `sort=created_at` or `sort=updated_at`.\n**Note:** this value is an ISO8601 timestamp. A partial timestamp that does not include a time zone will default to UTC.\n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of the site's credit payments.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreditPaymentList"
                }
              }
            }
          },
          "400": {
            "description": "Invalid or unpermitted parameter.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Incorrect site or account ID.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "Node.js",
            "source": "const payments = client.listCreditPayments({ limit: 200 })\n\nfor await (const payment of payments.each()) {\n  console.log(payment.uuid)\n}\n"
          },
          {
            "lang": "Python",
            "source": "payments = client.list_credit_payments(limit=200).items()\nfor payment in payments:\n    print(\"Credit Payment %s\" % payment.id)\n"
          },
          {
            "lang": ".NET",
            "source": "var payments = client.ListCreditPayments(limit: 200);\nforeach(CreditPayment payment in payments)\n{\n    Console.WriteLine(payment.Uuid);\n}\n"
          },
          {
            "lang": "Ruby",
            "source": "payments = @client.list_credit_payments(limit: 200)\npayments.each do |payment|\n  puts \"CreditPayment: #{payment.id}\"\nend\n"
          },
          {
            "lang": "Java",
            "source": "QueryParams params = new QueryParams();\nparams.setLimit(200); // Pull 200 records at a time\nfinal Pager<CreditPayment> payments = client.listCreditPayments(params);\n\nfor (CreditPayment payment : payments) {\n    System.out.println(payment.getUuid());\n}\n"
          },
          {
            "lang": "PHP",
            "source": "$params = ['limit' => 200];\n$credit_payments = $client->listCreditPayments($params);\n\nforeach($credit_payments as $payment) {\n  echo 'Credit Payment: ' . $payment->getId() . PHP_EOL;\n}\n"
          },
          {
            "lang": "Go",
            "source": "listParams := &recurly.ListCreditPaymentsParams{\n\tSort:  recurly.String(\"created_at\"),\n\tOrder: recurly.String(\"desc\"),\n\tLimit: recurly.Int(200),\n}\ncreditPayments := client.ListCreditPayments(listParams)\n\nfor creditPayments.HasMore {\n\terr := creditPayments.Fetch()\n\tif e, ok := err.(*recurly.Error); ok {\n\t\tfmt.Printf(\"Failed to retrieve next page: %v\", e)\n\t\tbreak\n\t}\n\tfor i, creditPayment := range creditPayments.Data {\n\t\tfmt.Printf(\"Credit Payment %3d: %s\\n\",\n\t\t\ti,\n\t\t\tcreditPayment.Id,\n\t\t)\n\t}\n}"
          }
        ]
      }
    },
    "/sites/{site_id}/credit_payments/{credit_payment_id}": {
      "get": {
        "tags": [
          "credit_payment"
        ],
        "summary": "Fetch a credit payment",
        "operationId": "get_credit_payment",
        "parameters": [
          {
            "name": "site_id",
            "in": "path",
            "description": "Site ID or subdomain. For ID no prefix is used e.g. `e28zov4fw0v2`. For subdomain use prefix `subdomain-`, e.g. `subdomain-recurly`.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "credit_payment_id",
            "in": "path",
            "description": "Credit Payment ID or UUID. For ID no prefix is used e.g. `e28zov4fw0v2`. For UUID use prefix `uuid-`, e.g. `uuid-123457890`.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A credit payment.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreditPayment"
                }
              }
            }
          },
          "404": {
            "description": "Incorrect site or credit payment ID.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-code-samples": []
      }
    },
    "/sites/{site_id}/custom_field_definitions": {
      "get": {
        "tags": [
          "custom_field_definition"
        ],
        "summary": "List a site's custom field definitions",
        "operationId": "list_custom_field_definitions",
        "parameters": [
          {
            "name": "site_id",
            "in": "path",
            "description": "Site ID or subdomain. For ID no prefix is used e.g. `e28zov4fw0v2`. For subdomain use prefix `subdomain-`, e.g. `subdomain-recurly`.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ids",
            "in": "query",
            "description": "Filter results by their IDs. Up to 200 IDs can be passed at once using\ncommas as separators, e.g. `ids=h1at4d57xlmy,gyqgg0d3v9n1,jrsm5b4yefg6`.\n\n**Important notes:**\n\n* The `ids` parameter cannot be used with any other ordering or filtering\n  parameters (`limit`, `order`, `sort`, `begin_time`, `end_time`, etc)\n* Invalid or unknown IDs will be ignored, so you should check that the\n  results correspond to your request.\n* Records are returned in an arbitrary order. Since results are all\n  returned at once you can sort the records yourself.\n",
            "required": false,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit number of records 1-200.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maximum": 200,
              "minimum": 1,
              "type": "integer",
              "default": 20
            }
          },
          {
            "name": "order",
            "in": "query",
            "description": "Sort order.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "default": "desc",
              "enum": [
                "asc",
                "desc"
              ]
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort field. You *really* only want to sort by `updated_at` in ascending\norder. In descending order updated records will move behind the cursor and could\nprevent some records from being returned.\n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "default": "created_at",
              "enum": [
                "created_at",
                "updated_at"
              ]
            }
          },
          {
            "name": "begin_time",
            "in": "query",
            "description": "Filter by begin_time when `sort=created_at` or `sort=updated_at`.\n**Note:** this value is an ISO8601 timestamp. A partial timestamp that does not include a time zone will default to UTC.\n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "end_time",
            "in": "query",
            "description": "Filter by end_time when `sort=created_at` or `sort=updated_at`.\n**Note:** this value is an ISO8601 timestamp. A partial timestamp that does not include a time zone will default to UTC.\n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "related_type",
            "in": "query",
            "description": "Filter by related type.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": [
                "account",
                "item",
                "subscription"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of the site's custom field definitions.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomFieldDefinitionList"
                }
              }
            }
          },
          "400": {
            "description": "Invalid or unpermitted parameter.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Incorrect site ID.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "Node.js",
            "source": "const definitions = client.listCustomFieldDefinitions({ limit: 200 })\n\nfor await (const definition of definitions.each()) {\n  console.log(definition.displayName)\n}\n"
          },
          {
            "lang": "Python",
            "source": "custom_fields = client.list_custom_field_definitions(limit=200).items()\nfor custom_field in custom_fields:\n    print(custom_field.name)\n"
          },
          {
            "lang": ".NET",
            "source": "var fields = client.ListCustomFieldDefinitions(limit: 200);\nforeach(CustomFieldDefinition def in fields)\n{\n    Console.WriteLine(def.DisplayName);\n}\n"
          },
          {
            "lang": "Ruby",
            "source": "custom_fields = @client.list_custom_field_definitions(limit: 200)\ncustom_fields.each do |field|\n  puts \"CustomFieldDefinition: #{field.name}\"\nend\n"
          },
          {
            "lang": "Java",
            "source": "QueryParams params = new QueryParams();\nparams.setLimit(200); // Pull 200 records at a time\nfinal Pager<CustomFieldDefinition> fields = client.listCustomFieldDefinitions(params);\n\nfor (CustomFieldDefinition field : fields) {\n    System.out.println(field.getDisplayName());\n}\n"
          },
          {
            "lang": "PHP",
            "source": "$params = ['limit' => 200];\n$custom_field_definitions = $client->listCustomFieldDefinitions($params);\n\nforeach($custom_field_definitions as $definition) {\n  echo 'Custom Field Definition: ' . $definition->getName() . PHP_EOL;\n}\n"
          },
          {
            "lang": "Go",
            "source": "listParams := &recurly.ListCustomFieldDefinitionsParams{\n\tSort:  recurly.String(\"created_at\"),\n\tOrder: recurly.String(\"desc\"),\n\tLimit: recurly.Int(200),\n}\ncustomFieldDefinitions := client.ListCustomFieldDefinitions(listParams)\n\nfor customFieldDefinitions.HasMore {\n\terr := customFieldDefinitions.Fetch()\n\tif e, ok := err.(*recurly.Error); ok {\n\t\tfmt.Printf(\"Failed to retrieve next page: %v\", e)\n\t\tbreak\n\t}\n\tfor i, definition := range customFieldDefinitions.Data {\n\t\tfmt.Printf(\"Custom Field Definition %3d: %s\\n\",\n\t\t\ti,\n\t\t\tdefinition.Id,\n\t\t)\n\t}\n}"
          }
        ]
      }
    },
    "/sites/{site_id}/custom_field_definitions/{custom_field_definition_id}": {
      "get": {
        "tags": [
          "custom_field_definition"
        ],
        "summary": "Fetch an custom field definition",
        "operationId": "get_custom_field_definition",
        "parameters": [
          {
            "name": "site_id",
            "in": "path",
            "description": "Site ID or subdomain. For ID no prefix is used e.g. `e28zov4fw0v2`. For subdomain use prefix `subdomain-`, e.g. `subdomain-recurly`.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "custom_field_definition_id",
            "in": "path",
            "description": "Custom Field Definition ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An custom field definition.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomFieldDefinition"
                }
              }
            }
          },
          "404": {
            "description": "Incorrect site or custom field definition ID.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "Node.js",
            "source": "try {\n  const definition = await client.getCustomFieldDefinition(definitionId)\n  console.log('Fetched custom field definition: ', definition.displayName)\n} catch (err) {\n  if (err instanceof recurly.errors.NotFoundError) {\n    // If the request was not found, you may want to alert the user or\n    // just return null\n    console.log('Resource Not Found')\n  } else {\n    // If we don't know what to do with the err, we should\n    // probably re-raise and let our web framework and logger handle it\n    console.log('Unknown Error: ', err)\n  }\n}\n"
          },
          {
            "lang": "Python",
            "source": "try:\n    custom_field_definition = client.get_custom_field_definition(custom_field_definition_id)\n    print(\"Custom Field Definition %s\" % custom_field_definition)\nexcept recurly.errors.NotFoundError as e:\n    print(\"Invoice not found\")\n"
          },
          {
            "lang": ".NET",
            "source": "try\n{\n    CustomFieldDefinition definition = client.GetCustomFieldDefinition(definitionId);\n    Console.WriteLine($\"Fetched custom field definition {definition.DisplayName}\");\n}\ncatch (Recurly.Errors.NotFound ex)\n{\n    // If the resource was not found\n    // we may want to alert the user or just return null\n    Console.WriteLine($\"Resource Not Found: {ex.Error.Message}\");\n}\ncatch (Recurly.Errors.ApiError ex)\n{\n    // Use ApiError to catch a generic error from the API\n    Console.WriteLine($\"Unexpected Recurly Error: {ex.Error.Message}\");\n}\n"
          },
          {
            "lang": "Ruby",
            "source": "begin\n  custom_field_definition = @client.get_custom_field_definition(\n    custom_field_definition_id: custom_field_definition_id\n  )\n  puts \"Got Custom Field Definition #{custom_field_definition}\"\nrescue Recurly::Errors::NotFoundError\n  # If the resource was not found, you may want to alert the user or\n  # just return nil\n  puts \"Resource Not Found\"\nend\n"
          },
          {
            "lang": "Java",
            "source": "try {\n    final CustomFieldDefinition definition = client.getCustomFieldDefinition(definitionId);\n    System.out.println(\"Fetched custom field definition \" + definition.getDisplayName());\n} catch (NotFoundException e) {\n    // If the resource was not found\n    // we may want to alert the user or just return null\n    System.out.println(\"Resource Not Found: \" + e.getError().getMessage());\n} catch (ApiException e) {\n    // Use ApiException to catch a generic error from the API\n    System.out.println(\"Unexpected Recurly Error: \" + e.getError().getMessage());\n}\n"
          },
          {
            "lang": "PHP",
            "source": "try {\n    $custom_field_def = $client->getCustomFieldDefinition($definition_id);\n\n    echo 'Got CustomFieldDefinition:' . PHP_EOL;\n    var_dump($custom_field_def);\n} catch (\\Recurly\\Errors\\NotFound $e) {\n    // Could not find the resource, you may want to inform the user\n    // or just return a NULL\n    echo 'Could not find resource.' . PHP_EOL;\n    var_dump($e);\n} catch (\\Recurly\\RecurlyError $e) {\n    // Something bad happened... tell the user so that they can fix it?\n    echo 'Some unexpected Recurly error happened. Try again later.' . PHP_EOL;\n}\n"
          },
          {
            "lang": "Go",
            "source": "definition, err := client.GetCustomFieldDefinition(customFieldDefinitionID)\nif e, ok := err.(*recurly.Error); ok {\n\tif e.Type == recurly.ErrorTypeNotFound {\n\t\tfmt.Printf(\"Resource not found: %v\", e)\n\t\treturn nil, err\n\t}\n\tfmt.Printf(\"Unexpected Recurly error: %v\", e)\n\treturn nil, err\n}\nfmt.Printf(\"Fetched Custom Field Definition: %s\", definition.Id)"
          }
        ]
      }
    },
    "/sites/{site_id}/items": {
      "get": {
        "tags": [
          "item"
        ],
        "summary": "List a site's items",
        "operationId": "list_items",
        "parameters": [
          {
            "name": "site_id",
            "in": "path",
            "description": "Site ID or subdomain. For ID no prefix is used e.g. `e28zov4fw0v2`. For subdomain use prefix `subdomain-`, e.g. `subdomain-recurly`.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ids",
            "in": "query",
            "description": "Filter results by their IDs. Up to 200 IDs can be passed at once using\ncommas as separators, e.g. `ids=h1at4d57xlmy,gyqgg0d3v9n1,jrsm5b4yefg6`.\n\n**Important notes:**\n\n* The `ids` parameter cannot be used with any other ordering or filtering\n  parameters (`limit`, `order`, `sort`, `begin_time`, `end_time`, etc)\n* Invalid or unknown IDs will be ignored, so you should check that the\n  results correspond to your request.\n* Records are returned in an arbitrary order. Since results are all\n  returned at once you can sort the records yourself.\n",
            "required": false,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit number of records 1-200.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maximum": 200,
              "minimum": 1,
              "type": "integer",
              "default": 20
            }
          },
          {
            "name": "order",
            "in": "query",
            "description": "Sort order.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "default": "desc",
              "enum": [
                "asc",
                "desc"
              ]
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort field. You *really* only want to sort by `updated_at` in ascending\norder. In descending order updated records will move behind the cursor and could\nprevent some records from being returned.\n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "default": "created_at",
              "enum": [
                "created_at",
                "updated_at"
              ]
            }
          },
          {
            "name": "begin_time",
            "in": "query",
            "description": "Filter by begin_time when `sort=created_at` or `sort=updated_at`.\n**Note:** this value is an ISO8601 timestamp. A partial timestamp that does not include a time zone will default to UTC.\n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "end_time",
            "in": "query",
            "description": "Filter by end_time when `sort=created_at` or `sort=updated_at`.\n**Note:** this value is an ISO8601 timestamp. A partial timestamp that does not include a time zone will default to UTC.\n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "state",
            "in": "query",
            "description": "Filter by state.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": [
                "active",
                "inactive"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of the site's items.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ItemList"
                }
              }
            }
          },
          "400": {
            "description": "Invalid or unpermitted parameter.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Incorrect site ID.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "Node.js",
            "source": "const items = client.listItems({ limit: 200 })\n\nfor await (const item of items.each()) {\n  console.log(item.code)\n}\n"
          },
          {
            "lang": "Python",
            "source": "items = client.list_items(limit=200).items()\nfor item in items:\n    print(item.code)\n"
          },
          {
            "lang": ".NET",
            "source": "var items = client.ListItems(limit: 200);\nforeach(Item item in items)\n{\n    Console.WriteLine(item.Code);\n}\n"
          },
          {
            "lang": "Ruby",
            "source": "items = @client.list_items(limit: 200)\nitems.each do |item|\n  puts \"Item: #{item.code}\"\nend\n"
          },
          {
            "lang": "Java",
            "source": "QueryParams params = new QueryParams();\nparams.setLimit(200); // Pull 200 records at a time\nPager<Item> items = client.listItems(params);\n\nfor (Item item : items) {\n    System.out.println(item.getCode());\n}\n"
          },
          {
            "lang": "PHP",
            "source": "$params = ['limit' => 200];\n$items = $client->listItems($params);\n\nforeach($items as $item) {\n  echo 'Item: ' . $item->getCode() . PHP_EOL;\n}\n"
          },
          {
            "lang": "Go",
            "source": "listParams := &recurly.ListItemsParams{\n\tSort:  recurly.String(\"created_at\"),\n\tOrder: recurly.String(\"desc\"),\n\tLimit: recurly.Int(200),\n}\nitems := client.ListItems(listParams)\n\nfor items.HasMore {\n\terr := items.Fetch()\n\tif e, ok := err.(*recurly.Error); ok {\n\t\tfmt.Printf(\"Failed to retrieve next page: %v\", e)\n\t\tbreak\n\t}\n\tfor i, item := range items.Data {\n\t\tfmt.Printf(\"Item %3d: %s, %s\\n\",\n\t\t\ti,\n\t\t\titem.Id,\n\t\t\titem.Code,\n\t\t)\n\t}\n}"
          }
        ]
      },
      "post": {
        "tags": [
          "item"
        ],
        "summary": "Create a new item",
        "operationId": "create_item",
        "parameters": [
          {
            "name": "site_id",
            "in": "path",
            "description": "Site ID or subdomain. For ID no prefix is used e.g. `e28zov4fw0v2`. For subdomain use prefix `subdomain-`, e.g. `subdomain-recurly`.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ItemCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "A new item.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Item"
                }
              }
            }
          },
          "400": {
            "description": "Bad request, perhaps invalid JSON?",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Incorrect site ID.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "422": {
            "description": "Invalid request parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "Node.js",
            "source": "try {\n  const itemCreate = {\n    code: itemCode,\n    name: \"Item Name\",\n    description: \"Item Description\",\n    external_sku: \"a35JE-44\",\n    accounting_code: \"item-code-127\",\n    revenue_schedule_type: \"at_range_end\",\n    custom_fields: [{\n      name: \"custom-field-1\",\n      value: \"Custom Field 1 value\"\n    }]\n  }\n  const item = await client.createItem(itemCreate)\n  console.log('Created Item: ', item.code)\n} catch (err) {\n  if (err instanceof recurly.errors.ValidationError) {\n    // If the request was not valid, you may want to tell your user\n    // why. You can find the invalid params and reasons in err.params\n    console.log('Failed validation', err.params)\n  } else {\n    // If we don't know what to do with the err, we should\n    // probably re-raise and let our web framework and logger handle it\n    console.log('Unknown Error: ', err)\n  }\n}\n"
          },
          {
            "lang": "Python",
            "source": "try:\n    item_create = {\n        \"code\": item_code,\n        \"name\": \"Item Name\",\n        \"description\": \"Item Description\",\n        \"external_sku\": \"a35JE-44\",\n        \"accounting_code\": \"item-code-127\",\n        \"revenue_schedule_type\": \"at_range_end\",\n        \"custom_fields\": [{\n            \"name\": \"custom-field-1\",\n            \"value\": \"Custom Field 1 value\"\n        }]\n    }\n    item = client.create_item(item_create)\n    print(\"Created Item %s\" % item)\nexcept recurly.errors.ValidationError as e:\n    # If the request was invalid, you may want to tell your user\n    # why. You can find the invalid params and reasons in e.error.params\n    print(\"ValidationError: %s\" % e.error.message)\n    print(e.error.params)\n"
          },
          {
            "lang": ".NET",
            "source": "try\n{\n    var itemReq = new ItemCreate()\n    {\n        Code = itemCode,\n        Name = \"Item Name\",\n        Description = \"Item Description\",\n        ExternalSku = \"a35JE-44\",\n        AccountingCode = \"item-code-127\",\n        RevenueScheduleType = \"at_range_end\",\n        CustomFields = new List<CustomField>() {\n            new CustomField() {\n                Name = \"custom-field-1\",\n                Value = \"Custom Field 1 value\"\n            }\n        }\n    };\n    Item item = client.CreateItem(itemReq);\n    Console.WriteLine($\"Created item {item.Code}\");\n}\ncatch (Recurly.Errors.Validation ex)\n{\n    // If the request was not valid, you may want to tell your user\n    // why. You can find the invalid params and reasons in ex.Error.Params\n    Console.WriteLine($\"Failed validation: {ex.Error.Message}\");\n}\ncatch (Recurly.Errors.ApiError ex)\n{\n    // Use ApiError to catch a generic error from the API\n    Console.WriteLine($\"Unexpected Recurly Error: {ex.Error.Message}\");\n}\n"
          },
          {
            "lang": "Ruby",
            "source": "begin\n  item_create = {\n    code: item_code,\n    name: \"Item Name\",\n    description: \"Item Description\",\n    external_sku: \"a35JE-44\",\n    accounting_code: \"item-code-127\",\n    revenue_schedule_type: \"at_range_end\",\n    custom_fields: [{\n      name: \"custom-field-1\",\n      value: \"Custom Field 1 value\"\n    }]\n  }\n  item = @client.create_item(body: item_create)\n  puts \"Created Item #{item}\"\nrescue Recurly::Errors::ValidationError => e\n  # If the request was invalid, you may want to tell your user\n  # why. You can find the invalid params and reasons in e.recurly_error.params\n  puts \"ValidationError: #{e.recurly_error.params}\"\nend\n"
          },
          {
            "lang": "Java",
            "source": "try {\n    ItemCreate itemReq = new ItemCreate();\n\n    itemReq.setCode(itemCode);\n    itemReq.setName(\"Item Name\");\n    itemReq.setDescription(\"Item Description\");\n    itemReq.setExternalSku(\"a35JE-44\");\n    itemReq.setAccountingCode(\"item-code-127\");\n    itemReq.setRevenueScheduleType(\"at_range_end\");\n\n    List<CustomField> customFields = new ArrayList<>();\n    CustomField customField = new CustomField();\n    customField.setName(\"custom-field-1\");\n    customField.setValue(\"Custom Field 1 value\");\n    customFields.add(customField);\n\n    itemReq.setCustomFields(customFields);\n\n\n    Item item = client.createItem(itemReq);\n    System.out.println(\"Created item \" + item.getCode());\n} catch (ValidationException e) {\n    // If the request was not valid, you may want to tell your user\n    // why. You can find the invalid params and reasons in e.getError().getParams()\n    System.out.println(\"Failed validation: \" + e.getError().getMessage());\n} catch (ApiException e) {\n    // Use ApiException to catch a generic error from the API\n    System.out.println(\"Unexpected Recurly Error: \" + e.getError().getMessage());\n}\n"
          },
          {
            "lang": "PHP",
            "source": "try {\n    $item_create = array(\n        \"code\" => $item_code,\n        \"name\" => \"Coffee Grinder\",\n        \"description\" => \"A professional-grade bean grinder.\"\n    );\n    $item = $client->createItem($item_create);\n\n    echo 'Created Item:' . PHP_EOL;\n    var_dump($item);\n} catch (\\Recurly\\Errors\\Validation $e) {\n    // If the request was not valid, you may want to tell your user\n    // why. You can find the invalid params and reasons in err.params\n    var_dump($e);\n} catch (\\Recurly\\RecurlyError $e) {\n    // If we don't know what to do with the err, we should\n    // probably re-raise and let our web framework and logger handle it\n    var_dump($e);\n}\n"
          },
          {
            "lang": "Go",
            "source": "itemReq := &recurly.ItemCreate{\n\tCode:                &itemCode,\n\tName:                recurly.String(\"Item Name\"),\n\tDescription:         recurly.String(\"Item Description\"),\n\tExternalSku:         recurly.String(\"a35JE-44\"),\n\tAccountingCode:      recurly.String(\"item-code-127\"),\n\tRevenueScheduleType: recurly.String(\"at_range_end\"),\n}\n\nitem, err := client.CreateItem(itemReq)\nif e, ok := err.(*recurly.Error); ok {\n\tif e.Type == recurly.ErrorTypeValidation {\n\t\tfmt.Printf(\"Failed validation: %v\", e)\n\t\treturn nil, err\n\t}\n\tfmt.Printf(\"Unexpected Recurly error: %v\", e)\n\treturn nil, err\n}\nfmt.Printf(\"Created Item: %v\", item.Id)"
          }
        ]
      }
    },
    "/sites/{site_id}/items/{item_id}": {
      "get": {
        "tags": [
          "item"
        ],
        "summary": "Fetch an item",
        "operationId": "get_item",
        "parameters": [
          {
            "name": "site_id",
            "in": "path",
            "description": "Site ID or subdomain. For ID no prefix is used e.g. `e28zov4fw0v2`. For subdomain use prefix `subdomain-`, e.g. `subdomain-recurly`.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "item_id",
            "in": "path",
            "description": "Item ID or code. For ID no prefix is used e.g. `e28zov4fw0v2`. For code use prefix `code-`, e.g. `code-red`.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An item.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Item"
                }
              }
            }
          },
          "404": {
            "description": "Incorrect site or item ID.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "Node.js",
            "source": "try {\n  const item = await client.getItem(itemId)\n  console.log('Fetched item: ', item.code)\n} catch (err) {\n  if (err instanceof recurly.errors.NotFoundError) {\n    // If the request was not found, you may want to alert the user or\n    // just return null\n    console.log('Resource Not Found')\n  } else {\n    // If we don't know what to do with the err, we should\n    // probably re-raise and let our web framework and logger handle it\n    console.log('Unknown Error: ', err)\n  }\n}\n"
          },
          {
            "lang": "Python",
            "source": "try:\n    item = client.get_item(item_id)\n    print(\"Got Item %s\" % item)\nexcept recurly.errors.NotFoundError:\n    # If the resource was not found, you may want to alert the user or\n    # just return nil\n    print(\"Resource Not Found\")\n"
          },
          {
            "lang": ".NET",
            "source": "try\n{\n    Item item = client.GetItem(itemId);\n    Console.WriteLine($\"Fetched item {item.Code}\");\n}\ncatch (Recurly.Errors.NotFound ex)\n{\n    // If the resource was not found\n    // we may want to alert the user or just return null\n    Console.WriteLine($\"Resource Not Found: {ex.Error.Message}\");\n}\ncatch (Recurly.Errors.ApiError ex)\n{\n    // Use ApiError to catch a generic error from the API\n    Console.WriteLine($\"Unexpected Recurly Error: {ex.Error.Message}\");\n}\n"
          },
          {
            "lang": "Ruby",
            "source": "begin\n  item = @client.get_item(item_id: item_id)\n  puts \"Got Item #{item}\"\nrescue Recurly::Errors::NotFoundError\n  # If the resource was not found, you may want to alert the user or\n  # just return nil\n  puts \"Resource Not Found\"\nend\n"
          },
          {
            "lang": "Java",
            "source": "try {\n    final Item item = client.getItem(itemId);\n    System.out.println(\"Fetched item: \" + item.getCode());\n} catch (NotFoundException e) {\n    // If the resource was not found\n    // we may want to alert the user or just return null\n    System.out.println(\"Resource Not Found: \" + e.getError().getMessage());\n} catch (ApiException e) {\n    // Use ApiException to catch a generic error from the API\n    System.out.println(\"Unexpected Recurly Error: \" + e.getError().getMessage());\n}\n"
          },
          {
            "lang": "PHP",
            "source": "try {\n    $item = $client->getItem($item_id);\n\n    echo 'Got Item:' . PHP_EOL;\n    var_dump($item);\n} catch (\\Recurly\\Errors\\NotFound $e) {\n    // Could not find the resource, you may want to inform the user\n    // or just return a NULL\n    echo 'Could not find resource.' . PHP_EOL;\n    var_dump($e);\n} catch (\\Recurly\\RecurlyError $e) {\n    // Something bad happened... tell the user so that they can fix it?\n    echo 'Some unexpected Recurly error happened. Try again later.' . PHP_EOL;\n}\n"
          },
          {
            "lang": "Go",
            "source": "item, err := client.GetItem(itemID)\nif e, ok := err.(*recurly.Error); ok {\n\tif e.Type == recurly.ErrorTypeNotFound {\n\t\tfmt.Printf(\"Resource not found: %v\", e)\n\t\treturn nil, err\n\t}\n\tfmt.Printf(\"Unexpected Recurly error: %v\", e)\n\treturn nil, err\n}\n\nfmt.Printf(\"Fetched Item: %v\", item.Id)"
          }
        ]
      },
      "put": {
        "tags": [
          "item"
        ],
        "summary": "Update an active item",
        "operationId": "update_item",
        "parameters": [
          {
            "name": "site_id",
            "in": "path",
            "description": "Site ID or subdomain. For ID no prefix is used e.g. `e28zov4fw0v2`. For subdomain use prefix `subdomain-`, e.g. `subdomain-recurly`.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "item_id",
            "in": "path",
            "description": "Item ID or code. For ID no prefix is used e.g. `e28zov4fw0v2`. For code use prefix `code-`, e.g. `code-red`.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ItemUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The updated item.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Item"
                }
              }
            }
          },
          "400": {
            "description": "Bad request, perhaps invalid JSON?",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Incorrect site or item ID.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "422": {
            "description": "Invalid request parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "Node.js",
            "source": "try {\n  const itemUpdate = {\n    name: 'New Item Name',\n    description: 'New Item Description'\n  }\n  const item = await client.updateItem(itemId, itemUpdate)\n  console.log('Updated item: ', item)\n} catch (err) {\n  if (err instanceof recurly.errors.ValidationError) {\n    // If the request was not valid, you may want to tell your user\n    // why. You can find the invalid params and reasons in err.params\n    console.log('Failed validation', err.params)\n  } else {\n    // If we don't know what to do with the err, we should\n    // probably re-raise and let our web framework and logger handle it\n    console.log('Unknown Error: ', err)\n  }\n}\n"
          },
          {
            "lang": "Python",
            "source": "try:\n    item_update = {\n        \"name\": \"New Item Name\",\n        \"description\": \"New Item Description\",\n    }\n    item = client.update_item(item_id, item_update)\n    print(\"Updated Item %s\" % item)\nexcept recurly.errors.ValidationError as e:\n    # If the request was invalid, you may want to tell your user\n    # why. You can find the invalid params and reasons in e.error.params\n    print(\"ValidationError: %s\" % e.error.message)\n    print(e.error.params)\n"
          },
          {
            "lang": ".NET",
            "source": "try\n{\n    var itemReq = new ItemUpdate() {\n        Name = \"New Item Name\",\n        Description = \"New Item Description\",\n    };\n    Item item = client.UpdateItem(itemId, itemReq);\n    Console.WriteLine(item.Name);\n    Console.WriteLine(item.Description);\n}\ncatch (Recurly.Errors.Validation ex)\n{\n    // If the request was not valid, you may want to tell your user\n    // why. You can find the invalid params and reasons in ex.Error.Params\n    Console.WriteLine($\"Failed validation: {ex.Error.Message}\");\n}\ncatch (Recurly.Errors.ApiError ex)\n{\n    // Use ApiError to catch a generic error from the API\n    Console.WriteLine($\"Unexpected Recurly Error: {ex.Error.Message}\");\n}\n"
          },
          {
            "lang": "Ruby",
            "source": "begin\n  item_update = {\n    name: \"New Item Name\",\n    description: \"New Item Description\"\n  }\n  item = @client.update_item(\n    item_id: item_id,\n    body: item_update\n  )\n  puts \"Updated Item #{item}\"\nrescue Recurly::Errors::ValidationError => e\n  # If the request was invalid, you may want to tell your user\n  # why. You can find the invalid params and reasons in e.recurly_error.params\n  puts \"ValidationError: #{e.recurly_error.params}\"\nend\n"
          },
          {
            "lang": "Java",
            "source": "try {\n    final ItemUpdate itemUpdate = new ItemUpdate();\n    itemUpdate.setName(\"New Item Name\");\n    itemUpdate.setDescription(\"New Item Description\");\n\n    final Item item = client.updateItem(itemId, itemUpdate);\n    System.out.println(\"Updated item: \" + item.getCode());\n    System.out.println(item.getName());\n    System.out.println(item.getDescription());\n} catch (ValidationException e) {\n    // If the request was not valid, you may want to tell your user\n    // why. You can find the invalid params and reasons in e.getError().getParams()\n    System.out.println(\"Failed validation: \" + e.getError().getMessage());\n} catch (ApiException e) {\n    // Use ApiException to catch a generic error from the API\n    System.out.println(\"Unexpected Recurly Error: \" + e.getError().getMessage());\n}\n"
          },
          {
            "lang": "PHP",
            "source": "try {\n    $item_update = array(\n        \"name\" => \"Dark Roast Coffee Beans\",\n        \"description\" => \"A special dark roast version.\",\n    );\n    $item = $client->updateItem($item_id, $item_update);\n\n    echo 'Updated Item:' . PHP_EOL;\n    var_dump($item);\n} catch (\\Recurly\\Errors\\Validation $e) {\n    // If the request was not valid, you may want to tell your user\n    // why. You can find the invalid params and reasons in err.params\n    var_dump($e);\n} catch (\\Recurly\\RecurlyError $e) {\n    // If we don't know what to do with the err, we should\n    // probably re-raise and let our web framework and logger handle it\n    var_dump($e);\n}\n"
          },
          {
            "lang": "Go",
            "source": "updateReq := &recurly.ItemUpdate{\n\tName:        recurly.String(\"Pothos Plant\"),\n\tDescription: recurly.String(\"A sturdy houseplant\"),\n}\nitem, err := client.UpdateItem(itemID, updateReq)\nif e, ok := err.(*recurly.Error); ok {\n\tif e.Type == recurly.ErrorTypeValidation {\n\t\tfmt.Printf(\"Failed validation: %v\", e)\n\t\treturn nil, err\n\t}\n\tfmt.Printf(\"Unexpected Recurly error: %v\", e)\n\treturn nil, err\n}\n\nfmt.Printf(\"Updated Item: %v\", item.Id)"
          }
        ]
      },
      "delete": {
        "tags": [
          "item"
        ],
        "summary": "Deactivate an item",
        "description": "Deactivating an item makes it unavailable for new purchases. It will not affect existing line items.",
        "operationId": "deactivate_item",
        "parameters": [
          {
            "name": "site_id",
            "in": "path",
            "description": "Site ID or subdomain. For ID no prefix is used e.g. `e28zov4fw0v2`. For subdomain use prefix `subdomain-`, e.g. `subdomain-recurly`.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "item_id",
            "in": "path",
            "description": "Item ID or code. For ID no prefix is used e.g. `e28zov4fw0v2`. For code use prefix `code-`, e.g. `code-red`.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An item.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Item"
                }
              }
            }
          },
          "422": {
            "description": "Item may already be inactive.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "Node.js",
            "source": "try {\n  const item = await client.deactivateItem(itemId)\n  console.log('Deleted item: ', item.code)\n} catch (err) {\n  if (err && err.type === 'not-found') {\n    // If the request was not found, you may want to alert the user or\n    // just return null\n    console.log('Resource Not Found')\n  }\n  // If we don't know what to do with the err, we should\n  // probably re-raise and let our web framework and logger handle it\n  throw err\n}\n"
          },
          {
            "lang": "Python",
            "source": "try:\n    item = client.deactivate_item(item_id)\n    print(\"Deactivated Item %s\" % item)\nexcept recurly.errors.NotFoundError:\n    # If the resource was not found, you may want to alert the user or\n    # just return nil\n    print(\"Resource Not Found\")\n"
          },
          {
            "lang": ".NET",
            "source": "try\n{\n    Item item = client.DeactivateItem(itemId);\n    Console.WriteLine($\"Deactivated item {item.Code}\");\n}\ncatch (Recurly.Errors.Validation ex)\n{\n    // If the request was not valid, you may want to tell your user\n    // why. You can find the invalid params and reasons in ex.Error.Params\n    Console.WriteLine($\"Failed validation: {ex.Error.Message}\");\n}\ncatch (Recurly.Errors.ApiError ex)\n{\n    // Use ApiError to catch a generic error from the API\n    Console.WriteLine($\"Unexpected Recurly Error: {ex.Error.Message}\");\n}\n"
          },
          {
            "lang": "Ruby",
            "source": "begin\n  item = @client.deactivate_item(item_id: item_id)\n  puts \"Deactivated Item #{item}\"\nrescue Recurly::Errors::NotFoundError\n  # If the resource was not found, you may want to alert the user or\n  # just return nil\n  puts \"Resource Not Found\"\nend\n"
          },
          {
            "lang": "Java",
            "source": "try {\n    Item item = client.deactivateItem(itemId);\n    System.out.println(\"deactivated item \" + item.getCode());\n} catch (ValidationException e) {\n    // If the request was not valid, you may want to tell your user\n    // why. You can find the invalid params and reasons in e.getError().getParams()\n    System.out.println(\"Failed validation: \" + e.getError().getMessage());\n} catch (ApiException e) {\n    // Use ApiException to catch a generic error from the API\n    System.out.println(\"Unexpected Recurly Error: \" + e.getError().getMessage());\n}\n"
          },
          {
            "lang": "PHP",
            "source": "try {\n    $item = $client->deactivateItem($item_id);\n\n    echo 'Deactivated Item:' . PHP_EOL;\n    var_dump($item);\n} catch (\\Recurly\\Errors\\NotFound $e) {\n    // Could not find the resource, you may want to inform the user\n    // or just return a NULL\n    echo 'Could not find resource.' . PHP_EOL;\n    var_dump($e);\n} catch (\\Recurly\\RecurlyError $e) {\n    // Something bad happened... tell the user so that they can fix it?\n    echo 'Some unexpected Recurly error happened. Try again later.' . PHP_EOL;\n}\n"
          },
          {
            "lang": "Go",
            "source": "deactivatedItem, err := client.DeactivateItem(itemID)\nif e, ok := err.(*recurly.Error); ok {\n\tif e.Type == recurly.ErrorTypeNotFound {\n\t\tfmt.Printf(\"Resource not found: %v\", e)\n\t\treturn nil, err\n\t}\n\tfmt.Printf(\"Unexpected Recurly error: %v\", e)\n\treturn nil, err\n}\nfmt.Printf(\"Item deactivated: %s\", deactivatedItem.Code)"
          }
        ]
      }
    },
    "/sites/{site_id}/items/{item_id}/reactivate": {
      "put": {
        "tags": [
          "item"
        ],
        "summary": "Reactivate an inactive item",
        "description": "Reactivating an item makes it available for new purchases. It will not affect existing line items.",
        "operationId": "reactivate_item",
        "parameters": [
          {
            "name": "site_id",
            "in": "path",
            "description": "Site ID or subdomain. For ID no prefix is used e.g. `e28zov4fw0v2`. For subdomain use prefix `subdomain-`, e.g. `subdomain-recurly`.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "item_id",
            "in": "path",
            "description": "Item ID or code. For ID no prefix is used e.g. `e28zov4fw0v2`. For code use prefix `code-`, e.g. `code-red`.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An item.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Item"
                }
              }
            }
          },
          "404": {
            "description": "Incorrect site or item ID.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "422": {
            "description": "Item is already active.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "Node.js",
            "source": "try {\n  const item = await client.reactivateItem(itemId)\n  console.log('Reactivated item: ', item.code)\n} catch (err) {\n  if (err && err.type === 'not_found') {\n    // If the request was not found, you may want to alert the user or\n    // just return null\n    console.log('Resource Not Found')\n  }\n  // If we don't know what to do with the err, we should\n  // probably re-raise and let our web framework and logger handle it\n  throw err\n}\n"
          },
          {
            "lang": "Python",
            "source": "try:\n    item = client.reactivate_item(item_id)\n    print(\"Reactivated Item %s\" % item)\nexcept recurly.errors.NotFoundError:\n    # If the resource was not found, you may want to alert the user or\n    # just return nil\n    print(\"Resource Not Found\")\n"
          },
          {
            "lang": ".NET",
            "source": "try\n{\n    Item item = client.ReactivateItem(itemId);\n    Console.WriteLine($\"Reactivated item {item.Code}\");\n}\ncatch (Recurly.Errors.Validation ex)\n{\n    // If the request was not valid, you may want to tell your user\n    // why. You can find the invalid params and reasons in ex.Error.Params\n    Console.WriteLine($\"Failed validation: {ex.Error.Message}\");\n}\ncatch (Recurly.Errors.ApiError ex)\n{\n    // Use ApiError to catch a generic error from the API\n    Console.WriteLine($\"Unexpected Recurly Error: {ex.Error.Message}\");\n}\n"
          },
          {
            "lang": "Ruby",
            "source": "begin\n  item = @client.reactivate_item(item_id: item_id)\n  puts \"Reactivated Item #{item}\"\nrescue Recurly::Errors::NotFoundError\n  # If the resource was not found, you may want to alert the user or\n  # just return nil\n  puts \"Resource Not Found\"\nend\n"
          },
          {
            "lang": "Java",
            "source": "try {\n    final Item item = client.reactivateItem(itemId);\n    System.out.println(\"Reactivated item: \" + item.getCode());\n} catch (ValidationException e) {\n    // If the request was not valid, you may want to tell your user\n    // why. You can find the invalid params and reasons in e.getError().getParams()\n    System.out.println(\"Failed validation: \" + e.getError().getMessage());\n} catch (ApiException e) {\n    // Use ApiException to catch a generic error from the API\n    System.out.println(\"Unexpected Recurly Error: \" + e.getError().getMessage());\n}\n"
          },
          {
            "lang": "PHP",
            "source": "try {\n    $item = $client->reactivateItem($item_id);\n\n    echo 'Reactivate Item:' . PHP_EOL;\n    var_dump($item);\n} catch (\\Recurly\\Errors\\NotFound $e) {\n    // Could not find the resource, you may want to inform the user\n    // or just return a NULL\n    echo 'Could not find resource.' . PHP_EOL;\n    var_dump($e);\n} catch (\\Recurly\\RecurlyError $e) {\n    // Something bad happened... tell the user so that they can fix it?\n    echo 'Some unexpected Recurly error happened. Try again later.' . PHP_EOL;\n}\n"
          },
          {
            "lang": "Go",
            "source": "item, err := client.ReactivateItem(itemID)\nif e, ok := err.(*recurly.Error); ok {\n\tif e.Type == recurly.ErrorTypeValidation {\n\t\tfmt.Printf(\"Failed validation: %v\", e)\n\t\treturn nil, err\n\t}\n\tfmt.Printf(\"Unexpected Recurly error: %v\", e)\n\treturn nil, err\n}\nfmt.Printf(\"Reactivated Item: %s\", item.Id)"
          }
        ]
      }
    },
    "/sites/{site_id}/invoices": {
      "get": {
        "tags": [
          "invoice"
        ],
        "summary": "List a site's invoices",
        "operationId": "list_invoices",
        "parameters": [
          {
            "name": "site_id",
            "in": "path",
            "description": "Site ID or subdomain. For ID no prefix is used e.g. `e28zov4fw0v2`. For subdomain use prefix `subdomain-`, e.g. `subdomain-recurly`.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ids",
            "in": "query",
            "description": "Filter results by their IDs. Up to 200 IDs can be passed at once using\ncommas as separators, e.g. `ids=h1at4d57xlmy,gyqgg0d3v9n1,jrsm5b4yefg6`.\n\n**Important notes:**\n\n* The `ids` parameter cannot be used with any other ordering or filtering\n  parameters (`limit`, `order`, `sort`, `begin_time`, `end_time`, etc)\n* Invalid or unknown IDs will be ignored, so you should check that the\n  results correspond to your request.\n* Records are returned in an arbitrary order. Since results are all\n  returned at once you can sort the records yourself.\n",
            "required": false,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit number of records 1-200.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maximum": 200,
              "minimum": 1,
              "type": "integer",
              "default": 20
            }
          },
          {
            "name": "order",
            "in": "query",
            "description": "Sort order.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "default": "desc",
              "enum": [
                "asc",
                "desc"
              ]
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort field. You *really* only want to sort by `updated_at` in ascending\norder. In descending order updated records will move behind the cursor and could\nprevent some records from being returned.\n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "default": "created_at",
              "enum": [
                "created_at",
                "updated_at"
              ]
            }
          },
          {
            "name": "begin_time",
            "in": "query",
            "description": "Filter by begin_time when `sort=created_at` or `sort=updated_at`.\n**Note:** this value is an ISO8601 timestamp. A partial timestamp that does not include a time zone will default to UTC.\n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "end_time",
            "in": "query",
            "description": "Filter by end_time when `sort=created_at` or `sort=updated_at`.\n**Note:** this value is an ISO8601 timestamp. A partial timestamp that does not include a time zone will default to UTC.\n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Filter by type when:\n- `type=charge`, only charge invoices will be returned.\n- `type=credit`, only credit invoices will be returned.\n- `type=non-legacy`, only charge and credit invoices will be returned.\n- `type=legacy`, only legacy invoices will be returned.\n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": [
                "charge",
                "credit",
                "non-legacy",
                "legacy"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of the site's invoices.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvoiceList"
                }
              }
            }
          },
          "400": {
            "description": "Invalid or unpermitted parameter.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Incorrect site ID.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "Node.js",
            "source": "const invoices = client.listInvoices({ limit: 200 })\n\nfor await (const invoice of invoices.each()) {\n  console.log(invoice.number)\n}\n"
          },
          {
            "lang": "Python",
            "source": "invoices = client.list_invoices(limit=200).items()\nfor invoice in invoices:\n    print(invoice.number)\n"
          },
          {
            "lang": ".NET",
            "source": "var invoices = client.ListInvoices(limit: 200);\nforeach(Invoice invoice in invoices)\n{\n    Console.WriteLine(invoice.Number);\n}\n"
          },
          {
            "lang": "Ruby",
            "source": "invoices = @client.list_invoices(limit: 200)\ninvoices.each do |invoice|\n  puts \"Invoice: #{invoice.number}\"\nend\n"
          },
          {
            "lang": "Java",
            "source": "QueryParams params = new QueryParams();\nparams.setLimit(200); // Pull 200 records at a time\nfinal Pager<Invoice> invoices = client.listInvoices(params);\n\nfor (Invoice invoice : invoices) {\n    System.out.println(invoice.getNumber());\n}\n"
          },
          {
            "lang": "PHP",
            "source": "$params = ['limit' => '200'];\n$invoices = $client->listInvoices($params);\n\nforeach($invoices as $invoice) {\n  echo 'Invoice: ' . $invoice->getNumber() . PHP_EOL;\n}\n"
          },
          {
            "lang": "Go",
            "source": "listParams := &recurly.ListInvoicesParams{\n\tSort:  recurly.String(\"created_at\"),\n\tOrder: recurly.String(\"desc\"),\n\tLimit: recurly.Int(200),\n}\ninvoices := client.ListInvoices(listParams)\n\nfor invoices.HasMore {\n\terr := invoices.Fetch()\n\tif e, ok := err.(*recurly.Error); ok {\n\t\tfmt.Printf(\"Failed to retrieve next page: %v\", e)\n\t\tbreak\n\t}\n\tfor i, invoice := range invoices.Data {\n\t\tfmt.Printf(\"Invoice %3d: %s, %s\\n\",\n\t\t\ti,\n\t\t\tinvoice.Id,\n\t\t\tinvoice.Number,\n\t\t)\n\t}\n}"
          }
        ]
      }
    },
    "/sites/{site_id}/invoices/{invoice_id}": {
      "get": {
        "tags": [
          "invoice"
        ],
        "summary": "Fetch an invoice",
        "operationId": "get_invoice",
        "parameters": [
          {
            "name": "site_id",
            "in": "path",
            "description": "Site ID or subdomain. For ID no prefix is used e.g. `e28zov4fw0v2`. For subdomain use prefix `subdomain-`, e.g. `subdomain-recurly`.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "invoice_id",
            "in": "path",
            "description": "Invoice ID or number. For ID no prefix is used e.g. `e28zov4fw0v2`. For number use prefix `number-`, e.g. `number-1000`.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An invoice.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Invoice"
                }
              }
            }
          },
          "404": {
            "description": "Incorrect site or invoice ID.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "Node.js",
            "source": "try {\n  const invoice = await client.getInvoice(invoiceId)\n  console.log('Fetched Invoice: ', invoice.number)\n} catch (err) {\n  if (err instanceof recurly.errors.NotFoundError) {\n    // If the request was not found, you may want to alert the user or\n    // just return null\n    console.log('Resource Not Found')\n  } else {\n    // If we don't know what to do with the err, we should\n    // probably re-raise and let our web framework and logger handle it\n    console.log('Unknown Error: ', err)\n  }\n}\n"
          },
          {
            "lang": "Python",
            "source": "try:\n    invoice = client.get_invoice(invoice_id)\n    print(\"Got Invoice %s\" % invoice)\nexcept recurly.errors.NotFoundError:\n    # If the resource was not found, you may want to alert the user or\n    # just return nil\n    print(\"Resource Not Found\")\n"
          },
          {
            "lang": ".NET",
            "source": "try\n{\n    Invoice invoice = client.GetInvoice(invoiceId);\n    Console.WriteLine($\"Fetched invoice #{invoice.Number}\");\n}\ncatch (Recurly.Errors.NotFound ex)\n{\n    // If the resource was not found\n    // we may want to alert the user or just return null\n    Console.WriteLine($\"Resource Not Found: {ex.Error.Message}\");\n}\ncatch (Recurly.Errors.ApiError ex)\n{\n    // Use ApiError to catch a generic error from the API\n    Console.WriteLine($\"Unexpected Recurly Error: {ex.Error.Message}\");\n}\n"
          },
          {
            "lang": "Ruby",
            "source": "begin\n  invoice = @client.get_invoice(invoice_id: invoice_id)\n  puts \"Got invoice #{invoice}\"\nrescue Recurly::Errors::NotFoundError\n  # If the resource was not found, you may want to alert the user or\n  # just return nil\n  puts \"Resource Not Found\"\nend\n"
          },
          {
            "lang": "Java",
            "source": "try {\n    final Invoice invoice = client.getInvoice(invoiceId);\n    System.out.println(\"Fetched invoice \" + invoice.getNumber());\n} catch (NotFoundException e) {\n    // If the resource was not found\n    // we may want to alert the user or just return null\n    System.out.println(\"Resource Not Found: \" + e.getError().getMessage());\n} catch (ApiException e) {\n    // Use ApiException to catch a generic error from the API\n    System.out.println(\"Unexpected Recurly Error: \" + e.getError().getMessage());\n}\n"
          },
          {
            "lang": "PHP",
            "source": "try {\n    $invoice = $client->getInvoice($invoice_id);\n\n    echo 'Got Invoice:' . PHP_EOL;\n    var_dump($invoice);\n} catch (\\Recurly\\Errors\\NotFound $e) {\n    // Could not find the resource, you may want to inform the user\n    // or just return a NULL\n    echo 'Could not find resource.' . PHP_EOL;\n    var_dump($e);\n} catch (\\Recurly\\RecurlyError $e) {\n    // Something bad happened... tell the user so that they can fix it?\n    echo 'Some unexpected Recurly error happened. Try again later.' . PHP_EOL;\n}\n"
          },
          {
            "lang": "Go",
            "source": "invoice, err := client.GetInvoice(invoiceID)\nif e, ok := err.(*recurly.Error); ok {\n\tif e.Type == recurly.ErrorTypeNotFound {\n\t\tfmt.Printf(\"Resource not found: %v\", e)\n\t\treturn nil, err\n\t}\n\tfmt.Printf(\"Unexpected Recurly error: %v\", e)\n\treturn nil, err\n}\n\nfmt.Printf(\"Fetched Invoice: %v\", invoice)"
          }
        ]
      },
      "put": {
        "tags": [
          "invoice"
        ],
        "summary": "Update an invoice",
        "operationId": "put_invoice",
        "parameters": [
          {
            "name": "site_id",
            "in": "path",
            "description": "Site ID or subdomain. For ID no prefix is used e.g. `e28zov4fw0v2`. For subdomain use prefix `subdomain-`, e.g. `subdomain-recurly`.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "invoice_id",
            "in": "path",
            "description": "Invoice ID or number. For ID no prefix is used e.g. `e28zov4fw0v2`. For number use prefix `number-`, e.g. `number-1000`.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InvoiceUpdatable"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "An invoice.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Invoice"
                }
              }
            }
          },
          "404": {
            "description": "Incorrect site or invoice ID.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "422": {
            "description": "A validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "Node.js",
            "source": "try {\n  const invoiceUpdate = {\n    customerNotes: \"New notes\",\n    termsAndConditions: \"New terms and conditions\"\n  }\n\n  const invoice = await client.putInvoice(invoiceId, invoiceUpdate)\n  console.log('Edited invoice: ', invoice.number)\n} catch(err) {\n\n  if (err instanceof recurly.errors.ValidationError) {\n    // If the request was not valid, you may want to tell your user\n    // why. You can find the invalid params and reasons in err.params\n    console.log('Failed validation', err.params)\n  } else {\n    // If we don't know what to do with the err, we should\n    // probably re-raise and let our web framework and logger handle it\n    console.log('Unknown Error: ', err)\n  }\n}\n"
          },
          {
            "lang": "Python",
            "source": "try:\n    invoice_update = {\n      \"customer_notes\": \"New Notes\",\n      \"terms_and_conditions\": \"New Terms and Conditions\",\n    }\n    invoice = client.put_invoice(invoice_id, invoice_update)\n    print(\"Updated Invoice %s\" % invoice.id)\nexcept recurly.errors.NotFoundError:\n    # If the resource was not found, you may want to alert the user or\n    # just return nil\n    print(\"Resource Not Found\")\n"
          },
          {
            "lang": ".NET",
            "source": "try\n{\n    var invoiceReq = new InvoiceUpdatable()\n    {\n        CustomerNotes = \"New Notes\",\n        TermsAndConditions = \"New Terms and Conditions\"\n    };\n    Invoice invoice = client.PutInvoice(invoiceId, invoiceReq);\n    Console.WriteLine($\"Edited invoice #{invoice.Number}\");\n}\ncatch (Recurly.Errors.Validation ex)\n{\n    // If the request was not valid, you may want to tell your user\n    // why. You can find the invalid params and reasons in ex.Error.Params\n    Console.WriteLine($\"Failed validation: {ex.Error.Message}\");\n}\ncatch (Recurly.Errors.ApiError ex)\n{\n    // Use ApiError to catch a generic error from the API\n    Console.WriteLine($\"Unexpected Recurly Error: {ex.Error.Message}\");\n}\n"
          },
          {
            "lang": "Ruby",
            "source": "begin\n  invoice_update = {\n    customer_notes: \"New Notes\",\n    terms_and_conditions: \"New Terms and Conditions\"\n  }\n  invoice = @client.put_invoice(invoice_id: invoice_id, body: invoice_update)\n  puts \"Updated invoice #{invoice}\"\nrescue Recurly::Errors::NotFoundError\n  # If the resource was not found, you may want to alert the user or\n  # just return nil\n  puts \"Resource Not Found\"\nend\n"
          },
          {
            "lang": "Java",
            "source": "try {\n    final InvoiceUpdatable invoiceUpdate = new InvoiceUpdatable();\n    invoiceUpdate.setCustomerNotes(\"New notes\");\n    invoiceUpdate.setTermsAndConditions(\"New terms and conditions\");\n\n    final Invoice invoice = client.putInvoice(invoiceId, invoiceUpdate);\n    System.out.println(\"Edited invoice \" + invoice.getNumber());\n} catch (ValidationException e) {\n    // If the request was not valid, you may want to tell your user\n    // why. You can find the invalid params and reasons in e.getError().getParams()\n    System.out.println(\"Failed validation: \" + e.getError().getMessage());\n} catch (ApiException e) {\n    // Use ApiException to catch a generic error from the API\n    System.out.println(\"Unexpected Recurly Error: \" + e.getError().getMessage());\n}\n"
          },
          {
            "lang": "PHP",
            "source": "try {\n    $invoice_update =  array(\n      \"customer_notes\" => \"New Notes\",\n      \"terms_and_conditions\" => \"New terms and conditions\",\n    );\n    $invoice = $client->putInvoice($invoice_id, $invoice_update);\n\n    echo 'Updated Invoice:' . PHP_EOL;\n    var_dump($invoice);\n} catch (\\Recurly\\Errors\\Validation $e) {\n    // If the request was not valid, you may want to tell your user\n    // why. You can find the invalid params and reasons in err.params\n    var_dump($e);\n} catch (\\Recurly\\RecurlyError $e) {\n    // If we don't know what to do with the err, we should\n    // probably re-raise and let our web framework and logger handle it\n    var_dump($e);\n}\n"
          },
          {
            "lang": "Go",
            "source": "updateReq := &recurly.InvoiceUpdatable{\n\tCustomerNotes:      recurly.String(\"New Notes\"),\n\tTermsAndConditions: recurly.String(\"New Terms and Conditions\"),\n}\ninvoice, err := client.PutInvoice(invoiceID, updateReq)\nif e, ok := err.(*recurly.Error); ok {\n\tif e.Type == recurly.ErrorTypeValidation {\n\t\tfmt.Printf(\"Failed validation: %v\", e)\n\t\treturn nil, err\n\t}\n\tfmt.Printf(\"Unexpected Recurly error: %v\", e)\n\treturn nil, err\n}\nfmt.Printf(\"Updated Invoice: %s\", invoice.Id)"
          }
        ]
      }
    },
    "/sites/{site_id}/invoices/{invoice_id}.pdf": {
      "get": {
        "tags": [
          "invoice"
        ],
        "summary": "Fetch an invoice as a PDF",
        "operationId": "get_invoice_pdf",
        "parameters": [
          {
            "name": "site_id",
            "in": "path",
            "description": "Site ID or subdomain. For ID no prefix is used e.g. `e28zov4fw0v2`. For subdomain use prefix `subdomain-`, e.g. `subdomain-recurly`.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "invoice_id",
            "in": "path",
            "description": "Invoice ID or number. For ID no prefix is used e.g. `e28zov4fw0v2`. For number use prefix `number-`, e.g. `number-1000`.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An invoice as a PDF.",
            "content": {
              "application/pdf": {
                "schema": {
                  "$ref": "#/components/schemas/BinaryFile"
                }
              }
            }
          },
          "404": {
            "description": "Incorrect site or invoice ID.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "Node.js",
            "source": "try {\n  const invoice = await client.getInvoicePdf(invoiceId)\n  console.log('Fetched Invoice: ', invoice)\n  const filename = `${downloadDirectory}/nodeinvoice-${invoiceId}.pdf`\n  await fs.writeFile(filename, invoice.data, 'binary', (err) => {\n    // throws an error, you could also catch it here\n    if (err) throw err;\n\n    // success case, the file was saved\n    console.log('Saved Invoice PDF to', filename)\n  })\n} catch (err) {\n  if (err instanceof recurly.errors.NotFoundError) {\n    // If the request was not found, you may want to alert the user or\n    // just return null\n    console.log('Resource Not Found')\n  } else {\n    // If we don't know what to do with the err, we should\n    // probably re-raise and let our web framework and logger handle it\n    console.log('Unknown Error: ', err)\n  }\n}\n"
          },
          {
            "lang": "Python",
            "source": "try:\n    invoice = client.get_invoice_pdf(invoice_id)\n    print(\"Got Invoice %s\" % invoice)\n    filename = \"%s/pythoninvoice-%s.pdf\" % (download_directory, invoice_id)\n    with open(filename, 'wb') as file:\n        file.write(invoice.data)\n        print(\"Saved Invoice PDF to %s\" % filename)\nexcept recurly.errors.NotFoundError:\n    # If the resource was not found, you may want to alert the user or\n    # just return nil\n    print(\"Resource Not Found\")\n"
          },
          {
            "lang": ".NET",
            "source": "try\n{\n    BinaryFile invoice = client.GetInvoicePdf(invoiceId);\n    string filename = $\"{downloadDirectory}/dotnetinvoice-{invoiceId}.pdf\";\n    System.IO.File.WriteAllBytes(filename, invoice.Data);\n    Console.WriteLine($\"Saved Invoice PDF to {filename}\");\n}\ncatch (Recurly.Errors.NotFound ex)\n{\n    // If the resource was not found\n    // we may want to alert the user or just return null\n    Console.WriteLine($\"Resource Not Found: {ex.Error.Message}\");\n}\ncatch (Recurly.Errors.ApiError ex)\n{\n    // Use ApiError to catch a generic error from the API\n    Console.WriteLine($\"Unexpected Recurly Error: {ex.Error.Message}\");\n}\n"
          },
          {
            "lang": "Ruby",
            "source": "begin\n  invoice = @client.get_invoice_pdf(invoice_id: invoice_id)\n  puts \"Got invoice #{invoice}\"\n  filename = \"#{download_directory}/rubyinvoice-#{invoice_id}.pdf\"\n  IO.write(filename, invoice.data)\n  puts \"Saved Invoice PDF to #{filename}\"\nrescue Recurly::Errors::NotFoundError\n  # If the resource was not found, you may want to alert the user or\n  # just return nil\n  puts \"Resource Not Found\"\nend\n"
          },
          {
            "lang": "Java",
            "source": "try {\n    final BinaryFile invoice = client.getInvoicePdf(invoiceId);\n    //System.out.println(\"Fetched invoice \" + invoice.getData());\n    String filename = downloadDirectory + \"/javainvoice-\" + invoiceId + \".pdf\";\n\n    FileOutputStream fos = new FileOutputStream(filename);\n    fos.write(invoice.getData());\n    fos.close();\n    System.out.println(\"Saved Invoice PDF to \" + filename);\n} catch (NotFoundException e) {\n    // If the resource was not found\n    // we may want to alert the user or just return null\n    System.out.println(\"Resource Not Found: \" + e.getError().getMessage());\n} catch (ApiException e) {\n    // Use ApiException to catch a generic error from the API\n    System.out.println(\"Unexpected Recurly Error: \" + e.getError().getMessage());\n} catch (java.io.IOException e) {\n    System.out.println(\"Unexpected File Writing Error: \" + e.toString());\n}\n"
          },
          {
            "lang": "PHP",
            "source": "try {\n    $invoice = $client->getInvoicePdf($invoice_id);\n    echo 'Got Invoice PDF:' . PHP_EOL;\n    var_dump($invoice);\n    $invoice_fp = fopen(\"php-invoice-\" . $invoice_id . \".pdf\", \"w\");\n    fwrite($invoice_fp, $invoice->getData());\n    fclose($invoice_fp);\n} catch (\\Recurly\\Errors\\NotFound $e) {\n    // Could not find the resource, you may want to inform the user\n    // or just return a NULL\n    echo 'Could not find resource.' . PHP_EOL;\n    var_dump($e);\n} catch (\\Recurly\\RecurlyError $e) {\n    // Something bad happened... tell the user so that they can fix it?\n    echo 'Some unexpected Recurly error happened. Try again later.' . PHP_EOL;\n}\n"
          }
        ]
      }
    },
    "/sites/{site_id}/invoices/{invoice_id}/collect": {
      "put": {
        "tags": [
          "invoice"
        ],
        "summary": "Collect a pending or past due, automatic invoice",
        "description": "Force a collection attempt using the stored billing information. This will trigger a transaction outside of Recurly's normal retry logic.",
        "operationId": "collect_invoice",
        "parameters": [
          {
            "name": "site_id",
            "in": "path",
            "description": "Site ID or subdomain. For ID no prefix is used e.g. `e28zov4fw0v2`. For subdomain use prefix `subdomain-`, e.g. `subdomain-recurly`.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "invoice_id",
            "in": "path",
            "description": "Invoice ID or number. For ID no prefix is used e.g. `e28zov4fw0v2`. For number use prefix `number-`, e.g. `number-1000`.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InvoiceCollect"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "The updated invoice.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Invoice"
                }
              }
            }
          },
          "404": {
            "description": "Incorrect site or invoice ID.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "422": {
            "description": "Tried collecting a manual or closed invoice, or there was an error processing the transaction.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMayHaveTransaction"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "Node.js",
            "source": "try {\n  const invoice = await client.collectInvoice(invoiceId)\n  console.log('Collected invoice: ', invoice.number)\n} catch (err) {\n  if (err instanceof recurly.errors.ValidationError) {\n    // If the request was not valid, you may want to tell your user\n    // why. You can find the invalid params and reasons in err.params\n    console.log('Failed validation', err.params)\n  } else {\n    // If we don't know what to do with the err, we should\n    // probably re-raise and let our web framework and logger handle it\n    console.log('Unknown Error: ', err)\n  }\n}\n"
          },
          {
            "lang": "Python",
            "source": "try:\n    invoice = client.collect_invoice(invoice_id)\n    print(\"Collected Invoice %s\" % invoice)\nexcept recurly.errors.NotFoundError as e:\n    print(\"Invoice not found\")\n"
          },
          {
            "lang": ".NET",
            "source": "try\n{\n    Invoice invoice = client.CollectInvoice(invoiceId);\n    Console.WriteLine($\"Collected invoice #{invoice.Number}\");\n}\ncatch (Recurly.Errors.Validation ex)\n{\n    // If the request was not valid, you may want to tell your user\n    // why. You can find the invalid params and reasons in ex.Error.Params\n    Console.WriteLine($\"Failed validation: {ex.Error.Message}\");\n}\ncatch (Recurly.Errors.ApiError ex)\n{\n    // Use ApiError to catch a generic error from the API\n    Console.WriteLine($\"Unexpected Recurly Error: {ex.Error.Message}\");\n}\n"
          },
          {
            "lang": "Ruby",
            "source": "begin\n  invoice = @client.collect_invoice(invoice_id: invoice_id)\n  puts \"Collected invoice #{invoice}\"\nrescue Recurly::Errors::NotFoundError\n  # If the resource was not found, you may want to alert the user or\n  # just return nil\n  puts \"Resource Not Found\"\nend\n"
          },
          {
            "lang": "Java",
            "source": "try {\n    final Invoice invoice = client.collectInvoice(invoiceId);\n    System.out.println(\"Collected invoice: \" + invoice.getNumber());\n} catch (ValidationException e) {\n    // If the request was not valid, you may want to tell your user\n    // why. You can find the invalid params and reasons in e.getError().getParams()\n    System.out.println(\"Failed validation: \" + e.getError().getMessage());\n} catch (ApiException e) {\n    // Use ApiException to catch a generic error from the API\n    System.out.println(\"Unexpected Recurly Error: \" + e.getError().getMessage());\n}\n"
          },
          {
            "lang": "PHP",
            "source": "try {\n    $invoice = $client->collectInvoice($invoice_id);\n\n    echo 'Collected Invoice:' . PHP_EOL;\n    var_dump($invoice);\n} catch (\\Recurly\\Errors\\Validation $e) {\n    // If the request was not valid, you may want to tell your user\n    // why. You can find the invalid params and reasons in err.params\n    var_dump($e);\n} catch (\\Recurly\\RecurlyError $e) {\n    // If we don't know what to do with the err, we should\n    // probably re-raise and let our web framework and logger handle it\n    var_dump($e);\n}\n"
          },
          {
            "lang": "Go",
            "source": "collectInvoiceParams := &recurly.CollectInvoiceParams{\n\tBody: &recurly.InvoiceCollect{\n\t\tTransactionType: recurly.String(\"moto\"),\n\t},\n}\n\ncollectedInvoice, err := client.CollectInvoice(invoiceID, collectInvoiceParams)\nif e, ok := err.(*recurly.Error); ok {\n\tif e.Type == recurly.ErrorTypeValidation {\n\t\tfmt.Printf(\"Failed validation: %v\", e)\n\t\treturn nil, err\n\t}\n\tfmt.Printf(\"Unexpected Recurly error: %v\", e)\n\treturn nil, err\n}\nfmt.Printf(\"Collected Invoice: %v\", collectedInvoice)"
          }
        ]
      }
    },
    "/sites/{site_id}/invoices/{invoice_id}/mark_failed": {
      "put": {
        "tags": [
          "invoice"
        ],
        "summary": "Mark an open invoice as failed",
        "description": "Indicates that the invoice was not successfully paid for and that collection attempts should stop. This functionality is mostly used to halt the dunning procedures for an invoice.\n\nOnly invoices with the `pending`, `processing` or `past_due` states can be marked as failed.\n",
        "operationId": "fail_invoice",
        "parameters": [
          {
            "name": "site_id",
            "in": "path",
            "description": "Site ID or subdomain. For ID no prefix is used e.g. `e28zov4fw0v2`. For subdomain use prefix `subdomain-`, e.g. `subdomain-recurly`.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "invoice_id",
            "in": "path",
            "description": "Invoice ID or number. For ID no prefix is used e.g. `e28zov4fw0v2`. For number use prefix `number-`, e.g. `number-1000`.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The updated invoice.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Invoice"
                }
              }
            }
          },
          "404": {
            "description": "Incorrect site or invoice ID.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "422": {
            "description": "Tried marking a closed (successful or failed) invoice as failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "Node.js",
            "source": "try {\n  const invoice = await client.failInvoice(invoiceId)\n  console.log('Failed invoice: ', invoice.number)\n} catch (err) {\n  if (err instanceof recurly.errors.ValidationError) {\n    // If the request was not valid, you may want to tell your user\n    // why. You can find the invalid params and reasons in err.params\n    console.log('Failed validation', err.params)\n  } else {\n    // If we don't know what to do with the err, we should\n    // probably re-raise and let our web framework and logger handle it\n    console.log('Unknown Error: ', err)\n  }\n}\n"
          },
          {
            "lang": "Python",
            "source": "try:\n    invoice = client.fail_invoice(invoice_id)\n    print(\"Failed Invoice %s\" % invoice.id)\nexcept recurly.errors.NotFoundError:\n    # If the resource was not found, you may want to alert the user or\n    # just return nil\n    print(\"Resource Not Found\")\n"
          },
          {
            "lang": ".NET",
            "source": "try\n{\n    Invoice invoice = client.FailInvoice(invoiceId);\n    Console.WriteLine($\"Failed invoice #{invoice.Number}\");\n}\ncatch (Recurly.Errors.Validation ex)\n{\n    // If the request was not valid, you may want to tell your user\n    // why. You can find the invalid params and reasons in ex.Error.Params\n    Console.WriteLine($\"Failed validation: {ex.Error.Message}\");\n}\ncatch (Recurly.Errors.ApiError ex)\n{\n    // Use ApiError to catch a generic error from the API\n    Console.WriteLine($\"Unexpected Recurly Error: {ex.Error.Message}\");\n}\n"
          },
          {
            "lang": "Ruby",
            "source": "begin\n  invoice = @client.fail_invoice(invoice_id: invoice_id)\n  puts \"Failed invoice #{invoice}\"\nrescue Recurly::Errors::NotFoundError\n  # If the resource was not found, you may want to alert the user or\n  # just return nil\n  puts \"Resource Not Found\"\nend\n"
          },
          {
            "lang": "Java",
            "source": "try {\n    final Invoice invoice = client.failInvoice(invoiceId);\n    System.out.println(\"Failed invoice: \" + invoice.getNumber());\n} catch (ValidationException e) {\n    // If the request was not valid, you may want to tell your user\n    // why. You can find the invalid params and reasons in e.getError().getParams()\n    System.out.println(\"Failed validation: \" + e.getError().getMessage());\n} catch (ApiException e) {\n    // Use ApiException to catch a generic error from the API\n    System.out.println(\"Unexpected Recurly Error: \" + e.getError().getMessage());\n}\n"
          },
          {
            "lang": "PHP",
            "source": "try {\n    $invoice = $client->failInvoice($invoice_id);\n\n    echo 'Failed Invoice:' . PHP_EOL;\n    var_dump($invoice);\n} catch (\\Recurly\\Errors\\NotFound $e) {\n    // Could not find the resource, you may want to inform the user\n    // or just return a NULL\n    echo 'Could not find resource.' . PHP_EOL;\n    var_dump($e);\n} catch (\\Recurly\\RecurlyError $e) {\n    // Something bad happened... tell the user so that they can fix it?\n    echo 'Some unexpected Recurly error happened. Try again later.' . PHP_EOL;\n}\n"
          },
          {
            "lang": "Go",
            "source": "invoice, err := client.FailInvoice(invoiceID)\nif e, ok := err.(*recurly.Error); ok {\n\tif e.Type == recurly.ErrorTypeValidation {\n\t\tfmt.Printf(\"Failed validation: %v\", e)\n\t\treturn nil, err\n\t}\n\tfmt.Printf(\"Unexpected Recurly error: %v\", e)\n\treturn nil, err\n}\nfmt.Printf(\"Invoice failed: %v\", invoice)"
          }
        ]
      }
    },
    "/sites/{site_id}/invoices/{invoice_id}/mark_successful": {
      "put": {
        "tags": [
          "invoice"
        ],
        "summary": "Mark an open invoice as successful",
        "description": "Indicates that the invoice was successfully paid for and that automated collection attempts should stop - this functionality is typically used to indicate that payment was received via another method and that revenue should be recognized.\n\nOnly invoices with the `pending`, `processing`, `past_due` or `failed` states can be marked as paid.\n",
        "operationId": "mark_invoice_successful",
        "parameters": [
          {
            "name": "site_id",
            "in": "path",
            "description": "Site ID or subdomain. For ID no prefix is used e.g. `e28zov4fw0v2`. For subdomain use prefix `subdomain-`, e.g. `subdomain-recurly`.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "invoice_id",
            "in": "path",
            "description": "Invoice ID or number. For ID no prefix is used e.g. `e28zov4fw0v2`. For number use prefix `number-`, e.g. `number-1000`.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The updated invoice.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Invoice"
                }
              }
            }
          },
          "404": {
            "description": "Incorrect site or invoice ID.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "422": {
            "description": "Tried marking a closed (successful or failed) invoice as successful.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "Node.js",
            "source": "try {\n  const invoice = await client.markInvoiceSuccessful(invoiceId)\n  console.log(`Marked invoice #${invoice.number} successful`)\n} catch(err) {\n\n  if (err instanceof recurly.errors.ValidationError) {\n    // If the request was not valid, you may want to tell your user\n    // why. You can find the invalid params and reasons in err.params\n    console.log('Failed validation', err.params)\n  } else {\n    // If we don't know what to do with the err, we should\n    // probably re-raise and let our web framework and logger handle it\n    console.log('Unknown Error: ', err)\n  }\n}\n"
          },
          {
            "lang": "Python",
            "source": "try:\n    invoice = client.mark_invoice_successful(invoice_id)\n    print(\"Marked Invoice successful %s\" % invoice)\nexcept recurly.errors.ValidationError as e:\n    # If the request was invalid, you may want to tell your user\n    # why. You can find the invalid params and reasons in e.error.params\n    print(\"ValidationError: %s\" % e.error.message)\n    print(e.error.params)\n"
          },
          {
            "lang": ".NET",
            "source": "try\n{\n    Invoice invoice = client.MarkInvoiceSuccessful(invoiceId);\n    Console.WriteLine($\"Marked invoice #{invoice.Number} successful\");\n}\ncatch (Recurly.Errors.Validation ex)\n{\n    // If the request was not valid, you may want to tell your user\n    // why. You can find the invalid params and reasons in ex.Error.Params\n    Console.WriteLine($\"Failed validation: {ex.Error.Message}\");\n}\ncatch (Recurly.Errors.ApiError ex)\n{\n    // Use ApiError to catch a generic error from the API\n    Console.WriteLine($\"Unexpected Recurly Error: {ex.Error.Message}\");\n}\n"
          },
          {
            "lang": "Ruby",
            "source": "begin\n  invoice = @client.mark_invoice_successful(invoice_id: invoice_id)\n  puts \"Marked invoice sucessful #{invoice}\"\nrescue Recurly::Errors::NotFoundError\n  # If the resource was not found, you may want to alert the user or\n  # just return nil\n  puts \"Resource Not Found\"\nend\n"
          },
          {
            "lang": "Java",
            "source": "try {\n    final Invoice invoice = client.markInvoiceSuccessful(invoiceId);\n    System.out.println(\"Marked invoice \" + invoice.getNumber() + \" successful\");\n} catch (ValidationException e) {\n    // If the request was not valid, you may want to tell your user\n    // why. You can find the invalid params and reasons in e.getError().getParams()\n    System.out.println(\"Failed validation: \" + e.getError().getMessage());\n} catch (ApiException e) {\n    // Use ApiException to catch a generic error from the API\n    System.out.println(\"Unexpected Recurly Error: \" + e.getError().getMessage());\n}\n"
          },
          {
            "lang": "PHP",
            "source": "try {\n    $invoice = $client->markInvoiceSuccessful($invoice_id);\n\n    echo 'Marked Invoice Successful:' . PHP_EOL;\n    var_dump($invoice);\n} catch (\\Recurly\\Errors\\NotFound $e) {\n    // Could not find the resource, you may want to inform the user\n    // or just return a NULL\n    echo 'Could not find resource.' . PHP_EOL;\n    var_dump($e);\n} catch (\\Recurly\\RecurlyError $e) {\n    // Something bad happened... tell the user so that they can fix it?\n    echo 'Some unexpected Recurly error happened. Try again later.' . PHP_EOL;\n}\n"
          },
          {
            "lang": "Go",
            "source": "invoice, err := client.MarkInvoiceSuccessful(invoiceID)\nif e, ok := err.(*recurly.Error); ok {\n\tif e.Type == recurly.ErrorTypeValidation {\n\t\tfmt.Printf(\"Failed validation: %v\", e)\n\t\treturn nil, err\n\t}\n\tfmt.Printf(\"Unexpected Recurly error: %v\", e)\n\treturn nil, err\n}\n\nfmt.Printf(\"Marked Invoice Successful: %v\", invoice)"
          }
        ]
      }
    },
    "/sites/{site_id}/invoices/{invoice_id}/reopen": {
      "put": {
        "tags": [
          "invoice"
        ],
        "summary": "Reopen a closed, manual invoice",
        "operationId": "reopen_invoice",
        "parameters": [
          {
            "name": "site_id",
            "in": "path",
            "description": "Site ID or subdomain. For ID no prefix is used e.g. `e28zov4fw0v2`. For subdomain use prefix `subdomain-`, e.g. `subdomain-recurly`.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "invoice_id",
            "in": "path",
            "description": "Invoice ID or number. For ID no prefix is used e.g. `e28zov4fw0v2`. For number use prefix `number-`, e.g. `number-1000`.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The updated invoice.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Invoice"
                }
              }
            }
          },
          "404": {
            "description": "Incorrect site or invoice ID.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "422": {
            "description": "Tried reopening an automatic transaction, or an invoice that wasn't closed (`successful` or `failed`).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "Node.js",
            "source": "try {\n  const invoice = await client.reopenInvoice(invoiceId)\n  console.log('Reopened invoice: ', invoice.number)\n} catch (err) {\n  if (err instanceof recurly.errors.NotFoundError) {\n    // If the request was not found, you may want to alert the user or\n    // just return null\n    console.log('Resource Not Found')\n  } else {\n    // If we don't know what to do with the err, we should\n    // probably re-raise and let our web framework and logger handle it\n    console.log('Unknown Error: ', err)\n  }\n}\n"
          },
          {
            "lang": "Python",
            "source": "try:\n    invoice = client.reopen_invoice(invoice_id)\n    print(\"Reopened Invoice %s\" % invoice.id)\nexcept recurly.errors.NotFoundError:\n    # If the resource was not found, you may want to alert the user or\n    # just return nil\n    print(\"Resource Not Found\")\n"
          },
          {
            "lang": ".NET",
            "source": "try\n{\n    Invoice invoice = client.ReopenInvoice(invoiceId);\n    Console.WriteLine($\"Reopened invoice #{invoice.Number}\");\n}\ncatch (Recurly.Errors.Validation ex)\n{\n    // If the request was not valid, you may want to tell your user\n    // why. You can find the invalid params and reasons in ex.Error.Params\n    Console.WriteLine($\"Failed validation: {ex.Error.Message}\");\n}\ncatch (Recurly.Errors.ApiError ex)\n{\n    // Use ApiError to catch a generic error from the API\n    Console.WriteLine($\"Unexpected Recurly Error: {ex.Error.Message}\");\n}\n"
          },
          {
            "lang": "Ruby",
            "source": "begin\n  invoice = @client.reopen_invoice(invoice_id: invoice_id)\n  puts \"Reopened invoice #{invoice}\"\nrescue Recurly::Errors::NotFoundError\n  # If the resource was not found, you may want to alert the user or\n  # just return nil\n  puts \"Resource Not Found\"\nend\n"
          },
          {
            "lang": "Java",
            "source": "try {\n    final Invoice invoice = client.reopenInvoice(invoiceId);\n    System.out.println(\"Reopened invoice: \" + invoice.getNumber());\n} catch (ValidationException e) {\n    // If the request was not valid, you may want to tell your user\n    // why. You can find the invalid params and reasons in e.getError().getParams()\n    System.out.println(\"Failed validation: \" + e.getError().getMessage());\n} catch (ApiException e) {\n    // Use ApiException to catch a generic error from the API\n    System.out.println(\"Unexpected Recurly Error: \" + e.getError().getMessage());\n}\n"
          },
          {
            "lang": "PHP",
            "source": "try {\n    $invoice = $client->reopenInvoice($invoice_id);\n\n    echo 'Reopened Invoice:' . PHP_EOL;\n    var_dump($invoice);\n} catch (\\Recurly\\Errors\\Validation $e) {\n    // If the request was not valid, you may want to tell your user\n    // why. You can find the invalid params and reasons in err.params\n    var_dump($e);\n} catch (\\Recurly\\RecurlyError $e) {\n    // If we don't know what to do with the err, we should\n    // probably re-raise and let our web framework and logger handle it\n    var_dump($e);\n}\n"
          },
          {
            "lang": "Go",
            "source": "invoice, err := client.ReopenInvoice(invoiceID)\nif e, ok := err.(*recurly.Error); ok {\n\tif e.Type == recurly.ErrorTypeNotFound {\n\t\tfmt.Printf(\"Resource not found: %v\", e)\n\t\treturn nil, err\n\t}\n\tfmt.Printf(\"Unexpected Recurly error: %v\", e)\n\treturn nil, err\n}\n\nfmt.Printf(\"Reopened Invoice: %v\", invoice)"
          }
        ]
      }
    },
    "/sites/{site_id}/invoices/{invoice_id}/void": {
      "put": {
        "tags": [
          "invoice"
        ],
        "summary": "Void a credit invoice.",
        "description": "Invoice must be a credit invoice (`type=credit`) and cannot be closed (`state=closed`), processing (`state=processing`), or already voided.",
        "operationId": "void_invoice",
        "parameters": [
          {
            "name": "site_id",
            "in": "path",
            "description": "Site ID or subdomain. For ID no prefix is used e.g. `e28zov4fw0v2`. For subdomain use prefix `subdomain-`, e.g. `subdomain-recurly`.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "invoice_id",
            "in": "path",
            "description": "Invoice ID or number. For ID no prefix is used e.g. `e28zov4fw0v2`. For number use prefix `number-`, e.g. `number-1000`.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The updated invoice.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Invoice"
                }
              }
            }
          },
          "404": {
            "description": "Incorrect site or invoice ID.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "422": {
            "description": "Invoice did not meet the conditions to be voided.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "Node.js",
            "source": "try {\n  const invoice = await client.voidInvoice(invoiceId)\n  console.log('Voided invoice: ', invoice)\n} catch (err) {\n  if (err instanceof recurly.errors.ValidationError) {\n    // If the request was not valid, you may want to tell your user\n    // why. You can find the invalid params and reasons in err.params\n    console.log('Failed validation', err.params)\n  } else {\n    // If we don't know what to do with the err, we should\n    // probably re-raise and let our web framework and logger handle it\n    console.log('Unknown Error: ', err)\n  }\n}\n"
          },
          {
            "lang": "Python",
            "source": "try:\n    invoice = client.void_invoice(invoice_id)\n    print(\"Voided Invoice %s\" % invoice.id)\nexcept recurly.errors.NotFoundError:\n    # If the resource was not found, you may want to alert the user or\n    # just return nil\n    print(\"Resource Not Found\")\n"
          },
          {
            "lang": "Ruby",
            "source": "begin\n  invoice = @client.void_invoice(invoice_id: invoice_id)\n  puts \"Voided invoice #{invoice}\"\nrescue Recurly::Errors::NotFoundError\n  # If the resource was not found, you may want to alert the user or\n  # just return nil\n  puts \"Resource Not Found\"\nend\n"
          },
          {
            "lang": "Java",
            "source": "try {\n  final Invoice invoice = client.voidInvoice(invoiceId);\n  System.out.println(\"Voided invoice \" + invoice.getId());\n} catch (final ValidationException e) {\n  // If the request was not valid, you may want to tell your user\n  // why. You can find the invalid params and reasons in e.getError().getParams()\n  System.out.println(\"Failed validation: \" + e.getError().getMessage());\n} catch (final ApiException e) {\n    // Use ApiException to catch a generic error from the API\n    System.out.println(\"Unexpected Recurly Error: \" + e.getError().getMessage());\n}\n"
          },
          {
            "lang": "PHP",
            "source": "try {\n    $invoice = $client->voidInvoice($invoice_id);\n\n    echo 'Voided Invoice:' . PHP_EOL;\n    var_dump($invoice);\n} catch (\\Recurly\\Errors\\Validation $e) {\n    // If the request was not valid, you may want to tell your user\n    // why. You can find the invalid params and reasons in err.params\n    var_dump($e);\n} catch (\\Recurly\\RecurlyError $e) {\n    // If we don't know what to do with the err, we should\n    // probably re-raise and let our web framework and logger handle it\n    var_dump($e);\n}\n"
          },
          {
            "lang": "Go",
            "source": "invoice, err := client.VoidInvoice(invoiceID)\nif e, ok := err.(*recurly.Error); ok {\n\tif e.Type == recurly.ErrorTypeValidation {\n\t\tfmt.Printf(\"Failed validation: %v\", e)\n\t\treturn nil, err\n\t}\n\tfmt.Printf(\"Unexpected Recurly error: %v\", e)\n\treturn nil, err\n}\n\nfmt.Printf(\"Voided Invoice: %v\", invoice)"
          }
        ]
      }
    },
    "/sites/{site_id}/invoices/{invoice_id}/transactions": {
      "post": {
        "tags": [
          "invoice"
        ],
        "summary": "Record an external payment for a manual invoices.",
        "description": "This endpoint allows you to record an offline payment that was not captured through your gateway. It will throw an error for an auto-collecting invoice.",
        "operationId": "record_external_transaction",
        "parameters": [
          {
            "name": "site_id",
            "in": "path",
            "description": "Site ID or subdomain. For ID no prefix is used e.g. `e28zov4fw0v2`. For subdomain use prefix `subdomain-`, e.g. `subdomain-recurly`.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "invoice_id",
            "in": "path",
            "description": "Invoice ID or number. For ID no prefix is used e.g. `e28zov4fw0v2`. For number use prefix `number-`, e.g. `number-1000`.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExternalTransaction"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The recorded transaction.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Transaction"
                }
              }
            }
          },
          "404": {
            "description": "Incorrect site or invoice ID.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "422": {
            "description": "Invoice did not meet the conditions for an offline transaction.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "Node.js",
            "source": "try {\n  const externalTrx = {\n    description: \"A check collected outside of Recurly\",\n    amount: 10.0,\n    payment_method: 'check'\n  }\n  const transaction = await client.recordExternalTransaction(invoiceId, externalTrx)\n  console.log('External Transaction: ', transaction)\n} catch (err) {\n  if (err instanceof recurly.errors.NotFoundError) {\n    // If the request was not found, you may want to alert the user or\n    // just return null\n    console.log('Resource Not Found')\n  } else {\n    // If we don't know what to do with the err, we should\n    // probably re-raise and let our web framework and logger handle it\n    console.log('Unknown Error: ', err)\n  }\n}\n"
          }
        ]
      }
    },
    "/sites/{site_id}/invoices/{invoice_id}/line_items": {
      "get": {
        "tags": [
          "invoice",
          "line_item"
        ],
        "summary": "List an invoice's line items",
        "operationId": "list_invoice_line_items",
        "parameters": [
          {
            "name": "site_id",
            "in": "path",
            "description": "Site ID or subdomain. For ID no prefix is used e.g. `e28zov4fw0v2`. For subdomain use prefix `subdomain-`, e.g. `subdomain-recurly`.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "invoice_id",
            "in": "path",
            "description": "Invoice ID or number. For ID no prefix is used e.g. `e28zov4fw0v2`. For number use prefix `number-`, e.g. `number-1000`.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ids",
            "in": "query",
            "description": "Filter results by their IDs. Up to 200 IDs can be passed at once using\ncommas as separators, e.g. `ids=h1at4d57xlmy,gyqgg0d3v9n1,jrsm5b4yefg6`.\n\n**Important notes:**\n\n* The `ids` parameter cannot be used with any other ordering or filtering\n  parameters (`limit`, `order`, `sort`, `begin_time`, `end_time`, etc)\n* Invalid or unknown IDs will be ignored, so you should check that the\n  results correspond to your request.\n* Records are returned in an arbitrary order. Since results are all\n  returned at once you can sort the records yourself.\n",
            "required": false,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit number of records 1-200.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maximum": 200,
              "minimum": 1,
              "type": "integer",
              "default": 20
            }
          },
          {
            "name": "order",
            "in": "query",
            "description": "Sort order.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "default": "desc",
              "enum": [
                "asc",
                "desc"
              ]
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort field. You *really* only want to sort by `updated_at` in ascending\norder. In descending order updated records will move behind the cursor and could\nprevent some records from being returned.\n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "default": "created_at",
              "enum": [
                "created_at",
                "updated_at"
              ]
            }
          },
          {
            "name": "begin_time",
            "in": "query",
            "description": "Filter by begin_time when `sort=created_at` or `sort=updated_at`.\n**Note:** this value is an ISO8601 timestamp. A partial timestamp that does not include a time zone will default to UTC.\n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "end_time",
            "in": "query",
            "description": "Filter by end_time when `sort=created_at` or `sort=updated_at`.\n**Note:** this value is an ISO8601 timestamp. A partial timestamp that does not include a time zone will default to UTC.\n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "original",
            "in": "query",
            "description": "Filter by original field.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": [
                "true"
              ]
            }
          },
          {
            "name": "state",
            "in": "query",
            "description": "Filter by state field.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": [
                "invoiced",
                "pending"
              ]
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Filter by type field.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": [
                "charge",
                "credit"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of the invoice's line items.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LineItemList"
                }
              }
            }
          },
          "400": {
            "description": "Invalid or unpermitted parameter.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Incorrect site ID.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "Node.js",
            "source": "const lineItems = client.listInvoiceLineItems(invoiceId, { limit: 200 })\n\nfor await (const lineItem of lineItems.each()) {\n  console.log(lineItem.id)\n}\n"
          },
          {
            "lang": "Python",
            "source": "try:\n    line_items = client.list_invoice_line_items(invoice_id, limit=200).items()\n    for item in line_items:\n      print(\"Invoice Line Items %s\" % item.id)\nexcept recurly.errors.NotFoundError:\n    # If the resource was not found, you may want to alert the user or\n    # just return nil\n    print(\"Resource Not Found\")\n"
          },
          {
            "lang": ".NET",
            "source": "var lineItems = client.ListInvoiceLineItems(invoiceId);\nforeach(LineItem lineItem in lineItems)\n{\n    Console.WriteLine(lineItem.Id);\n}\n"
          },
          {
            "lang": "Ruby",
            "source": "line_items = @client.list_invoice_line_items(\n  invoice_id: invoice_id,\n  limit: 200\n)\nline_items.each do |line_item|\n  puts \"Line Item: #{line_item.id}\"\nend\n"
          },
          {
            "lang": "Java",
            "source": "QueryParams params = new QueryParams();\nparams.setLimit(200);\nPager<LineItem> lineItems = client.listInvoiceLineItems(invoiceId, params);\n\nfor (LineItem lineItem : lineItems) {\n  System.out.println(lineItem.getId());\n}\n"
          },
          {
            "lang": "PHP",
            "source": "$params = ['limit' => 200];\n$invoice_line_items = $client->listInvoiceLineItems($invoice_id, $params);\n\nforeach($invoice_line_item as $line_item) {\n  echo 'Invoice Line Item: ' . $line_item->getId() . PHP_EOL;\n}\n"
          },
          {
            "lang": "Go",
            "source": "listParams := &recurly.ListInvoiceLineItemsParams{\n\tSort: recurly.String(\"created_at\"),\n}\nlineItems := client.ListInvoiceLineItems(invoiceID, listParams)\n\nfor lineItems.HasMore {\n\terr := lineItems.Fetch()\n\tif e, ok := err.(*recurly.Error); ok {\n\t\tfmt.Printf(\"Failed to retrieve next page: %v\", e)\n\t\tbreak\n\t}\n\tfor i, lineItem := range lineItems.Data {\n\t\tfmt.Printf(\"Invoice Line Item %3d: %s\\n\",\n\t\t\ti,\n\t\t\tlineItem.Id,\n\t\t)\n\t}\n}"
          }
        ]
      }
    },
    "/sites/{site_id}/invoices/{invoice_id}/coupon_redemptions": {
      "get": {
        "tags": [
          "invoice",
          "coupon_redemption"
        ],
        "summary": "Show the coupon redemptions applied to an invoice",
        "operationId": "list_invoice_coupon_redemptions",
        "parameters": [
          {
            "name": "site_id",
            "in": "path",
            "description": "Site ID or subdomain. For ID no prefix is used e.g. `e28zov4fw0v2`. For subdomain use prefix `subdomain-`, e.g. `subdomain-recurly`.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "invoice_id",
            "in": "path",
            "description": "Invoice ID or number. For ID no prefix is used e.g. `e28zov4fw0v2`. For number use prefix `number-`, e.g. `number-1000`.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ids",
            "in": "query",
            "description": "Filter results by their IDs. Up to 200 IDs can be passed at once using\ncommas as separators, e.g. `ids=h1at4d57xlmy,gyqgg0d3v9n1,jrsm5b4yefg6`.\n\n**Important notes:**\n\n* The `ids` parameter cannot be used with any other ordering or filtering\n  parameters (`limit`, `order`, `sort`, `begin_time`, `end_time`, etc)\n* Invalid or unknown IDs will be ignored, so you should check that the\n  results correspond to your request.\n* Records are returned in an arbitrary order. Since results are all\n  returned at once you can sort the records yourself.\n",
            "required": false,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort field. You *really* only want to sort by `updated_at` in ascending\norder. In descending order updated records will move behind the cursor and could\nprevent some records from being returned.\n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "default": "created_at",
              "enum": [
                "created_at",
                "updated_at"
              ]
            }
          },
          {
            "name": "begin_time",
            "in": "query",
            "description": "Filter by begin_time when `sort=created_at` or `sort=updated_at`.\n**Note:** this value is an ISO8601 timestamp. A partial timestamp that does not include a time zone will default to UTC.\n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "end_time",
            "in": "query",
            "description": "Filter by end_time when `sort=created_at` or `sort=updated_at`.\n**Note:** this value is an ISO8601 timestamp. A partial timestamp that does not include a time zone will default to UTC.\n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of the the coupon redemptions associated with the invoice.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CouponRedemptionList"
                }
              }
            }
          },
          "404": {
            "description": "Incorrect site or invoice ID.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "Node.js",
            "source": "const redemptions = client.listInvoiceCouponRedemptions(invoiceId, { limit: 200 })\n\nfor await (const redemption of redemptions.each()) {\n  console.log(redemption.id)\n}\n"
          },
          {
            "lang": "Python",
            "source": "try:\n    redemptions = client.list_invoice_coupon_redemptions(invoice_id, limit=200).items()\n    for redemption in redemptions:\n      print(\"Invoice Coupon Redemption %s\" % redemption)\nexcept recurly.errors.NotFoundError:\n    # If the resource was not found, you may want to alert the user or\n    # just return nil\n    print(\"Resource Not Found\")\n"
          },
          {
            "lang": ".NET",
            "source": "var couponRedemptions = client.ListInvoiceCouponRedemptions(invoiceId);\nforeach(CouponRedemption redemption in couponRedemptions)\n{\n    Console.WriteLine(redemption.Id);\n}\n"
          },
          {
            "lang": "Ruby",
            "source": "coupon_redemptions = @client.list_invoice_coupon_redemptions(\n  invoice_id: invoice_id,\n  limit: 200\n)\ncoupon_redemptions.each do |redemption|\n  puts \"CouponRedemption: #{redemption.id}\"\nend\n"
          },
          {
            "lang": "Java",
            "source": "QueryParams params = new QueryParams();\nparams.setLimit(200); // Pull 200 records at a time\nfinal Pager<CouponRedemption> redemptions = client.listInvoiceCouponRedemptions(invoiceId, params);\n\nfor (CouponRedemption redemption : redemptions) {\n    System.out.println(redemption.getId());\n}\n"
          },
          {
            "lang": "PHP",
            "source": "$params = ['limit' => 200];\n$invoice_coupon_redemptions = $client->listInvoiceCouponRedemptions($invoice_id, $params);\n\nforeach($invoice_coupon_redemptions as $redemption) {\n  echo 'Invoice Coupon Redemption: ' . $redemption->getId() . PHP_EOL;\n}\n"
          },
          {
            "lang": "Go",
            "source": "listParams := &recurly.ListInvoiceCouponRedemptionsParams{\n\tSort: recurly.String(\"created_at\"),\n}\nredemptions := client.ListInvoiceCouponRedemptions(invoiceID, listParams)\n\nfor redemptions.HasMore {\n\terr := redemptions.Fetch()\n\tif e, ok := err.(*recurly.Error); ok {\n\t\tfmt.Printf(\"Failed to retrieve next page: %v\", e)\n\t\tbreak\n\t}\n\tfor i, redemption := range redemptions.Data {\n\t\tfmt.Printf(\"Invoice Coupon Redemption %3d: %s\\n\",\n\t\t\ti,\n\t\t\tredemption.Id,\n\t\t)\n\t}\n}"
          }
        ]
      }
    },
    "/sites/{site_id}/invoices/{invoice_id}/related_invoices": {
      "get": {
        "tags": [
          "invoice"
        ],
        "summary": "List an invoice's related credit or charge invoices",
        "description": "Related invoices provide a link between credit invoices and the charge invoices that they are refunding.\nFor a charge invoice the related invoices will be credit invoices.\nFor a credit invoice the related invoices will be charge invoices.\n",
        "operationId": "list_related_invoices",
        "parameters": [
          {
            "name": "site_id",
            "in": "path",
            "description": "Site ID or subdomain. For ID no prefix is used e.g. `e28zov4fw0v2`. For subdomain use prefix `subdomain-`, e.g. `subdomain-recurly`.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "invoice_id",
            "in": "path",
            "description": "Invoice ID or number. For ID no prefix is used e.g. `e28zov4fw0v2`. For number use prefix `number-`, e.g. `number-1000`.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of the credit or charge invoices associated with the invoice.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvoiceList"
                }
              }
            }
          },
          "404": {
            "description": "Incorrect site or invoice ID.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "Node.js",
            "source": "const invoices = client.listRelatedInvoices(invoiceId, { limit: 200 })\n\nfor await (const invoice of invoices.each()) {\n  console.log(invoice.number)\n}\n"
          },
          {
            "lang": "Python",
            "source": "try:\n    related_invoices = client.list_related_invoices(invoice_id, limit=200).items()\n    for invoice in related_invoices:\n      print(\"Related invoice %s\" % invoice.id)\nexcept recurly.errors.NotFoundError:\n    # If the resource was not found, you may want to alert the user or\n    # just return nil\n    print(\"Resource Not Found\")\n"
          },
          {
            "lang": ".NET",
            "source": "var invoices = client.ListRelatedInvoices(invoiceId);\nforeach(Invoice invoice in invoices)\n{\n    Console.WriteLine(invoice.Number);\n}\n"
          },
          {
            "lang": "Ruby",
            "source": "invoices = @client.list_related_invoices(\n  invoice_id: invoice_id,\n  limit: 200\n)\ninvoices.each do |invoice|\n  puts \"Invoice: #{invoice.number}\"\nend\n"
          },
          {
            "lang": "Java",
            "source": "final Pager<Invoice> invoices = client.listRelatedInvoices(invoiceId);\n\nfor (Invoice invoice : invoices) {\n    System.out.println(invoice.getNumber());\n}\n"
          },
          {
            "lang": "PHP",
            "source": "$related_invoices = $client->listRelatedInvoices($invoice_id);\n\nforeach($related_invoices as $invoice) {\n  echo 'Related Invoice: ' . $invoice->getId() . PHP_EOL;\n}\n"
          },
          {
            "lang": "Go",
            "source": "invoices := client.ListRelatedInvoices(invoiceID)\n\nfor invoices.HasMore {\n\terr := invoices.Fetch()\n\tif e, ok := err.(*recurly.Error); ok {\n\t\tfmt.Printf(\"Failed to retrieve next page: %v\", e)\n\t\tbreak\n\t}\n\tfor i, invoice := range invoices.Data {\n\t\tfmt.Printf(\"Related Invoice %3d: %s, %s\\n\",\n\t\t\ti,\n\t\t\tinvoice.Id,\n\t\t\tinvoice.Number,\n\t\t)\n\t}\n}"
          }
        ]
      }
    },
    "/sites/{site_id}/invoices/{invoice_id}/refund": {
      "post": {
        "tags": [
          "invoice"
        ],
        "summary": "Refund an invoice",
        "description": "There are two ways to do a refund:\n* refund a specific amount which is divided across all the line items.\n* refund quantities of line items.\nIf you want to refund the entire refundable amount on the invoice, the\nsimplest way is to do `type=amount` without specifiying an `amount`.\n",
        "operationId": "refund_invoice",
        "parameters": [
          {
            "name": "site_id",
            "in": "path",
            "description": "Site ID or subdomain. For ID no prefix is used e.g. `e28zov4fw0v2`. For subdomain use prefix `subdomain-`, e.g. `subdomain-recurly`.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "invoice_id",
            "in": "path",
            "description": "Invoice ID or number. For ID no prefix is used e.g. `e28zov4fw0v2`. For number use prefix `number-`, e.g. `number-1000`.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InvoiceRefund"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Returns the new credit invoice.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Invoice"
                }
              }
            }
          },
          "400": {
            "description": "Invalid or unpermitted parameter.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Incorrect site or invoice ID.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "Node.js",
            "source": "try {\n  const invoiceRefund = {\n    creditCustomerNotes: \"Notes on credits\",\n    type: \"amount\", // could also be \"line_items\"\n    amount: 100\n  }\n\n  const invoice = await client.refundInvoice(invoiceId, invoiceRefund)\n  console.log('Refunded invoice: ', invoice.number)\n} catch(err) {\n\n  if (err instanceof recurly.errors.ValidationError) {\n    // If the request was not valid, you may want to tell your user\n    // why. You can find the invalid params and reasons in err.params\n    console.log('Failed validation', err.params)\n  } else {\n    // If we don't know what to do with the err, we should\n    // probably re-raise and let our web framework and logger handle it\n    console.log('Unknown Error: ', err)\n  }\n}\n"
          },
          {
            "lang": "Python",
            "source": "try:\n    invoice_refund = {\"type\": \"amount\", \"amount\": 100}\n    invoice = client.refund_invoice(invoice_id, invoice_refund)\n    print(\"Refunded Invoice %s\" % invoice)\nexcept recurly.errors.ValidationError as e:\n    # If the request was invalid, you may want to tell your user\n    # why. You can find the invalid params and reasons in e.error.params\n    print(\"ValidationError: %s\" % e.error.message)\n    print(e.error.params)\n"
          },
          {
            "lang": ".NET",
            "source": "try\n{\n    var refundReq = new InvoiceRefund() {\n        CreditCustomerNotes = \"Notes on credits\",\n        Type = \"amount\", // could also be \"line_items\"\n        Amount = 100\n    };\n    Invoice invoice = client.RefundInvoice(invoiceId, refundReq);\n    Console.WriteLine($\"Refunded Invoice #{invoice.Number}\");\n}\ncatch (Recurly.Errors.Validation ex)\n{\n    // If the request was not valid, you may want to tell your user\n    // why. You can find the invalid params and reasons in ex.Error.Params\n    Console.WriteLine($\"Failed validation: {ex.Error.Message}\");\n}\ncatch (Recurly.Errors.ApiError ex)\n{\n    // Use ApiError to catch a generic error from the API\n    Console.WriteLine($\"Unexpected Recurly Error: {ex.Error.Message}\");\n}\n"
          },
          {
            "lang": "Ruby",
            "source": "begin\n  invoice_refund = {\n    type: \"amount\",\n    amount: 100,\n  }\n  invoice = @client.refund_invoice(\n    invoice_id: invoice_id,\n    body: invoice_refund\n  )\n  puts \"Refunded invoice #{invoice}\"\nrescue Recurly::Errors::ValidationError => e\n  # If the request was invalid, you may want to tell your user\n  # why. You can find the invalid params and reasons in e.recurly_error.params\n  puts \"ValidationError: #{e.recurly_error.params}\"\nend\n"
          },
          {
            "lang": "Java",
            "source": "try {\n    final InvoiceRefund invoiceRefund = new InvoiceRefund();\n    invoiceRefund.setCreditCustomerNotes(\"Notes on credits\");\n    invoiceRefund.setType(\"amount\"); // could also be \"line_items\"\n    invoiceRefund.setAmount(100f);\n\n    final Invoice invoice = client.refundInvoice(invoiceId, invoiceRefund);\n    System.out.println(\"Refunded invoice \" + invoice.getNumber());\n} catch (ValidationException e) {\n    // If the request was not valid, you may want to tell your user\n    // why. You can find the invalid params and reasons in e.getError().getParams()\n    System.out.println(\"Failed validation: \" + e.getError().getMessage());\n} catch (ApiException e) {\n    // Use ApiException to catch a generic error from the API\n    System.out.println(\"Unexpected Recurly Error: \" + e.getError().getMessage());\n}\n"
          },
          {
            "lang": "PHP",
            "source": "try {\n    $refund = array(\n        \"type\" => \"amount\",\n        \"amount\" => 1\n    );\n    $invoice_collection = $client->refundInvoice($invoice_id, $refund);\n\n    echo 'Refunded Invoice:' . PHP_EOL;\n    var_dump($invoice_collection);\n} catch (\\Recurly\\Errors\\NotFound $e) {\n    // Could not find the resource, you may want to inform the user\n    // or just return a NULL\n    echo 'Could not find resource.' . PHP_EOL;\n    var_dump($e);\n} catch (\\Recurly\\RecurlyError $e) {\n    // Something bad happened... tell the user so that they can fix it?\n    echo 'Some unexpected Recurly error happened. Try again later.' . PHP_EOL;\n}\n"
          },
          {
            "lang": "Go",
            "source": "refundReq := &recurly.InvoiceRefund{\n\tType:   recurly.String(\"amount\"),\n\tAmount: recurly.Float(1),\n\tExternalRefund: &recurly.ExternalRefund{\n\t\tPaymentMethod: recurly.String(\"credit_card\"),\n\t},\n}\ninvoice, err := client.RefundInvoice(invoiceID, refundReq)\nif e, ok := err.(*recurly.Error); ok {\n\tif e.Type == recurly.ErrorTypeValidation {\n\t\tfmt.Printf(\"Failed validation: %v\", e)\n\t\treturn nil, err\n\t}\n\tfmt.Printf(\"Unexpected Recurly error: %v\", e)\n\treturn nil, err\n}\n\nfmt.Printf(\"Refunded Invoice: %v\", invoice)"
          }
        ]
      }
    },
    "/sites/{site_id}/line_items": {
      "get": {
        "tags": [
          "line_item"
        ],
        "summary": "List a site's line items",
        "operationId": "list_line_items",
        "parameters": [
          {
            "name": "site_id",
            "in": "path",
            "description": "Site ID or subdomain. For ID no prefix is used e.g. `e28zov4fw0v2`. For subdomain use prefix `subdomain-`, e.g. `subdomain-recurly`.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ids",
            "in": "query",
            "description": "Filter results by their IDs. Up to 200 IDs can be passed at once using\ncommas as separators, e.g. `ids=h1at4d57xlmy,gyqgg0d3v9n1,jrsm5b4yefg6`.\n\n**Important notes:**\n\n* The `ids` parameter cannot be used with any other ordering or filtering\n  parameters (`limit`, `order`, `sort`, `begin_time`, `end_time`, etc)\n* Invalid or unknown IDs will be ignored, so you should check that the\n  results correspond to your request.\n* Records are returned in an arbitrary order. Since results are all\n  returned at once you can sort the records yourself.\n",
            "required": false,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit number of records 1-200.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maximum": 200,
              "minimum": 1,
              "type": "integer",
              "default": 20
            }
          },
          {
            "name": "order",
            "in": "query",
            "description": "Sort order.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "default": "desc",
              "enum": [
                "asc",
                "desc"
              ]
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort field. You *really* only want to sort by `updated_at` in ascending\norder. In descending order updated records will move behind the cursor and could\nprevent some records from being returned.\n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "default": "created_at",
              "enum": [
                "created_at",
                "updated_at"
              ]
            }
          },
          {
            "name": "begin_time",
            "in": "query",
            "description": "Filter by begin_time when `sort=created_at` or `sort=updated_at`.\n**Note:** this value is an ISO8601 timestamp. A partial timestamp that does not include a time zone will default to UTC.\n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "end_time",
            "in": "query",
            "description": "Filter by end_time when `sort=created_at` or `sort=updated_at`.\n**Note:** this value is an ISO8601 timestamp. A partial timestamp that does not include a time zone will default to UTC.\n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "original",
            "in": "query",
            "description": "Filter by original field.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": [
                "true"
              ]
            }
          },
          {
            "name": "state",
            "in": "query",
            "description": "Filter by state field.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": [
                "invoiced",
                "pending"
              ]
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Filter by type field.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": [
                "charge",
                "credit"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of the site's line items.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LineItemList"
                }
              }
            }
          },
          "400": {
            "description": "Invalid or unpermitted parameter.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Incorrect site ID.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "Node.js",
            "source": "const lineItems = client.listLineItems({ limit: 200 })\n\nfor await (const item of lineItems.each()) {\n  console.log(`Item ${item.id} for ${item.amount}`)\n}\n"
          },
          {
            "lang": "Python",
            "source": "line_items = client.list_line_items(limit=200).items()\nfor line_item in line_items:\n    print(line_item.id)\n"
          },
          {
            "lang": ".NET",
            "source": "var lineItems = client.ListLineItems(limit: 200);\nforeach(LineItem item in lineItems)\n{\n    Console.WriteLine($\"Item {item.Uuid} for {item.Amount}\");\n}\n"
          },
          {
            "lang": "Ruby",
            "source": "line_items = @client.list_line_items(\n  limit: 200\n)\nline_items.each do |line_item|\n  puts \"LineItem: #{line_item.id}\"\nend\n"
          },
          {
            "lang": "Java",
            "source": "QueryParams params = new QueryParams();\nparams.setLimit(200); // Pull 200 records at a time\nfinal Pager<LineItem> lineItems = client.listLineItems(params);\n\nfor (LineItem lineItem : lineItems) {\n    System.out.println(\"Item \" + lineItem.getUuid() + \" for \" + lineItem.getAmount());\n}\n"
          },
          {
            "lang": "PHP",
            "source": "$params = ['limit' => 200];\n$line_items = $client->listLineItems($params);\n\nforeach($line_items as $line_item) {\n  echo 'Line item: ' . $line_item->getId() . PHP_EOL;\n}\n"
          },
          {
            "lang": "Go",
            "source": "listParams := &recurly.ListLineItemsParams{\n\tSort:  recurly.String(\"created_at\"),\n\tOrder: recurly.String(\"desc\"),\n\tLimit: recurly.Int(200),\n}\nlineItems := client.ListLineItems(listParams)\n\nfor lineItems.HasMore {\n\terr := lineItems.Fetch()\n\tif e, ok := err.(*recurly.Error); ok {\n\t\tfmt.Printf(\"Failed to retrieve next page: %v\", e)\n\t\tbreak\n\t}\n\tfor i, lineItem := range lineItems.Data {\n\t\tfmt.Printf(\"Line Item %3d: %s\\n\",\n\t\t\ti,\n\t\t\tlineItem.Id,\n\t\t)\n\t}\n}"
          }
        ]
      }
    },
    "/sites/{site_id}/line_items/{line_item_id}": {
      "get": {
        "tags": [
          "line_item"
        ],
        "summary": "Fetch a line item",
        "operationId": "get_line_item",
        "parameters": [
          {
            "name": "site_id",
            "in": "path",
            "description": "Site ID or subdomain. For ID no prefix is used e.g. `e28zov4fw0v2`. For subdomain use prefix `subdomain-`, e.g. `subdomain-recurly`.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "line_item_id",
            "in": "path",
            "description": "Line Item ID.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A line item.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LineItem"
                }
              }
            }
          },
          "404": {
            "description": "Incorrect site or line item ID.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "Node.js",
            "source": "try {\n  const lineItem = await client.getLineItem(lineItemId)\n  console.log('Fetched line item: ', lineItem.uuid)\n} catch (err) {\n  if (err instanceof recurly.errors.NotFoundError) {\n    // If the request was not found, you may want to alert the user or\n    // just return null\n    console.log('Resource Not Found')\n  } else {\n    // If we don't know what to do with the err, we should\n    // probably re-raise and let our web framework and logger handle it\n    console.log('Unknown Error: ', err)\n  }\n}\n"
          },
          {
            "lang": "Python",
            "source": "try:\n    line_item = client.get_line_item(line_item_id)\n    print(\"Got LineItem %s\" % line_item)\nexcept recurly.errors.NotFoundError:\n    # If the resource was not found, you may want to alert the user or\n    # just return nil\n    print(\"Resource Not Found\")\n"
          },
          {
            "lang": ".NET",
            "source": "try\n{\n    LineItem lineItem = client.GetLineItem(lineItemId);\n    Console.WriteLine($\"Fetched line item {lineItem.Uuid}\");\n}\ncatch (Recurly.Errors.NotFound ex)\n{\n    // If the resource was not found\n    // we may want to alert the user or just return null\n    Console.WriteLine($\"Resource Not Found: {ex.Error.Message}\");\n}\ncatch (Recurly.Errors.ApiError ex)\n{\n    // Use ApiError to catch a generic error from the API\n    Console.WriteLine($\"Unexpected Recurly Error: {ex.Error.Message}\");\n}\n"
          },
          {
            "lang": "Ruby",
            "source": "begin\n  line_item = @client.get_line_item(line_item_id: line_item_id)\n  puts \"Got LineItem #{line_item}\"\nrescue Recurly::Errors::NotFoundError\n  # If the resource was not found, you may want to alert the user or\n  # just return nil\n  puts \"Resource Not Found\"\nend\n"
          },
          {
            "lang": "Java",
            "source": "try {\n    final LineItem lineItem = client.getLineItem(lineItemId);\n    System.out.println(\"Fetched line item \" + lineItem.getUuid());\n} catch (NotFoundException e) {\n    // If the resource was not found\n    // we may want to alert the user or just return null\n    System.out.println(\"Resource Not Found: \" + e.getError().getMessage());\n} catch (ApiException e) {\n    // Use ApiException to catch a generic error from the API\n    System.out.println(\"Unexpected Recurly Error: \" + e.getError().getMessage());\n}\n"
          },
          {
            "lang": "PHP",
            "source": "try {\n    $line_item = $client->getLineItem($line_item_id);\n\n    echo 'Got LineItem:' . PHP_EOL;\n    var_dump($line_item);\n} catch (\\Recurly\\Errors\\NotFound $e) {\n    // Could not find the resource, you may want to inform the user\n    // or just return a NULL\n    echo 'Could not find resource.' . PHP_EOL;\n    var_dump($e);\n} catch (\\Recurly\\RecurlyError $e) {\n    // Something bad happened... tell the user so that they can fix it?\n    echo 'Some unexpected Recurly error happened. Try again later.' . PHP_EOL;\n}\n"
          },
          {
            "lang": "Go",
            "source": "lineItem, err := client.GetLineItem(lineItemID)\nif e, ok := err.(*recurly.Error); ok {\n\tif e.Type == recurly.ErrorTypeNotFound {\n\t\tfmt.Printf(\"Resource not found: %v\", e)\n\t\treturn nil, err\n\t}\n\tfmt.Printf(\"Unexpected Recurly error: %v\", e)\n\treturn nil, err\n}\nfmt.Printf(\"Fetched Line Item: %v\", lineItem)"
          }
        ]
      },
      "delete": {
        "tags": [
          "line_item"
        ],
        "summary": "Delete an uninvoiced line item",
        "operationId": "remove_line_item",
        "parameters": [
          {
            "name": "site_id",
            "in": "path",
            "description": "Site ID or subdomain. For ID no prefix is used e.g. `e28zov4fw0v2`. For subdomain use prefix `subdomain-`, e.g. `subdomain-recurly`.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "line_item_id",
            "in": "path",
            "description": "Line Item ID.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Line item deleted."
          },
          "404": {
            "description": "Incorrect site or line item ID.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "422": {
            "description": "Only pending line items can be deleted.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "Node.js",
            "source": "try {\n  await client.removeLineItem(lineItemId)\n  console.log('Removed line item: ', lineItemId)\n} catch (err) {\n  if (err instanceof recurly.errors.NotFoundError) {\n    // If the request was not found, you may want to alert the user or\n    // just return null\n    console.log('Resource Not Found')\n  } else {\n    // If we don't know what to do with the err, we should\n    // probably re-raise and let our web framework and logger handle it\n    console.log('Unknown Error: ', err)\n  }\n}\n"
          },
          {
            "lang": "Python",
            "source": "try:\n    client.remove_line_item(line_item_id)\n    print(\"Removed LineItem %s\" % line_item_id)\nexcept recurly.errors.NotFoundError:\n    # If the resource was not found, you may want to alert the user or\n    # just return nil\n    print(\"Resource Not Found\")\n"
          },
          {
            "lang": ".NET",
            "source": "try\n{\n    client.RemoveLineItem(lineItemId);\n    Console.WriteLine($\"Removed line item {lineItemId}\");\n}\ncatch (Recurly.Errors.Validation ex)\n{\n    // If the request was not valid, you may want to tell your user\n    // why. You can find the invalid params and reasons in ex.Error.Params\n    Console.WriteLine($\"Failed validation: {ex.Error.Message}\");\n}\ncatch (Recurly.Errors.ApiError ex)\n{\n    // Use ApiError to catch a generic error from the API\n    Console.WriteLine($\"Unexpected Recurly Error: {ex.Error.Message}\");\n}\n"
          },
          {
            "lang": "Ruby",
            "source": "begin\n  @client.remove_line_item(\n    line_item_id: line_item_id\n  )\n  puts \"Removed LineItem #{line_item_id}\"\nrescue Recurly::Errors::NotFoundError\n  # If the resource was not found, you may want to alert the user or\n  # just return nil\n  puts \"Resource Not Found\"\nend\n"
          },
          {
            "lang": "Java",
            "source": "try {\n    client.removeLineItem(lineItemId);\n    System.out.println(\"Removed line item \" + lineItemId);\n} catch (ValidationException e) {\n    // If the request was not valid, you may want to tell your user\n    // why. You can find the invalid params and reasons in e.getError().getParams()\n    System.out.println(\"Failed validation: \" + e.getError().getMessage());\n} catch (ApiException e) {\n    // Use ApiException to catch a generic error from the API\n    System.out.println(\"Unexpected Recurly Error: \" + e.getError().getMessage());\n}\n"
          },
          {
            "lang": "PHP",
            "source": "try {\n    $client->removeLineItem($line_item_id);\n    echo 'Removed LineItem: ' . $line_item_id . PHP_EOL;\n} catch (\\Recurly\\Errors\\Validation $e) {\n    // If the request was not valid, you may want to tell your user\n    // why. You can find the invalid params and reasons in err.params\n    var_dump($e);\n} catch (\\Recurly\\RecurlyError $e) {\n    // If we don't know what to do with the err, we should\n    // probably re-raise and let our web framework and logger handle it\n    var_dump($e);\n}\n"
          },
          {
            "lang": "Go",
            "source": "lineItem, err := client.RemoveLineItem(lineItemID)\nif e, ok := err.(*recurly.Error); ok {\n\tif e.Type == recurly.ErrorTypeNotFound {\n\t\tfmt.Printf(\"Resource not found: %v\", e)\n\t\treturn nil, err\n\t}\n\tfmt.Printf(\"Unexpected Recurly error: %v\", e)\n\treturn nil, err\n}\nfmt.Printf(\"Removed Line Item: %v\", lineItem)"
          }
        ]
      }
    },
    "/sites/{site_id}/plans": {
      "get": {
        "tags": [
          "plan"
        ],
        "summary": "List a site's plans",
        "operationId": "list_plans",
        "parameters": [
          {
            "name": "site_id",
            "in": "path",
            "description": "Site ID or subdomain. For ID no prefix is used e.g. `e28zov4fw0v2`. For subdomain use prefix `subdomain-`, e.g. `subdomain-recurly`.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ids",
            "in": "query",
            "description": "Filter results by their IDs. Up to 200 IDs can be passed at once using\ncommas as separators, e.g. `ids=h1at4d57xlmy,gyqgg0d3v9n1,jrsm5b4yefg6`.\n\n**Important notes:**\n\n* The `ids` parameter cannot be used with any other ordering or filtering\n  parameters (`limit`, `order`, `sort`, `begin_time`, `end_time`, etc)\n* Invalid or unknown IDs will be ignored, so you should check that the\n  results correspond to your request.\n* Records are returned in an arbitrary order. Since results are all\n  returned at once you can sort the records yourself.\n",
            "required": false,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit number of records 1-200.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maximum": 200,
              "minimum": 1,
              "type": "integer",
              "default": 20
            }
          },
          {
            "name": "order",
            "in": "query",
            "description": "Sort order.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "default": "desc",
              "enum": [
                "asc",
                "desc"
              ]
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort field. You *really* only want to sort by `updated_at` in ascending\norder. In descending order updated records will move behind the cursor and could\nprevent some records from being returned.\n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "default": "created_at",
              "enum": [
                "created_at",
                "updated_at"
              ]
            }
          },
          {
            "name": "begin_time",
            "in": "query",
            "description": "Filter by begin_time when `sort=created_at` or `sort=updated_at`.\n**Note:** this value is an ISO8601 timestamp. A partial timestamp that does not include a time zone will default to UTC.\n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "end_time",
            "in": "query",
            "description": "Filter by end_time when `sort=created_at` or `sort=updated_at`.\n**Note:** this value is an ISO8601 timestamp. A partial timestamp that does not include a time zone will default to UTC.\n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "state",
            "in": "query",
            "description": "Filter by state.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": [
                "active",
                "inactive"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of plans.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlanList"
                }
              }
            }
          },
          "400": {
            "description": "Invalid or unpermitted parameter.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Incorrect site ID.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "Node.js",
            "source": "const plans = client.listPlans({ limit: 200 })\n\nfor await (const plan of plans.each()) {\n  console.log(plan.code)\n}\n"
          },
          {
            "lang": "Python",
            "source": "plans = client.list_plans(limit=200).items()\nfor plan in plans:\n    print(plan.code)\n"
          },
          {
            "lang": ".NET",
            "source": "var plans = client.ListPlans(limit: 200);\nforeach(Plan plan in plans)\n{\n    Console.WriteLine(plan.Code);\n}\n"
          },
          {
            "lang": "Ruby",
            "source": "plans = @client.list_plans(limit: 200)\nplans.each do |plan|\n  puts \"Plan: #{plan.code}\"\nend\n"
          },
          {
            "lang": "Java",
            "source": "QueryParams params = new QueryParams();\nparams.setLimit(200); // Pull 200 records at a time\nfinal Pager<Plan> plans = client.listPlans(params);\n\nfor (Plan plan : plans) {\n    System.out.println(plan.getCode());\n}\n"
          },
          {
            "lang": "PHP",
            "source": "$params = ['limit' => 200];\n$plans = $client->listPlans($params);\n\nforeach($plans as $plan) {\n  echo 'Plan: ' . $plan->getCode() . PHP_EOL;\n}\n"
          },
          {
            "lang": "Go",
            "source": "listParams := &recurly.ListPlansParams{\n\tSort:  recurly.String(\"created_at\"),\n\tOrder: recurly.String(\"desc\"),\n\tLimit: recurly.Int(200),\n}\nplans := client.ListPlans(listParams)\n\nfor plans.HasMore {\n\terr := plans.Fetch()\n\tif e, ok := err.(*recurly.Error); ok {\n\t\tfmt.Printf(\"Failed to retrieve next page: %v\", e)\n\t\tbreak\n\t}\n\tfor i, plan := range plans.Data {\n\t\tfmt.Printf(\"Plan %3d: %s, %s\\n\",\n\t\t\ti,\n\t\t\tplan.Id,\n\t\t\tplan.Code,\n\t\t)\n\t}\n}"
          }
        ]
      },
      "post": {
        "tags": [
          "plan"
        ],
        "summary": "Create a plan",
        "operationId": "create_plan",
        "parameters": [
          {
            "name": "site_id",
            "in": "path",
            "description": "Site ID or subdomain. For ID no prefix is used e.g. `e28zov4fw0v2`. For subdomain use prefix `subdomain-`, e.g. `subdomain-recurly`.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PlanCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "A plan.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Plan"
                }
              }
            }
          },
          "404": {
            "description": "Incorrect site ID.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "422": {
            "description": "A validation error such as 'Code has already been taken.'",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "Node.js",
            "source": "try {\n  const planCreate = {\n    name: 'Monthly Coffee Subscription',\n    code: planCode,\n    currencies: [\n      {\n        currency: 'USD',\n        unitAmount: 10000\n      }\n    ]\n  }\n  const plan = await client.createPlan(planCreate)\n  console.log('Created Plan: ', plan.code)\n} catch (err) {\n  if (err instanceof recurly.errors.ValidationError) {\n    // If the request was not valid, you may want to tell your user\n    // why. You can find the invalid params and reasons in err.params\n    console.log('Failed validation', err.params)\n  } else {\n    // If we don't know what to do with the err, we should\n    // probably re-raise and let our web framework and logger handle it\n    console.log('Unknown Error: ', err)\n  }\n}\n"
          },
          {
            "lang": "Python",
            "source": "try:\n    plan_create = {\n        \"name\": \"Monthly Coffee Subscription\",\n        \"code\": plan_code,\n        \"currencies\": [{\"currency\": \"USD\", \"unit_amount\": 10000}],\n    }\n    plan = client.create_plan(plan_create)\n    print(\"Created Plan %s\" % plan)\nexcept recurly.errors.ValidationError as e:\n    # If the request was invalid, you may want to tell your user\n    # why. You can find the invalid params and reasons in e.error.params\n    print(\"ValidationError: %s\" % e.error.message)\n    print(e.error.params)\n"
          },
          {
            "lang": ".NET",
            "source": "try\n{\n    var planReq = new PlanCreate()\n    {\n        Name = \"Monthly Coffee Subscription\",\n        Code = planCode,\n        Currencies = new List<PlanPricing>() {\n            new PlanPricing() {\n                Currency = \"USD\",\n                UnitAmount = 10000\n            }\n        }\n    };\n    Plan plan = client.CreatePlan(planReq);\n    Console.WriteLine($\"Created plan {plan.Code}\");\n}\ncatch (Recurly.Errors.Validation ex)\n{\n    // If the request was not valid, you may want to tell your user\n    // why. You can find the invalid params and reasons in ex.Error.Params\n    Console.WriteLine($\"Failed validation: {ex.Error.Message}\");\n}\ncatch (Recurly.Errors.ApiError ex)\n{\n    // Use ApiError to catch a generic error from the API\n    Console.WriteLine($\"Unexpected Recurly Error: {ex.Error.Message}\");\n}\n"
          },
          {
            "lang": "Ruby",
            "source": "begin\n  plan_create = {\n    code: plan_code,\n    name: plan_name,\n    currencies: [\n      currency: \"USD\",\n      setup_fee: 1_000\n    ],\n    add_ons: [\n      {\n        name: 'Extra User',\n        code: 'extra_user',\n        currencies: [\n          { currency: 'USD', unit_amount: 10_000 }\n        ]\n      }\n    ]\n  }\n  plan = @client.create_plan(body: plan_create)\n  puts \"Created Plan #{plan}\"\nrescue Recurly::Errors::ValidationError => e\n  # If the request was invalid, you may want to tell your user\n  # why. You can find the invalid params and reasons in e.recurly_error.params\n  puts \"ValidationError: #{e.recurly_error.params}\"\nend\n"
          },
          {
            "lang": "Java",
            "source": "try {\n    PlanCreate planCreate = new PlanCreate();\n\n    planCreate.setName(\"Monthly Coffee Subscription\");\n    planCreate.setCode(planCode);\n\n    List<PlanPricing> currencies = new ArrayList<PlanPricing>();\n    PlanPricing planPrice = new PlanPricing();\n    planPrice.setCurrency(\"USD\");\n    planPrice.setUnitAmount(10000.0f);\n    currencies.add(planPrice);\n\n    planCreate.setCurrencies(currencies);\n\n    Plan plan = client.createPlan(planCreate);\n    System.out.println(\"Created Plan \" + planCode);\n} catch (ValidationException e) {\n    // If the request was not valid, you may want to tell your user\n    // why. You can find the invalid params and reasons in e.getError().getParams()\n    System.out.println(\"Failed validation: \" + e.getError().getMessage());\n} catch (ApiException e) {\n    // Use ApiException to catch a generic error from the API\n    System.out.println(\"Unexpected Recurly Error: \" + e.getError().getMessage());\n}\n"
          },
          {
            "lang": "PHP",
            "source": "try {\n    $plan_create = array(\n        \"name\" => \"Monthly Coffee Subscription\",\n        \"code\" => $plan_code,\n        \"currencies\" => [\n            array(\n                \"currency\" => \"USD\",\n                \"unit_amount\" => 10000\n            )\n        ]\n    );\n\n    $plan = $client->createPlan($plan_create);\n\n    echo 'Created Plan:' . PHP_EOL;\n    var_dump($plan);\n} catch (\\Recurly\\Errors\\Validation $e) {\n    // If the request was not valid, you may want to tell your user\n    // why. You can find the invalid params and reasons in err.params\n    var_dump($e);\n} catch (\\Recurly\\RecurlyError $e) {\n    // If we don't know what to do with the err, we should\n    // probably re-raise and let our web framework and logger handle it\n    var_dump($e);\n}\n"
          },
          {
            "lang": "Go",
            "source": "planReq := &recurly.PlanCreate{\n\tCode: &planCode,\n\tName: recurly.String(\"Monthly Coffee Subscription\"),\n\tCurrencies: []recurly.PlanPricingCreate{\n\t\t{\n\t\t\tCurrency:   recurly.String(\"USD\"),\n\t\t\tUnitAmount: recurly.Float(10000),\n\t\t},\n\t},\n}\n\nplan, err := client.CreatePlan(planReq)\nif e, ok := err.(*recurly.Error); ok {\n\tif e.Type == recurly.ErrorTypeValidation {\n\t\tfmt.Printf(\"Failed validation: %v\", e)\n\t\treturn nil, err\n\t}\n\tfmt.Printf(\"Unexpected Recurly error: %v\", e)\n\treturn nil, err\n}\nfmt.Printf(\"Created Plan: %v\", plan.Id)"
          }
        ]
      }
    },
    "/sites/{site_id}/plans/{plan_id}": {
      "get": {
        "tags": [
          "plan"
        ],
        "summary": "Fetch a plan",
        "operationId": "get_plan",
        "parameters": [
          {
            "name": "site_id",
            "in": "path",
            "description": "Site ID or subdomain. For ID no prefix is used e.g. `e28zov4fw0v2`. For subdomain use prefix `subdomain-`, e.g. `subdomain-recurly`.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "plan_id",
            "in": "path",
            "description": "Plan ID or code. For ID no prefix is used e.g. `e28zov4fw0v2`. For code use prefix `code-`, e.g. `code-gold`.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A plan.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Plan"
                }
              }
            }
          },
          "404": {
            "description": "Incorrect site or plan ID.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "Node.js",
            "source": "try {\n  const plan = await client.getPlan(planId)\n  console.log('Fetched plan: ', plan.code)\n} catch (err) {\n  if (err instanceof recurly.errors.NotFoundError) {\n    // If the request was not found, you may want to alert the user or\n    // just return null\n    console.log('Resource Not Found')\n  } else {\n    // If we don't know what to do with the err, we should\n    // probably re-raise and let our web framework and logger handle it\n    console.log('Unknown Error: ', err)\n  }\n}\n"
          },
          {
            "lang": "Python",
            "source": "try:\n    plan = client.get_plan(plan_id)\n    print(\"Got Plan %s\" % plan)\nexcept recurly.errors.NotFoundError:\n    # If the resource was not found, you may want to alert the user or\n    # just return nil\n    print(\"Resource Not Found\")\n"
          },
          {
            "lang": ".NET",
            "source": "try\n{\n    Plan plan = client.GetPlan(planId);\n    Console.WriteLine($\"Fetched plan {plan.Code}\");\n}\ncatch (Recurly.Errors.NotFound ex)\n{\n    // If the resource was not found\n    // we may want to alert the user or just return null\n    Console.WriteLine($\"Resource Not Found: {ex.Error.Message}\");\n}\ncatch (Recurly.Errors.ApiError ex)\n{\n    // Use ApiError to catch a generic error from the API\n    Console.WriteLine($\"Unexpected Recurly Error: {ex.Error.Message}\");\n}\n"
          },
          {
            "lang": "Ruby",
            "source": "begin\n  plan = @client.get_plan(plan_id: plan_id)\n  puts \"Got plan #{plan}\"\nrescue Recurly::Errors::NotFoundError\n  # If the resource was not found, you may want to alert the user or\n  # just return nil\n  puts \"Resource Not Found\"\nend\n"
          },
          {
            "lang": "Java",
            "source": "try {\n    final Plan plan = client.getPlan(planId);\n    System.out.println(\"Fetched plan \" + plan.getCode());\n} catch (NotFoundException e) {\n    // If the resource was not found\n    // we may want to alert the user or just return null\n    System.out.println(\"Resource Not Found: \" + e.getError().getMessage());\n} catch (ApiException e) {\n    // Use ApiException to catch a generic error from the API\n    System.out.println(\"Unexpected Recurly Error: \" + e.getError().getMessage());\n}\n"
          },
          {
            "lang": "PHP",
            "source": "try {\n    $plan = $client->getPlan($plan_id);\n\n    echo 'Got Plan:' . PHP_EOL;\n    var_dump($plan);\n} catch (\\Recurly\\Errors\\NotFound $e) {\n    // Could not find the resource, you may want to inform the user\n    // or just return a NULL\n    echo 'Could not find resource.' . PHP_EOL;\n    var_dump($e);\n} catch (\\Recurly\\RecurlyError $e) {\n    // Something bad happened... tell the user so that they can fix it?\n    echo 'Some unexpected Recurly error happened. Try again later.' . PHP_EOL;\n}\n"
          },
          {
            "lang": "Go",
            "source": "plan, err := client.GetPlan(planID)\nif e, ok := err.(*recurly.Error); ok {\n\tif e.Type == recurly.ErrorTypeNotFound {\n\t\tfmt.Printf(\"Resource not found: %v\", e)\n\t\treturn nil, err\n\t}\n\tfmt.Printf(\"Unexpected Recurly error: %v\", e)\n\treturn nil, err\n}\n\nfmt.Printf(\"Fetched Plan: %s\", plan.Id)"
          }
        ]
      },
      "put": {
        "tags": [
          "plan"
        ],
        "summary": "Update a plan",
        "operationId": "update_plan",
        "parameters": [
          {
            "name": "site_id",
            "in": "path",
            "description": "Site ID or subdomain. For ID no prefix is used e.g. `e28zov4fw0v2`. For subdomain use prefix `subdomain-`, e.g. `subdomain-recurly`.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "plan_id",
            "in": "path",
            "description": "Plan ID or code. For ID no prefix is used e.g. `e28zov4fw0v2`. For code use prefix `code-`, e.g. `code-gold`.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PlanUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "A plan.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Plan"
                }
              }
            }
          },
          "404": {
            "description": "Incorrect site ID.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "422": {
            "description": "A validation error such as 'Code has already been taken.'",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "Node.js",
            "source": "try {\n  const planUpdate = {\n    name: 'New monthly coffee subscription'\n  }\n  const plan = await client.updatePlan(planId, planUpdate)\n  console.log('Updated plan: ', plan.code)\n} catch (err) {\n  if (err instanceof recurly.errors.ValidationError) {\n    // If the request was not valid, you may want to tell your user\n    // why. You can find the invalid params and reasons in err.params\n    console.log('Failed validation', err.params)\n  } else {\n    // If we don't know what to do with the err, we should\n    // probably re-raise and let our web framework and logger handle it\n    console.log('Unknown Error: ', err)\n  }\n}\n"
          },
          {
            "lang": "Python",
            "source": "try:\n    plan_update = {\n      \"name\": \"Monthly Kombucha Subscription\",\n    }\n    plan = client.update_plan(plan_id, plan_update)\n    print(\"Updated Plan %s\" % plan)\nexcept recurly.errors.NotFoundError:\n    # If the resource was not found, you may want to alert the user or\n    # just return nil\n    print(\"Resource Not Found\")\n"
          },
          {
            "lang": ".NET",
            "source": "try\n{\n    var planReq = new PlanUpdate() {\n        Name = \"New Monthly Coffee Subscription\"\n    };\n    Plan plan = client.UpdatePlan(planId, planReq);\n    Console.WriteLine($\"Updated plan {plan.Code}\");\n}\ncatch (Recurly.Errors.Validation ex)\n{\n    // If the request was not valid, you may want to tell your user\n    // why. You can find the invalid params and reasons in ex.Error.Params\n    Console.WriteLine($\"Failed validation: {ex.Error.Message}\");\n}\ncatch (Recurly.Errors.ApiError ex)\n{\n    // Use ApiError to catch a generic error from the API\n    Console.WriteLine($\"Unexpected Recurly Error: {ex.Error.Message}\");\n}\n"
          },
          {
            "lang": "Ruby",
            "source": "begin\n  plan_update = {\n    name: \"Monthly Kombucha Subscription\"\n  }\n  plan = @client.update_plan(plan_id: plan_id, body: plan_update)\n  puts \"Updated plan #{plan}\"\nrescue Recurly::Errors::NotFoundError\n  # If the resource was not found, you may want to alert the user or\n  # just return nil\n  puts \"Resource Not Found\"\nend\n"
          },
          {
            "lang": "Java",
            "source": "try {\n    final PlanUpdate planUpdate = new PlanUpdate();\n    planUpdate.setName(\"New Monthly Coffee Subscription\");\n\n    final Plan plan = client.updatePlan(planId, planUpdate);\n    System.out.println(\"Updated plan \" + plan.getCode());\n} catch (ValidationException e) {\n    // If the request was not valid, you may want to tell your user\n    // why. You can find the invalid params and reasons in e.getError().getParams()\n    System.out.println(\"Failed validation: \" + e.getError().getMessage());\n} catch (ApiException e) {\n    // Use ApiException to catch a generic error from the API\n    System.out.println(\"Unexpected Recurly Error: \" + e.getError().getMessage());\n}\n"
          },
          {
            "lang": "PHP",
            "source": "try {\n    $plan_update = array(\n        \"name\" => \"Monthly Tea Subscription\"\n    );\n    $plan = $client->updatePlan($plan_id, $plan_update);\n\n    echo 'Updated Plan:' . PHP_EOL;\n    var_dump($plan);\n} catch (\\Recurly\\Errors\\Validation $e) {\n    // If the request was not valid, you may want to tell your user\n    // why. You can find the invalid params and reasons in err.params\n    var_dump($e);\n} catch (\\Recurly\\RecurlyError $e) {\n    // If we don't know what to do with the err, we should\n    // probably re-raise and let our web framework and logger handle it\n    var_dump($e);\n}\n"
          },
          {
            "lang": "Go",
            "source": "updateReq := &recurly.PlanUpdate{\n\tName: recurly.String(\"Monthly Houseplant Subscription\"),\n}\nplan, err := client.UpdatePlan(planID, updateReq)\nif e, ok := err.(*recurly.Error); ok {\n\tif e.Type == recurly.ErrorTypeValidation {\n\t\tfmt.Printf(\"Failed validation: %v\", e)\n\t\treturn nil, err\n\t}\n\tfmt.Printf(\"Unexpected Recurly error: %v\", e)\n\treturn nil, err\n}\n\nfmt.Printf(\"Updated Plan: %s\", plan.Id)"
          }
        ]
      },
      "delete": {
        "tags": [
          "plan"
        ],
        "summary": "Remove a plan",
        "operationId": "remove_plan",
        "parameters": [
          {
            "name": "site_id",
            "in": "path",
            "description": "Site ID or subdomain. For ID no prefix is used e.g. `e28zov4fw0v2`. For subdomain use prefix `subdomain-`, e.g. `subdomain-recurly`.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "plan_id",
            "in": "path",
            "description": "Plan ID or code. For ID no prefix is used e.g. `e28zov4fw0v2`. For code use prefix `code-`, e.g. `code-gold`.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Plan deleted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Plan"
                }
              }
            }
          },
          "404": {
            "description": "Incorrect site or plan ID.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "Node.js",
            "source": "try {\n  const plan = await client.removePlan(planId)\n  console.log('Removed plan: ', plan.code)\n} catch (err) {\n  if (err instanceof recurly.errors.NotFoundError) {\n    // If the request was not found, you may want to alert the user or\n    // just return null\n    console.log('Resource Not Found')\n  } else {\n    // If we don't know what to do with the err, we should\n    // probably re-raise and let our web framework and logger handle it\n    console.log('Unknown Error: ', err)\n  }\n}\n"
          },
          {
            "lang": "Python",
            "source": "try:\n    plan = client.remove_plan(plan_id)\n    print(\"Removed Plan %s\" % plan)\nexcept recurly.errors.NotFoundError:\n    # If the resource was not found, you may want to alert the user or\n    # just return nil\n    print(\"Resource Not Found\")\n"
          },
          {
            "lang": ".NET",
            "source": "try\n{\n    Plan plan = client.RemovePlan(planId);\n    Console.WriteLine($\"Removed plan {plan.Code}\");\n}\ncatch (Recurly.Errors.Validation ex)\n{\n    // If the request was not valid, you may want to tell your user\n    // why. You can find the invalid params and reasons in ex.Error.Params\n    Console.WriteLine($\"Failed validation: {ex.Error.Message}\");\n}\ncatch (Recurly.Errors.ApiError ex)\n{\n    // Use ApiError to catch a generic error from the API\n    Console.WriteLine($\"Unexpected Recurly Error: {ex.Error.Message}\");\n}\n"
          },
          {
            "lang": "Ruby",
            "source": "begin\n  plan = @client.remove_plan(plan_id: plan_id)\n  puts \"Removed plan #{plan}\"\nrescue Recurly::Errors::NotFoundError\n  # If the resource was not found, you may want to alert the user or\n  # just return nil\n  puts \"Resource Not Found\"\nend\n"
          },
          {
            "lang": "Java",
            "source": "try {\n    final Plan plan = client.removePlan(planId);\n    System.out.println(\"Removed plan \" + plan.getCode());\n} catch (ValidationException e) {\n    // If the request was not valid, you may want to tell your user\n    // why. You can find the invalid params and reasons in e.getError().getParams()\n    System.out.println(\"Failed validation: \" + e.getError().getMessage());\n} catch (ApiException e) {\n    // Use ApiException to catch a generic error from the API\n    System.out.println(\"Unexpected Recurly Error: \" + e.getError().getMessage());\n}\n"
          },
          {
            "lang": "PHP",
            "source": "try {\n    $plan = $client->removePlan($plan_id);\n    echo 'Removed Plan: ' . $plan_id . PHP_EOL;\n} catch (\\Recurly\\Errors\\Validation $e) {\n    // If the request was not valid, you may want to tell your user\n    // why. You can find the invalid params and reasons in err.params\n    var_dump($e);\n} catch (\\Recurly\\RecurlyError $e) {\n    // If we don't know what to do with the err, we should\n    // probably re-raise and let our web framework and logger handle it\n    var_dump($e);\n}\n"
          },
          {
            "lang": "Go",
            "source": "plan, err := client.RemovePlan(planID)\nif e, ok := err.(*recurly.Error); ok {\n\tif e.Type == recurly.ErrorTypeNotFound {\n\t\tfmt.Printf(\"Resource not found: %v\", e)\n\t\treturn nil, err\n\t}\n\tfmt.Printf(\"Unexpected Recurly error: %v\", e)\n\treturn nil, err\n}\n\nfmt.Printf(\"Removed Plan: %s\", plan.Id)"
          }
        ]
      }
    },
    "/sites/{site_id}/plans/{plan_id}/add_ons": {
      "get": {
        "tags": [
          "add-on",
          "plan"
        ],
        "summary": "List a plan's add-ons",
        "operationId": "list_plan_add_ons",
        "parameters": [
          {
            "name": "site_id",
            "in": "path",
            "description": "Site ID or subdomain. For ID no prefix is used e.g. `e28zov4fw0v2`. For subdomain use prefix `subdomain-`, e.g. `subdomain-recurly`.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "plan_id",
            "in": "path",
            "description": "Plan ID or code. For ID no prefix is used e.g. `e28zov4fw0v2`. For code use prefix `code-`, e.g. `code-gold`.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ids",
            "in": "query",
            "description": "Filter results by their IDs. Up to 200 IDs can be passed at once using\ncommas as separators, e.g. `ids=h1at4d57xlmy,gyqgg0d3v9n1,jrsm5b4yefg6`.\n\n**Important notes:**\n\n* The `ids` parameter cannot be used with any other ordering or filtering\n  parameters (`limit`, `order`, `sort`, `begin_time`, `end_time`, etc)\n* Invalid or unknown IDs will be ignored, so you should check that the\n  results correspond to your request.\n* Records are returned in an arbitrary order. Since results are all\n  returned at once you can sort the records yourself.\n",
            "required": false,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit number of records 1-200.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maximum": 200,
              "minimum": 1,
              "type": "integer",
              "default": 20
            }
          },
          {
            "name": "order",
            "in": "query",
            "description": "Sort order.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "default": "desc",
              "enum": [
                "asc",
                "desc"
              ]
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort field. You *really* only want to sort by `updated_at` in ascending\norder. In descending order updated records will move behind the cursor and could\nprevent some records from being returned.\n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "default": "created_at",
              "enum": [
                "created_at",
                "updated_at"
              ]
            }
          },
          {
            "name": "begin_time",
            "in": "query",
            "description": "Filter by begin_time when `sort=created_at` or `sort=updated_at`.\n**Note:** this value is an ISO8601 timestamp. A partial timestamp that does not include a time zone will default to UTC.\n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "end_time",
            "in": "query",
            "description": "Filter by end_time when `sort=created_at` or `sort=updated_at`.\n**Note:** this value is an ISO8601 timestamp. A partial timestamp that does not include a time zone will default to UTC.\n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "state",
            "in": "query",
            "description": "Filter by state.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": [
                "active",
                "inactive"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of add-ons.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddOnList"
                }
              }
            }
          },
          "400": {
            "description": "Invalid or unpermitted parameter.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Incorrect site or plan ID.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "Node.js",
            "source": "const addOns = client.listPlanAddOns(planId, { limit: 200 })\n\nfor await (const addOn of addOns.each()) {\n  console.log(addOn.code)\n}\n"
          },
          {
            "lang": "Python",
            "source": "add_ons = client.list_plan_add_ons(plan_id).items()\nfor add_on in add_ons:\n    print(add_on.code)\n"
          },
          {
            "lang": ".NET",
            "source": "var addOns = client.ListPlanAddOns(planId);\nforeach(AddOn addOn in addOns)\n{\n    Console.WriteLine(addOn.Code);\n}\n"
          },
          {
            "lang": "Ruby",
            "source": "add_ons = @client.list_plan_add_ons(\n  plan_id: plan_id,\n  limit: 200\n)\nadd_ons.each do |add_on|\n  puts \"AddOn: #{add_on.code}\"\nend\n"
          },
          {
            "lang": "Java",
            "source": "QueryParams params = new QueryParams();\nparams.setLimit(200); // Pull 200 records at a time\nfinal Pager<AddOn> addOns = client.listPlanAddOns(planId, params);\n\nfor (AddOn addOn : addOns) {\n    System.out.println(addOn.getCode());\n}\n"
          },
          {
            "lang": "PHP",
            "source": "$params = ['limit' => 200];\n$plan_add_ons = $client->listPlanAddOns($plan_id, $params);\n\nforeach($plan_add_ons as $add_on) {\n  echo 'Plan add-on: ' . $add_on->getCode() . PHP_EOL;\n}\n"
          },
          {
            "lang": "Go",
            "source": "listParams := &recurly.ListPlanAddOnsParams{\n\tSort:  recurly.String(\"created_at\"),\n\tOrder: recurly.String(\"desc\"),\n\tLimit: recurly.Int(200),\n}\naddOns := client.ListPlanAddOns(planID, listParams)\n\nfor addOns.HasMore {\n\terr := addOns.Fetch()\n\tif e, ok := err.(*recurly.Error); ok {\n\t\tfmt.Printf(\"Failed to retrieve next page: %v\", e)\n\t\tbreak\n\t}\n\tfor i, addOn := range addOns.Data {\n\t\tfmt.Printf(\"Add-On %3d: %s, %s\\n\",\n\t\t\ti,\n\t\t\taddOn.Id,\n\t\t\taddOn.Code,\n\t\t)\n\t}\n}"
          }
        ]
      },
      "post": {
        "tags": [
          "add-on",
          "plan"
        ],
        "summary": "Create an add-on",
        "operationId": "create_plan_add_on",
        "parameters": [
          {
            "name": "site_id",
            "in": "path",
            "description": "Site ID or subdomain. For ID no prefix is used e.g. `e28zov4fw0v2`. For subdomain use prefix `subdomain-`, e.g. `subdomain-recurly`.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "plan_id",
            "in": "path",
            "description": "Plan ID or code. For ID no prefix is used e.g. `e28zov4fw0v2`. For code use prefix `code-`, e.g. `code-gold`.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddOnCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "An add-on.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddOn"
                }
              }
            }
          },
          "404": {
            "description": "Incorrect site ID or plan ID.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "422": {
            "description": "A validation error such as 'Code has already been taken.'",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "Node.js",
            "source": "try {\n  const addOnCreate = {\n    code: 'coffee_grinder',\n    name: 'A quality grinder for your beans',\n    defaultQuantity: 1,\n    currencies: [\n      {\n        currency: 'USD',\n        unitAmount: 10000\n      }\n    ]\n  }\n\n  const addOn = await client.createPlanAddOn(planId, addOnCreate)\n  console.log('Created add-on: ', addOn.code)\n} catch (err) {\n  if (err instanceof recurly.errors.ValidationError) {\n    // If the request was not valid, you may want to tell your user\n    // why. You can find the invalid params and reasons in err.params\n    console.log('Failed validation', err.params)\n  } else {\n    // If we don't know what to do with the err, we should\n    // probably re-raise and let our web framework and logger handle it\n    console.log('Unknown Error: ', err)\n  }\n}\n"
          },
          {
            "lang": "Python",
            "source": "try:\n    add_on_create = {\n        \"code\": \"coffee_grinder\",\n        \"name\": \"A quality grinder for your beans\",\n        \"default_quantity\": 1,\n        \"currencies\": [{\"currency\": \"USD\", \"unit_amount\": 10000}],\n    }\n    add_on = client.create_plan_add_on(plan_id, add_on_create)\n    print(\"Created PlanAddOn %s\" % add_on)\nexcept recurly.errors.ValidationError as e:\n    # If the request was invalid, you may want to tell your user\n    # why. You can find the invalid params and reasons in e.error.params\n    print(\"ValidationError: %s\" % e.error.message)\n    print(e.error.params)\n"
          },
          {
            "lang": ".NET",
            "source": "try\n{\n    var addOnReq = new AddOnCreate() {\n        Code = \"coffee_grinder\",\n        Name = \"A quality grinder for your beans\",\n        DefaultQuantity = 1,\n        Currencies = new List<AddOnPricing>() {\n            new AddOnPricing() {\n                Currency = \"USD\",\n                UnitAmount = 10000\n            }\n        }\n    };\n    AddOn addOn = client.CreatePlanAddOn(planId, addOnReq);\n    Console.WriteLine($\"Created add-on {addOn.Code}\");\n}\ncatch (Recurly.Errors.Validation ex)\n{\n    // If the request was not valid, you may want to tell your user\n    // why. You can find the invalid params and reasons in ex.Error.Params\n    Console.WriteLine($\"Failed validation: {ex.Error.Message}\");\n}\ncatch (Recurly.Errors.ApiError ex)\n{\n    // Use ApiError to catch a generic error from the API\n    Console.WriteLine($\"Unexpected Recurly Error: {ex.Error.Message}\");\n}\n"
          },
          {
            "lang": "Ruby",
            "source": "begin\n  new_add_on = {\n    code: 'coffee_grinder',\n    name: 'A quality grinder for your beans',\n    default_quantity: 1,\n    currencies: [\n      {\n        currency: 'USD',\n        unit_amount: 10_000\n      }\n    ]\n  }\n  add_on = @client.create_plan_add_on(plan_id: plan_id, body: new_add_on)\n  puts \"Created plan add-on #{add_on}\"\nrescue Recurly::Errors::NotFoundError\n  # If the resource was not found, you may want to alert the user or\n  # just return nil\n  puts \"Resource Not Found\"\nend\n"
          },
          {
            "lang": "Java",
            "source": "try {\n    AddOnCreate addOnCreate = new AddOnCreate();\n\n    addOnCreate.setCode(\"coffee-grinder\");\n    addOnCreate.setName(\"A quality grinder for your beans\");\n    addOnCreate.setDefaultQuantity(1);\n\n    List<AddOnPricing> currencies = new ArrayList<AddOnPricing>();\n    AddOnPricing addOnPrice = new AddOnPricing();\n    addOnPrice.setCurrency(\"USD\");\n    addOnPrice.setUnitAmount(10000.0f);\n    currencies.add(addOnPrice);\n\n    addOnCreate.setCurrencies(currencies);\n\n    AddOn addOn = client.createPlanAddOn(planId, addOnCreate);\n    System.out.println(\"Created add-on \" + addOn.getCode());\n} catch (ValidationException e) {\n    // If the request was not valid, you may want to tell your user\n    // why. You can find the invalid params and reasons in e.getError().getParams()\n    System.out.println(\"Failed validation: \" + e.getError().getMessage());\n} catch (ApiException e) {\n    // Use ApiException to catch a generic error from the API\n    System.out.println(\"Unexpected Recurly Error: \" + e.getError().getMessage());\n}\n"
          },
          {
            "lang": "PHP",
            "source": "try {\n    $add_on_create = [\n        \"code\" => $add_on_code,\n        \"name\" => \"Fresh beans shipped monthly\",\n        \"currencies\" => [\n            array(\n                \"currency\" => \"USD\",\n                \"unit_amount\" => 10\n            )\n        ]\n    ];\n\n    $add_on = $client->createPlanAddOn($plan_id, $add_on_create);\n\n    echo 'Created Plan:' . PHP_EOL;\n    var_dump($plan);\n} catch (\\Recurly\\Errors\\Validation $e) {\n    // If the request was not valid, you may want to tell your user\n    // why. You can find the invalid params and reasons in err.params\n    var_dump($e);\n} catch (\\Recurly\\RecurlyError $e) {\n    // If we don't know what to do with the err, we should\n    // probably re-raise and let our web framework and logger handle it\n    var_dump($e);\n}\n"
          },
          {
            "lang": "Go",
            "source": "addOnReq := &recurly.AddOnCreate{\n\tCode: &addOnCode,\n\tName: recurly.String(\"Fresh beans shipped monthly\"),\n\tCurrencies: []recurly.AddOnPricingCreate{\n\t\t{\n\t\t\tCurrency:   recurly.String(\"USD\"),\n\t\t\tUnitAmount: recurly.Float(10),\n\t\t},\n\t},\n}\n\nplanAddOn, err := client.CreatePlanAddOn(planID, addOnReq)\nif e, ok := err.(*recurly.Error); ok {\n\tif e.Type == recurly.ErrorTypeValidation {\n\t\tfmt.Printf(\"Failed validation: %v\", e)\n\t\treturn nil, err\n\t}\n\tfmt.Printf(\"Unexpected Recurly error: %v\", e)\n\treturn nil, err\n}\nfmt.Printf(\"Created Plan Add-On: %v\", planAddOn.Id)"
          }
        ]
      }
    },
    "/sites/{site_id}/plans/{plan_id}/add_ons/{add_on_id}": {
      "get": {
        "tags": [
          "plan",
          "add-on"
        ],
        "summary": "Fetch a plan's add-on",
        "operationId": "get_plan_add_on",
        "parameters": [
          {
            "name": "site_id",
            "in": "path",
            "description": "Site ID or subdomain. For ID no prefix is used e.g. `e28zov4fw0v2`. For subdomain use prefix `subdomain-`, e.g. `subdomain-recurly`.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "plan_id",
            "in": "path",
            "description": "Plan ID or code. For ID no prefix is used e.g. `e28zov4fw0v2`. For code use prefix `code-`, e.g. `code-gold`.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "add_on_id",
            "in": "path",
            "description": "Add-on ID or code. For ID no prefix is used e.g. `e28zov4fw0v2`. For code use prefix `code-`, e.g. `code-gold`.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An add-on.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddOn"
                }
              }
            }
          },
          "404": {
            "description": "Incorrect site, plan or add-on ID.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "Node.js",
            "source": "try {\n  const addOn = await client.getPlanAddOn(planId, addOnId)\n  console.log('Fetched add-on: ', addOn.code)\n} catch (err) {\n  if (err instanceof recurly.errors.NotFoundError) {\n    // If the request was not found, you may want to alert the user or\n    // just return null\n    console.log('Resource Not Found')\n  } else {\n    // If we don't know what to do with the err, we should\n    // probably re-raise and let our web framework and logger handle it\n    console.log('Unknown Error: ', err)\n  }\n}\n"
          },
          {
            "lang": "Python",
            "source": "try:\n    add_on = client.get_plan_add_on(plan_id, add_on_id)\n    print(\"Got Plan Add-On %s\" % add_on)\nexcept recurly.errors.NotFoundError:\n    # If the resource was not found, you may want to alert the user or\n    # just return nil\n    print(\"Resource Not Found\")\n"
          },
          {
            "lang": ".NET",
            "source": "try\n{\n    AddOn addOn = client.GetPlanAddOn(planId, addOnId);\n    Console.WriteLine($\"Fetched add-on {addOn.Code}\");\n}\ncatch (Recurly.Errors.NotFound ex)\n{\n    // If the resource was not found\n    // we may want to alert the user or just return null\n    Console.WriteLine($\"Resource Not Found: {ex.Error.Message}\");\n}\ncatch (Recurly.Errors.ApiError ex)\n{\n    // Use ApiError to catch a generic error from the API\n    Console.WriteLine($\"Unexpected Recurly Error: {ex.Error.Message}\");\n}\n"
          },
          {
            "lang": "Ruby",
            "source": "begin\n  add_on = @client.get_plan_add_on(\n    plan_id: plan_id, add_on_id: add_on_id\n  )\n  puts \"Got plan add-on #{add_on}\"\nrescue Recurly::Errors::NotFoundError\n  # If the resource was not found, you may want to alert the user or\n  # just return nil\n  puts \"Resource Not Found\"\nend\n"
          },
          {
            "lang": "Java",
            "source": "try {\n    final AddOn addOn = client.getPlanAddOn(planId, addOnId);\n    System.out.println(\"Fetched add-on \" + addOn.getCode());\n} catch (NotFoundException e) {\n    // If the resource was not found\n    // we may want to alert the user or just return null\n    System.out.println(\"Resource Not Found: \" + e.getError().getMessage());\n} catch (ApiException e) {\n    // Use ApiException to catch a generic error from the API\n    System.out.println(\"Unexpected Recurly Error: \" + e.getError().getMessage());\n}\n"
          },
          {
            "lang": "PHP",
            "source": "try {\n    $add_on = $client->getPlanAddOn($plan_id, $add_on_id);\n\n    echo 'Got Plan Add-On:' . PHP_EOL;\n    var_dump($add_on);\n} catch (\\Recurly\\Errors\\NotFound $e) {\n    // Could not find the resource, you may want to inform the user\n    // or just return a NULL\n    echo 'Could not find resource.' . PHP_EOL;\n    var_dump($e);\n} catch (\\Recurly\\RecurlyError $e) {\n    // Something bad happened... tell the user so that they can fix it?\n    echo 'Some unexpected Recurly error happened. Try again later.' . PHP_EOL;\n}\n"
          },
          {
            "lang": "Go",
            "source": "planAddOn, err := client.GetPlanAddOn(planID, planAddOnID)\nif e, ok := err.(*recurly.Error); ok {\n\tif e.Type == recurly.ErrorTypeNotFound {\n\t\tfmt.Printf(\"Resource not found: %v\", e)\n\t\treturn nil, err\n\t}\n\tfmt.Printf(\"Unexpected Recurly error: %v\", e)\n\treturn nil, err\n}\nfmt.Printf(\"Fetched Plan Add-On: %v\", planAddOn)"
          }
        ]
      },
      "put": {
        "tags": [
          "plan",
          "add-on"
        ],
        "summary": "Update an add-on",
        "operationId": "update_plan_add_on",
        "parameters": [
          {
            "name": "site_id",
            "in": "path",
            "description": "Site ID or subdomain. For ID no prefix is used e.g. `e28zov4fw0v2`. For subdomain use prefix `subdomain-`, e.g. `subdomain-recurly`.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "plan_id",
            "in": "path",
            "description": "Plan ID or code. For ID no prefix is used e.g. `e28zov4fw0v2`. For code use prefix `code-`, e.g. `code-gold`.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "add_on_id",
            "in": "path",
            "description": "Add-on ID or code. For ID no prefix is used e.g. `e28zov4fw0v2`. For code use prefix `code-`, e.g. `code-gold`.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddOnUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "An add-on.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddOn"
                }
              }
            }
          },
          "404": {
            "description": "Incorrect site, plan, or add-on ID.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "422": {
            "description": "A validation error such as 'Code has already been taken.'",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "Node.js",
            "source": "try {\n  const addOnUpdate = {\n    name: 'New AddOn Name',\n  }\n  const addOn = await client.updatePlanAddOn(planId, addOnId, addOnUpdate)\n  console.log('Updated add-on: ', addOn)\n} catch (err) {\n  if (err instanceof recurly.errors.ValidationError) {\n    // If the request was not valid, you may want to tell your user\n    // why. You can find the invalid params and reasons in err.params\n    console.log('Failed validation', err.params)\n  } else {\n    // If we don't know what to do with the err, we should\n    // probably re-raise and let our web framework and logger handle it\n    console.log('Unknown Error: ', err)\n  }\n}\n"
          },
          {
            "lang": "Python",
            "source": "try:\n    add_on_update = {\n      \"name\": \"New Add-On Name\",\n    }\n    add_on = client.update_plan_add_on(plan_id, add_on_id, add_on_update)\n    print(\"Updated Plan Add-On %s\" % add_on)\nexcept recurly.errors.NotFoundError:\n    # If the resource was not found, you may want to alert the user or\n    # just return nil\n    print(\"Resource Not Found\")\n"
          },
          {
            "lang": ".NET",
            "source": "try\n{\n    var addOnReq = new AddOnUpdate {\n      Name = \"New Add-On Name\"\n    };\n    AddOn addOn = client.UpdatePlanAddOn(planId, planAddOnId, addOnReq);\n    Console.WriteLine($\"Updated add-on: {addOn.Code}\");\n}\ncatch (Recurly.Errors.NotFound ex)\n{\n    // If the resource was not found\n    // we may want to alert the user or just return null\n    Console.WriteLine($\"Resource Not Found: {ex.Error.Message}\");\n}\ncatch (Recurly.Errors.ApiError ex)\n{\n    // Use ApiError to catch a generic error from the API\n    Console.WriteLine($\"Unexpected Recurly Error: {ex.Error.Message}\");\n}\n"
          },
          {
            "lang": "Ruby",
            "source": "begin\n  add_on_update = {\n    name: \"A quality grinder for your finest beans\"\n  }\n  add_on = @client.update_plan_add_on(\n    plan_id: plan_id, \n    add_on_id: add_on_id, \n    body: add_on_update\n  )\n  puts \"Updated add-on #{add_on}\"\nrescue Recurly::Errors::NotFoundError\n  # If the resource was not found, you may want to alert the user or\n  # just return nil\n  puts \"Resource Not Found\"\nend\n"
          },
          {
            "lang": "Java",
            "source": "try {\n    final AddOnUpdate addOnUpdate = new AddOnUpdate();\n    addOnUpdate.setName(\"New Add-On Name\");\n\n    final AddOn addOn = client.updatePlanAddOn(planId, addOnId, addOnUpdate);\n    System.out.println(\"Updated add-on \" + addOn.getCode());\n    System.out.println(addOn.getName());\n} catch (NotFoundException e) {\n    // If the resource was not found\n    // we may want to alert the user or just return null\n    System.out.println(\"Resource Not Found: \" + e.getError().getMessage());\n} catch (ApiException e) {\n    // Use ApiException to catch a generic error from the API\n    System.out.println(\"Unexpected Recurly Error: \" + e.getError().getMessage());\n}\n"
          },
          {
            "lang": "PHP",
            "source": "try {\n    $add_on_update = array(\n        \"name\" => \"New AddOn Name\",\n    );\n    $add_on = $client->updatePlanAddOn($plan_id, $add_on_id, $add_on_update);\n\n    echo ' Updated Plan AddOn:' . PHP_EOL;\n    var_dump($add_on);\n} catch (\\Recurly\\Errors\\Validation $e) {\n    // If the request was not valid, you may want to tell your user\n    // why. You can find the invalid params and reasons in err.params\n    var_dump($e);\n} catch (\\Recurly\\RecurlyError $e) {\n    // If we don't know what to do with the err, we should\n    // probably re-raise and let our web framework and logger handle it\n    var_dump($e);\n}\n"
          },
          {
            "lang": "Go",
            "source": "updateReq := &recurly.AddOnUpdate{\n\tName: recurly.String(\"New Add-On Name\"),\n}\nplanAddOn, err := client.UpdatePlanAddOn(planID, planAddOnID, updateReq)\nif e, ok := err.(*recurly.Error); ok {\n\tif e.Type == recurly.ErrorTypeNotFound {\n\t\tfmt.Printf(\"Resource not found: %v\", e)\n\t\treturn nil, err\n\t}\n\tfmt.Printf(\"Unexpected Recurly error: %v\", e)\n\treturn nil, err\n}\nfmt.Printf(\"Updated Plan Add-On: %v\", planAddOn)"
          }
        ]
      },
      "delete": {
        "tags": [
          "plan",
          "add-on"
        ],
        "summary": "Remove an add-on",
        "operationId": "remove_plan_add_on",
        "parameters": [
          {
            "name": "site_id",
            "in": "path",
            "description": "Site ID or subdomain. For ID no prefix is used e.g. `e28zov4fw0v2`. For subdomain use prefix `subdomain-`, e.g. `subdomain-recurly`.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "plan_id",
            "in": "path",
            "description": "Plan ID or code. For ID no prefix is used e.g. `e28zov4fw0v2`. For code use prefix `code-`, e.g. `code-gold`.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "add_on_id",
            "in": "path",
            "description": "Add-on ID or code. For ID no prefix is used e.g. `e28zov4fw0v2`. For code use prefix `code-`, e.g. `code-gold`.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Add-on deleted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddOn"
                }
              }
            }
          },
          "404": {
            "description": "Incorrect site, plan, or add-on ID.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "Node.js",
            "source": "try {\n  const addOn = await client.removePlanAddOn(planId, addOnId)\n  console.log('Removed plan add-on: ', addOn)\n} catch (err) {\n  if (err instanceof recurly.errors.NotFoundError) {\n    // If the request was not found, you may want to alert the user or\n    // just return null\n    console.log('Resource Not Found')\n  } else {\n    // If we don't know what to do with the err, we should\n    // probably re-raise and let our web framework and logger handle it\n    console.log('Unknown Error: ', err)\n  }\n}\n"
          },
          {
            "lang": "Python",
            "source": "try:\n    add_on = client.remove_plan_add_on(plan_id, add_on_id)\n    print(\"Removed Plan Add-On %s\" % add_on_id)\nexcept recurly.errors.NotFoundError:\n    # If the resource was not found, you may want to alert the user or\n    # just return nil\n    print(\"Resource Not Found\")\n"
          },
          {
            "lang": ".NET",
            "source": "try\n{\n    AddOn addOn = client.RemovePlanAddOn(planId, planAddOnId);\n    Console.WriteLine($\"Removed Plan Add-On: {addOn.Code}\");\n}\ncatch (Recurly.Errors.NotFound ex)\n{\n    // If the resource was not found\n    // we may want to alert the user or just return null\n    Console.WriteLine($\"Resource Not Found: {ex.Error.Message}\");\n}\ncatch (Recurly.Errors.ApiError ex)\n{\n    // Use ApiError to catch a generic error from the API\n    Console.WriteLine($\"Unexpected Recurly Error: {ex.Error.Message}\");\n}\n"
          },
          {
            "lang": "Ruby",
            "source": "begin\n  add_on = @client.remove_plan_add_on(\n    plan_id: plan_id, \n    add_on_id: add_on_id\n  )\n  puts \"Removed add-on #{add_on}\"\nrescue Recurly::Errors::NotFoundError\n  # If the resource was not found, you may want to alert the user or\n  # just return nil\n  puts \"Resource Not Found\"\nend\n"
          },
          {
            "lang": "Java",
            "source": "try {\n  final AddOn addOn = client.removePlanAddOn(planId, addOnId);\n  System.out.println(\"Removed add-on \" + addOn.getCode());\n} catch (ValidationException e) {\n    // If the request was not valid, you may want to tell your user\n    // why. You can find the invalid params and reasons in e.getError().getParams()\n    System.out.println(\"Failed validation: \" + e.getError().getMessage());\n} catch (ApiException e) {\n    // Use ApiException to catch a generic error from the API\n    System.out.println(\"Unexpected Recurly Error: \" + e.getError().getMessage());\n}"
          },
          {
            "lang": "PHP",
            "source": "try {\n    $add_on = $client->removePlanAddOn($plan_id, $add_on_id);\n\n    echo 'Removed Plan AddOn:' . PHP_EOL;\n    var_dump($add_on);\n} catch (\\Recurly\\Errors\\Validation $e) {\n    // If the request was not valid, you may want to tell your user\n    // why. You can find the invalid params and reasons in err.params\n    var_dump($e);\n} catch (\\Recurly\\RecurlyError $e) {\n    // If we don't know what to do with the err, we should\n    // probably re-raise and let our web framework and logger handle it\n    var_dump($e);\n}\n"
          },
          {
            "lang": "Go",
            "source": "planAddOn, err := client.RemovePlanAddOn(planID, planAddOnID)\nif e, ok := err.(*recurly.Error); ok {\n\tif e.Type == recurly.ErrorTypeNotFound {\n\t\tfmt.Printf(\"Resource not found: %v\", e)\n\t\treturn nil, err\n\t}\n\tfmt.Printf(\"Unexpected Recurly error: %v\", e)\n\treturn nil, err\n}\nfmt.Printf(\"Removed Plan Add-On: %v\", planAddOn)"
          }
        ]
      }
    },
    "/sites/{site_id}/add_ons": {
      "get": {
        "tags": [
          "add-on"
        ],
        "summary": "List a site's add-ons",
        "operationId": "list_add_ons",
        "parameters": [
          {
            "name": "site_id",
            "in": "path",
            "description": "Site ID or subdomain. For ID no prefix is used e.g. `e28zov4fw0v2`. For subdomain use prefix `subdomain-`, e.g. `subdomain-recurly`.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ids",
            "in": "query",
            "description": "Filter results by their IDs. Up to 200 IDs can be passed at once using\ncommas as separators, e.g. `ids=h1at4d57xlmy,gyqgg0d3v9n1,jrsm5b4yefg6`.\n\n**Important notes:**\n\n* The `ids` parameter cannot be used with any other ordering or filtering\n  parameters (`limit`, `order`, `sort`, `begin_time`, `end_time`, etc)\n* Invalid or unknown IDs will be ignored, so you should check that the\n  results correspond to your request.\n* Records are returned in an arbitrary order. Since results are all\n  returned at once you can sort the records yourself.\n",
            "required": false,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit number of records 1-200.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maximum": 200,
              "minimum": 1,
              "type": "integer",
              "default": 20
            }
          },
          {
            "name": "order",
            "in": "query",
            "description": "Sort order.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "default": "desc",
              "enum": [
                "asc",
                "desc"
              ]
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort field. You *really* only want to sort by `updated_at` in ascending\norder. In descending order updated records will move behind the cursor and could\nprevent some records from being returned.\n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "default": "created_at",
              "enum": [
                "created_at",
                "updated_at"
              ]
            }
          },
          {
            "name": "begin_time",
            "in": "query",
            "description": "Filter by begin_time when `sort=created_at` or `sort=updated_at`.\n**Note:** this value is an ISO8601 timestamp. A partial timestamp that does not include a time zone will default to UTC.\n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "end_time",
            "in": "query",
            "description": "Filter by end_time when `sort=created_at` or `sort=updated_at`.\n**Note:** this value is an ISO8601 timestamp. A partial timestamp that does not include a time zone will default to UTC.\n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "state",
            "in": "query",
            "description": "Filter by state.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": [
                "active",
                "inactive"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of add-ons.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddOnList"
                }
              }
            }
          },
          "400": {
            "description": "Invalid or unpermitted parameter.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Incorrect site or add-on ID.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "Node.js",
            "source": "const addOns = client.listAddOns({ limit: 200 })\n\nfor await (const addOn of addOns.each()) {\n  console.log(addOn.code)\n}\n"
          },
          {
            "lang": "Python",
            "source": "add_ons = client.list_add_ons().items()\nfor add_on in add_ons:\n    print(\"Add-On %s\" % add_on.code)\n"
          },
          {
            "lang": ".NET",
            "source": "var addOns = client.ListAddOns();\nforeach(AddOn addOn in addOns)\n{\n    Console.WriteLine(addOn.Code);\n}\n"
          },
          {
            "lang": "Ruby",
            "source": "add_ons = @client.list_add_ons(\n  limit: 200\n)\nadd_ons.each do |add_on|\n  puts \"AddOn: #{add_on.code}\"\nend\n"
          },
          {
            "lang": "Java",
            "source": "QueryParams params = new QueryParams();\nparams.setLimit(200); // Pull 200 records at a time\nfinal Pager<AddOn> addOns = client.listAddOns(params);\n\nfor (AddOn addOn : addOns) {\n    System.out.println(addOn.getCode());\n}\n"
          },
          {
            "lang": "PHP",
            "source": "$params = ['limit' => 200];\n$add_ons = $client->listAddOns($params);\n\nforeach($add_ons as $addon) {\n  echo 'Add-on: ' . $addon->getCode() . PHP_EOL;\n}\n"
          },
          {
            "lang": "Go",
            "source": "listParams := &recurly.ListAddOnsParams{\n\tSort:  recurly.String(\"created_at\"),\n\tOrder: recurly.String(\"desc\"),\n\tLimit: recurly.Int(200),\n}\naddOns := client.ListAddOns(listParams)\n\nfor addOns.HasMore {\n\terr := addOns.Fetch()\n\tif e, ok := err.(*recurly.Error); ok {\n\t\tfmt.Printf(\"Failed to retrieve next page: %v\", e)\n\t\tbreak\n\t}\n\tfor i, addOn := range addOns.Data {\n\t\tfmt.Printf(\"Add On %3d: %s, %s\\n\",\n\t\t\ti,\n\t\t\taddOn.Id,\n\t\t\taddOn.Code,\n\t\t)\n\t}\n}"
          }
        ]
      }
    },
    "/sites/{site_id}/add_ons/{add_on_id}": {
      "get": {
        "tags": [
          "add-on"
        ],
        "summary": "Fetch an add-on",
        "operationId": "get_add_on",
        "parameters": [
          {
            "name": "site_id",
            "in": "path",
            "description": "Site ID or subdomain. For ID no prefix is used e.g. `e28zov4fw0v2`. For subdomain use prefix `subdomain-`, e.g. `subdomain-recurly`.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "add_on_id",
            "in": "path",
            "description": "Add-on ID or code. For ID no prefix is used e.g. `e28zov4fw0v2`. For code use prefix `code-`, e.g. `code-gold`.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An add-on.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddOn"
                }
              }
            }
          },
          "404": {
            "description": "Incorrect site or add-on ID.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "Node.js",
            "source": "try {\n  const addOn = await client.getAddOn(addOnId)\n  console.log('Fetched add-on: ', addOn)\n} catch (err) {\n  if (err instanceof recurly.errors.NotFoundError) {\n    // If the request was not found, you may want to alert the user or\n    // just return null\n    console.log('Resource Not Found')\n  } else {\n    // If we don't know what to do with the err, we should\n    // probably re-raise and let our web framework and logger handle it\n    console.log('Unknown Error: ', err)\n  }\n}\n"
          },
          {
            "lang": "Python",
            "source": "try:\n    add_on = client.get_add_on(add_on_id)\n    print(\"Got Add-On %s\" % add_on)\nexcept recurly.errors.NotFoundError:\n    # If the resource was not found, you may want to alert the user or\n    # just return nil\n    print(\"Resource Not Found\")\n"
          },
          {
            "lang": ".NET",
            "source": "try\n{\n    AddOn addOn = client.GetAddOn(addOnId);\n    Console.WriteLine($\"Fetched add-on: {addOn.Code}\");\n}\ncatch (Recurly.Errors.NotFound ex)\n{\n    // If the resource was not found\n    // we may want to alert the user or just return null\n    Console.WriteLine($\"Resource Not Found: {ex.Error.Message}\");\n}\ncatch (Recurly.Errors.ApiError ex)\n{\n    // Use ApiError to catch a generic error from the API\n    Console.WriteLine($\"Unexpected Recurly Error: {ex.Error.Message}\");\n}\n"
          },
          {
            "lang": "Ruby",
            "source": "begin\n  add_on = @client.get_add_on(add_on_id: add_on_id)\n  puts \"Got add-on #{add_on}\"\nrescue Recurly::Errors::NotFoundError\n  # If the resource was not found, you may want to alert the user or\n  # just return nil\n  puts \"Resource Not Found\"\nend\n"
          },
          {
            "lang": "Java",
            "source": "try {\n    final AddOn addOn = client.getAddOn(addOnId);\n    System.out.println(\"Fetched add-on \" + addOn.getCode());\n} catch (NotFoundException e) {\n    // If the resource was not found\n    // we may want to alert the user or just return null\n    System.out.println(\"Resource Not Found: \" + e.getError().getMessage());\n} catch (ApiException e) {\n    // Use ApiException to catch a generic error from the API\n    System.out.println(\"Unexpected Recurly Error: \" + e.getError().getMessage());\n}\n"
          },
          {
            "lang": "PHP",
            "source": "try {\n    $add_on = $client->getAddOn($add_on_id);\n\n    echo 'Got Plan Add-On:' . PHP_EOL;\n    var_dump($add_on);\n} catch (\\Recurly\\Errors\\NotFound $e) {\n    // Could not find the resource, you may want to inform the user\n    // or just return a NULL\n    echo 'Could not find resource.' . PHP_EOL;\n    var_dump($e);\n} catch (\\Recurly\\RecurlyError $e) {\n    // Something bad happened... tell the user so that they can fix it?\n    echo 'Some unexpected Recurly error happened. Try again later.' . PHP_EOL;\n}\n"
          },
          {
            "lang": "Go",
            "source": "addOn, err := client.GetAddOn(planAddOnID)\nif e, ok := err.(*recurly.Error); ok {\n\tif e.Type == recurly.ErrorTypeNotFound {\n\t\tfmt.Printf(\"Resource not found: %v\", e)\n\t\treturn nil, err\n\t}\n\tfmt.Printf(\"Unexpected Recurly error: %v\", e)\n\treturn nil, err\n}\n\nfmt.Printf(\"Fetched Add-On: %s\", addOn.Id)"
          }
        ]
      }
    },
    "/sites/{site_id}/shipping_methods": {
      "get": {
        "tags": [
          "shipping_method"
        ],
        "summary": "List a site's shipping methods",
        "operationId": "list_shipping_methods",
        "parameters": [
          {
            "name": "site_id",
            "in": "path",
            "description": "Site ID or subdomain. For ID no prefix is used e.g. `e28zov4fw0v2`. For subdomain use prefix `subdomain-`, e.g. `subdomain-recurly`.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ids",
            "in": "query",
            "description": "Filter results by their IDs. Up to 200 IDs can be passed at once using\ncommas as separators, e.g. `ids=h1at4d57xlmy,gyqgg0d3v9n1,jrsm5b4yefg6`.\n\n**Important notes:**\n\n* The `ids` parameter cannot be used with any other ordering or filtering\n  parameters (`limit`, `order`, `sort`, `begin_time`, `end_time`, etc)\n* Invalid or unknown IDs will be ignored, so you should check that the\n  results correspond to your request.\n* Records are returned in an arbitrary order. Since results are all\n  returned at once you can sort the records yourself.\n",
            "required": false,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit number of records 1-200.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maximum": 200,
              "minimum": 1,
              "type": "integer",
              "default": 20
            }
          },
          {
            "name": "order",
            "in": "query",
            "description": "Sort order.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "default": "desc",
              "enum": [
                "asc",
                "desc"
              ]
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort field. You *really* only want to sort by `updated_at` in ascending\norder. In descending order updated records will move behind the cursor and could\nprevent some records from being returned.\n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "default": "created_at",
              "enum": [
                "created_at",
                "updated_at"
              ]
            }
          },
          {
            "name": "begin_time",
            "in": "query",
            "description": "Filter by begin_time when `sort=created_at` or `sort=updated_at`.\n**Note:** this value is an ISO8601 timestamp. A partial timestamp that does not include a time zone will default to UTC.\n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "end_time",
            "in": "query",
            "description": "Filter by end_time when `sort=created_at` or `sort=updated_at`.\n**Note:** this value is an ISO8601 timestamp. A partial timestamp that does not include a time zone will default to UTC.\n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of the site's shipping methods.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ShippingMethodList"
                }
              }
            }
          },
          "400": {
            "description": "Invalid or unpermitted parameter.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Incorrect site ID.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "Node.js",
            "source": "const methods = client.listShippingMethods({ limit: 200 })\n\nfor await (const method of methods.each()) {\n  console.log(method.code)\n}\n"
          },
          {
            "lang": "Python",
            "source": "shipping_methods = client.list_shipping_methods(limit=200).items()\nfor shipping_method in shipping_methods:\n  print(\"Shipping Method %s\" % shipping_method.code)\n"
          },
          {
            "lang": ".NET",
            "source": "var shippingMethods = client.ListShippingMethods();\nforeach(ShippingMethod shippingMethod in shippingMethods)\n{\n    Console.WriteLine(shippingMethod.Code);\n}\n"
          },
          {
            "lang": "Ruby",
            "source": "shipping_methods = @client.list_shipping_methods(\n  limit: 200\n)\nshipping_methods.each do |shipping_method|\n  puts \"Shipping Method: #{shipping_method.code}\"\nend\n"
          },
          {
            "lang": "Java",
            "source": "QueryParams params = new QueryParams();\nparams.setLimit(200); // Pull 200 records at a time\nfinal Pager<ShippingMethod> shippingMethods = client.listShippingMethods(params);\n\nfor (ShippingMethod shippingMethod : shippingMethods) {\n    System.out.println(shippingMethod.getCode());\n}\n"
          },
          {
            "lang": "PHP",
            "source": "$params = ['limit' => 200];\n$shipping_methods = $client->listShippingMethods($params);\n\nforeach($shipping_methods as $shipping_method) {\n  echo 'Shipping Method: ' . $shipping_method->getCode() . PHP_EOL;\n}\n"
          },
          {
            "lang": "Go",
            "source": "listParams := &recurly.ListShippingMethodsParams{\n\tSort:  recurly.String(\"created_at\"),\n\tOrder: recurly.String(\"desc\"),\n\tLimit: recurly.Int(200),\n}\nshippingMethods := client.ListShippingMethods(listParams)\n\nfor shippingMethods.HasMore {\n\terr := shippingMethods.Fetch()\n\tif e, ok := err.(*recurly.Error); ok {\n\t\tfmt.Printf(\"Failed to retrieve next page: %v\", e)\n\t\tbreak\n\t}\n\tfor i, method := range shippingMethods.Data {\n\t\tfmt.Printf(\"Shipping Method %3d: %s, %s\\n\",\n\t\t\ti,\n\t\t\tmethod.Id,\n\t\t\tmethod.Code,\n\t\t)\n\t}\n}"
          }
        ]
      },
      "post": {
        "tags": [
          "shipping_method"
        ],
        "summary": "Create a new shipping method",
        "operationId": "create_shipping_method",
        "parameters": [
          {
            "name": "site_id",
            "in": "path",
            "description": "Site ID or subdomain. For ID no prefix is used e.g. `e28zov4fw0v2`. For subdomain use prefix `subdomain-`, e.g. `subdomain-recurly`.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ShippingMethodCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "A new shipping method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ShippingMethod"
                }
              }
            }
          },
          "400": {
            "description": "Bad request, perhaps invalid JSON?",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Incorrect site ID.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "422": {
            "description": "Invalid request parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-code-samples": []
      }
    },
    "/sites/{site_id}/shipping_methods/{id}": {
      "get": {
        "tags": [
          "shipping_method"
        ],
        "summary": "Fetch a shipping method",
        "operationId": "get_shipping_method",
        "parameters": [
          {
            "name": "site_id",
            "in": "path",
            "description": "Site ID or subdomain. For ID no prefix is used e.g. `e28zov4fw0v2`. For subdomain use prefix `subdomain-`, e.g. `subdomain-recurly`.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Shipping Method ID or code. For ID no prefix is used e.g. `e28zov4fw0v2`. For code use prefix `code-`, e.g. `code-usps_2-day`.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A shipping method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ShippingMethod"
                }
              }
            }
          },
          "404": {
            "description": "Incorrect site or shipping method ID.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-code-samples": []
      }
    },
    "/sites/{site_id}/shipping_methods/{shipping_method_id}": {
      "put": {
        "tags": [
          "shipping_method"
        ],
        "summary": "Update an active Shipping Method",
        "operationId": "update_shipping_method",
        "parameters": [
          {
            "name": "site_id",
            "in": "path",
            "description": "Site ID or subdomain. For ID no prefix is used e.g. `e28zov4fw0v2`. For subdomain use prefix `subdomain-`, e.g. `subdomain-recurly`.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "shipping_method_id",
            "in": "path",
            "description": "Shipping Method ID or code. For ID no prefix is used e.g. `e28zov4fw0v2`. For code use prefix `code-`, e.g. `code-usps_2-day`.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ShippingMethodUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The updated shipping method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ShippingMethod"
                }
              }
            }
          },
          "400": {
            "description": "Bad request, perhaps invalid JSON?",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Incorrect site or shipping method ID.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "422": {
            "description": "Invalid request parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-code-samples": []
      },
      "delete": {
        "tags": [
          "shipping_method"
        ],
        "summary": "Deactivate a shipping method",
        "description": "Deactivating a shipping method makes it unavailable for new subscriptions or purchases. It will not affect existing subscriptions.",
        "operationId": "deactivate_shipping_method",
        "parameters": [
          {
            "name": "site_id",
            "in": "path",
            "description": "Site ID or subdomain. For ID no prefix is used e.g. `e28zov4fw0v2`. For subdomain use prefix `subdomain-`, e.g. `subdomain-recurly`.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "shipping_method_id",
            "in": "path",
            "description": "Shipping Method ID or code. For ID no prefix is used e.g. `e28zov4fw0v2`. For code use prefix `code-`, e.g. `code-usps_2-day`.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A shipping method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ShippingMethod"
                }
              }
            }
          },
          "422": {
            "description": "Shipping method may already be inactive.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-code-samples": []
      }
    },
    "/sites/{site_id}/subscriptions": {
      "get": {
        "tags": [
          "subscription"
        ],
        "summary": "List a site's subscriptions",
        "operationId": "list_subscriptions",
        "parameters": [
          {
            "name": "site_id",
            "in": "path",
            "description": "Site ID or subdomain. For ID no prefix is used e.g. `e28zov4fw0v2`. For subdomain use prefix `subdomain-`, e.g. `subdomain-recurly`.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ids",
            "in": "query",
            "description": "Filter results by their IDs. Up to 200 IDs can be passed at once using\ncommas as separators, e.g. `ids=h1at4d57xlmy,gyqgg0d3v9n1,jrsm5b4yefg6`.\n\n**Important notes:**\n\n* The `ids` parameter cannot be used with any other ordering or filtering\n  parameters (`limit`, `order`, `sort`, `begin_time`, `end_time`, etc)\n* Invalid or unknown IDs will be ignored, so you should check that the\n  results correspond to your request.\n* Records are returned in an arbitrary order. Since results are all\n  returned at once you can sort the records yourself.\n",
            "required": false,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit number of records 1-200.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maximum": 200,
              "minimum": 1,
              "type": "integer",
              "default": 20
            }
          },
          {
            "name": "order",
            "in": "query",
            "description": "Sort order.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "default": "desc",
              "enum": [
                "asc",
                "desc"
              ]
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort field. You *really* only want to sort by `updated_at` in ascending\norder. In descending order updated records will move behind the cursor and could\nprevent some records from being returned.\n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "default": "created_at",
              "enum": [
                "created_at",
                "updated_at"
              ]
            }
          },
          {
            "name": "begin_time",
            "in": "query",
            "description": "Filter by begin_time when `sort=created_at` or `sort=updated_at`.\n**Note:** this value is an ISO8601 timestamp. A partial timestamp that does not include a time zone will default to UTC.\n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "end_time",
            "in": "query",
            "description": "Filter by end_time when `sort=created_at` or `sort=updated_at`.\n**Note:** this value is an ISO8601 timestamp. A partial timestamp that does not include a time zone will default to UTC.\n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "state",
            "in": "query",
            "description": "Filter by state.\n\n- When `state=active`, `state=canceled`, `state=expired`, or `state=future`, subscriptions with states that match the query and only those subscriptions will be returned.\n- When `state=in_trial`, only subscriptions that have a trial_started_at date earlier than now and a trial_ends_at date later than now will be returned.\n- When `state=live`, only subscriptions that are in an active, canceled, or future state or are in trial will be returned.\n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": [
                "active",
                "canceled",
                "expired",
                "future",
                "in_trial",
                "live"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of the site's subscriptions.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriptionList"
                }
              }
            }
          },
          "400": {
            "description": "Invalid or unpermitted parameter.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Incorrect site ID.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "Node.js",
            "source": "const subscriptions = client.listSubscriptions({ limit: 200 })\n\nfor await (const subscription of subscriptions.each()) {\n  console.log(subscription.uuid)\n}\n"
          },
          {
            "lang": "Python",
            "source": "subscriptions = client.list_subscriptions(limit=200).items()\nfor subscription in subscriptions:\n    print(subscription.uuid)\n"
          },
          {
            "lang": ".NET",
            "source": "var subscriptions = client.ListSubscriptions(limit: 200);\nforeach(Subscription subscription in subscriptions)\n{\n    Console.WriteLine(subscription.Uuid);\n}\n"
          },
          {
            "lang": "Ruby",
            "source": "subscriptions = @client.list_subscriptions(limit: 200)\nsubscriptions.each do |subscription|\n  puts \"Subscription: #{subscription.uuid}\"\nend\n"
          },
          {
            "lang": "Java",
            "source": "QueryParams params = new QueryParams();\nparams.setLimit(200); // Pull 200 records at a time\nfinal Pager<Subscription> subscriptions = client.listSubscriptions(params);\n\nfor (Subscription subscription : subscriptions) {\n    System.out.println(subscription.getUuid());\n}\n"
          },
          {
            "lang": "PHP",
            "source": "$params = ['limit' => 200];\n$subscriptions = $client->listSubscriptions($params);\n\nforeach($subscriptions as $sub) {\n  echo 'Subscription: ' . $sub->getUuid() . PHP_EOL;\n}\n"
          },
          {
            "lang": "Go",
            "source": "listParams := &recurly.ListSubscriptionsParams{\n\tSort:  recurly.String(\"created_at\"),\n\tOrder: recurly.String(\"desc\"),\n\tLimit: recurly.Int(200),\n}\nsubscriptions := client.ListSubscriptions(listParams)\n\nfor subscriptions.HasMore {\n\terr := subscriptions.Fetch()\n\tif e, ok := err.(*recurly.Error); ok {\n\t\tfmt.Printf(\"Failed to retrieve next page: %v\", e)\n\t\tbreak\n\t}\n\tfor i, subscription := range subscriptions.Data {\n\t\tfmt.Printf(\"Subscription %3d: %s\\n\",\n\t\t\ti,\n\t\t\tsubscription.Id,\n\t\t)\n\t}\n}"
          }
        ]
      },
      "post": {
        "tags": [
          "subscription"
        ],
        "summary": "Create a new subscription",
        "operationId": "create_subscription",
        "parameters": [
          {
            "name": "site_id",
            "in": "path",
            "description": "Site ID or subdomain. For ID no prefix is used e.g. `e28zov4fw0v2`. For subdomain use prefix `subdomain-`, e.g. `subdomain-recurly`.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SubscriptionCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "A subscription.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Subscription"
                }
              }
            }
          },
          "404": {
            "description": "Incorrect site ID.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "422": {
            "description": "A validation error such as 'You already have a subscription to this plan.' error running the verification transaction.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMayHaveTransaction"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "Node.js",
            "source": "try {\n  let subscriptionReq = {\n    planCode: planCode,\n    currency: `USD`,\n    account: {\n      code: accountCode\n    }\n  }\n  let sub = await client.createSubscription(subscriptionReq)\n  console.log('Created subscription: ', sub.uuid)\n} catch (err) {\n  if (err instanceof recurly.errors.ValidationError) {\n    // If the request was not valid, you may want to tell your user\n    // why. You can find the invalid params and reasons in err.params\n    console.log('Failed validation', err.params)\n  } else {\n    // If we don't know what to do with the err, we should\n    // probably re-raise and let our web framework and logger handle it\n    console.log('Unknown Error: ', err)\n  }\n}\n"
          },
          {
            "lang": "Python",
            "source": "try:\n    sub_create = {\n        \"plan_code\": plan_code,\n        \"currency\": \"USD\",\n        \"account\": {\"code\": account_code},\n    }\n    sub = client.create_subscription(sub_create)\n    print(\"Created Subscription %s\" % sub)\nexcept recurly.errors.ValidationError as e:\n    # If the request was invalid, you may want to tell your user\n    # why. You can find the invalid params and reasons in e.error.params\n    print(\"ValidationError: %s\" % e.error.message)\n    print(e.error.params)\n"
          },
          {
            "lang": ".NET",
            "source": "try\n{\n    var subReq = new SubscriptionCreate()\n    {\n        Currency = \"USD\",\n        Account = new AccountCreate()\n        {\n            Code = accountCode\n        },\n        PlanCode = planCode,\n    };\n    Subscription subscription = client.CreateSubscription(subReq);\n    Console.WriteLine($\"Created Subscription with Id: {subscription.Uuid}\");\n}\ncatch (Recurly.Errors.Validation ex)\n{\n    // If the request was not valid, you may want to tell your user\n    // why. You can find the invalid params and reasons in ex.Error.Params\n    Console.WriteLine($\"Failed validation: {ex.Error.Message}\");\n}\ncatch (Recurly.Errors.ApiError ex)\n{\n    // Use ApiError to catch a generic error from the API\n    Console.WriteLine($\"Unexpected Recurly Error: {ex.Error.Message}\");\n}\n"
          },
          {
            "lang": "Ruby",
            "source": "begin\n  subscription_create = {\n    plan_code: plan_code,\n    currency: \"USD\",\n    # This can be an existing account or\n    # a new acocunt\n    account: {\n      code: account_code,\n    }\n  }\n  subscription = @client.create_subscription(\n    body: subscription_create\n  )\n  puts \"Created Subscription #{subscription}\"\nrescue Recurly::Errors::ValidationError => e\n  # If the request was invalid, you may want to tell your user\n  # why. You can find the invalid params and reasons in e.recurly_error.params\n  puts \"ValidationError: #{e.recurly_error.params}\"\nend\n"
          },
          {
            "lang": "Java",
            "source": "try {\n    SubscriptionCreate subscriptionCreate = new SubscriptionCreate();\n    AccountCreate accountCreate = new AccountCreate();\n\n    accountCreate.setCode(accountCode);\n    subscriptionCreate.setCurrency(\"USD\");\n    subscriptionCreate.setAccount(accountCreate);\n    subscriptionCreate.setPlanCode(planCode);\n\n    Subscription subscription = client.createSubscription(subscriptionCreate);\n    System.out.println(\"Created Subscription with Id: \" + subscription.getUuid());\n} catch (ValidationException e) {\n    // If the request was not valid, you may want to tell your user\n    // why. You can find the invalid params and reasons in e.getError().getParams()\n    System.out.println(\"Failed validation: \" + e.getError().getMessage());\n} catch (ApiException e) {\n    // Use ApiException to catch a generic error from the API\n    System.out.println(\"Unexpected Recurly Error: \" + e.getError().getMessage());\n}\n"
          },
          {
            "lang": "PHP",
            "source": "try {\n    $sub_create = array(\n        \"plan_code\" => $plan_code,\n        \"currency\" => \"USD\",\n        \"account\" => array(\n            \"code\" => $account_code\n        ),\n    );\n\n    $subscription = $client->createSubscription($sub_create);\n\n    echo 'Created Subscription:' . PHP_EOL;\n    var_dump($subscription);\n} catch (\\Recurly\\Errors\\Validation $e) {\n    // If the request was not valid, you may want to tell your user\n    // why. You can find the invalid params and reasons in err.params\n    var_dump($e);\n} catch (\\Recurly\\RecurlyError $e) {\n    // If we don't know what to do with the err, we should\n    // probably re-raise and let our web framework and logger handle it\n    var_dump($e);\n}\n"
          },
          {
            "lang": "Go",
            "source": "subReq := &recurly.SubscriptionCreate{\n\tPlanCode: recurly.String(planCode),\n\tAccount: &recurly.AccountCreate{\n\t\tCode: recurly.String(accountCode),\n\t},\n\tCurrency: recurly.String(\"USD\"),\n}\n\nsubscription, err := client.CreateSubscription(subReq)\nif e, ok := err.(*recurly.Error); ok {\n\tif e.Type == recurly.ErrorTypeValidation {\n\t\tfmt.Printf(\"Failed validation: %v\", e)\n\t\treturn nil, err\n\t}\n\tfmt.Printf(\"Unexpected Recurly error: %v\", e)\n\treturn nil, err\n}\nfmt.Printf(\"Created Subscription: %s\", subscription.Id)"
          }
        ]
      }
    },
    "/sites/{site_id}/subscriptions/{subscription_id}": {
      "get": {
        "tags": [
          "subscription"
        ],
        "summary": "Fetch a subscription",
        "operationId": "get_subscription",
        "parameters": [
          {
            "name": "site_id",
            "in": "path",
            "description": "Site ID or subdomain. For ID no prefix is used e.g. `e28zov4fw0v2`. For subdomain use prefix `subdomain-`, e.g. `subdomain-recurly`.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "subscription_id",
            "in": "path",
            "description": "Subscription ID or UUID. For ID no prefix is used e.g. `e28zov4fw0v2`. For UUID use prefix `uuid-`, e.g. `uuid-123457890`.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A subscription.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Subscription"
                }
              }
            }
          },
          "404": {
            "description": "Incorrect site or subscription ID.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "Node.js",
            "source": "try {\n  const subscription = await client.getSubscription(subscriptionId)\n  console.log('Fetched subscription: ', subscription.uuid)\n} catch (err) {\n  if (err instanceof recurly.errors.NotFoundError) {\n    // If the request was not found, you may want to alert the user or\n    // just return null\n    console.log('Resource Not Found')\n  } else {\n    // If we don't know what to do with the err, we should\n    // probably re-raise and let our web framework and logger handle it\n    console.log('Unknown Error: ', err)\n  }\n}\n"
          },
          {
            "lang": "Python",
            "source": "try:\n    subscription = client.get_subscription(subscription_id)\n    print(\"Got Subscription %s\" % subscription)\nexcept recurly.errors.NotFoundError:\n    # If the resource was not found, you may want to alert the user or\n    # just return nil\n    print(\"Resource Not Found\")\n"
          },
          {
            "lang": ".NET",
            "source": "try\n{\n    Subscription subscription = client.GetSubscription(sub.Id);\n    Console.WriteLine($\"Fetched Subscription {subscription.Id}\");\n}\ncatch (Recurly.Errors.NotFound ex)\n{\n    // If the resource was not found\n    // we may want to alert the user or just return null\n    Console.WriteLine($\"Resource Not Found: {ex.Error.Message}\");\n}\ncatch (Recurly.Errors.ApiError ex)\n{\n    // Use ApiError to catch a generic error from the API\n    Console.WriteLine($\"Unexpected Recurly Error: {ex.Error.Message}\");\n}\n"
          },
          {
            "lang": "Ruby",
            "source": "begin\n  subscription = @client.get_subscription(\n    subscription_id: subscription_id\n  )\n  puts \"Got Subscription #{subscription}\"\nrescue Recurly::Errors::NotFoundError\n  # If the resource was not found, you may want to alert the user or\n  # just return nil\n  puts \"Resource Not Found\"\nend\n"
          },
          {
            "lang": "Java",
            "source": "try {\n    final Subscription subscription = client.getSubscription(subscriptionId);\n    System.out.println(\"Fetched Subscription: \" + subscription.getUuid());\n} catch (ValidationException e) {\n    // If the request was not valid, you may want to tell your user\n    // why. You can find the invalid params and reasons in e.getError().getParams()\n    System.out.println(\"Failed validation: \" + e.getError().getMessage());\n} catch (ApiException e) {\n    // Use ApiException to catch a generic error from the API\n    System.out.println(\"Unexpected Recurly Error: \" + e.getError().getMessage());\n}\n"
          },
          {
            "lang": "PHP",
            "source": "try {\n    $subscription = $client->getSubscription($subscription_id);\n\n    echo 'Got Subscription:' . PHP_EOL;\n    var_dump($subscription);\n} catch (\\Recurly\\Errors\\NotFound $e) {\n    // Could not find the resource, you may want to inform the user\n    // or just return a NULL\n    echo 'Could not find resource.' . PHP_EOL;\n    var_dump($e);\n} catch (\\Recurly\\RecurlyError $e) {\n    // Something bad happened... tell the user so that they can fix it?\n    echo 'Some unexpected Recurly error happened. Try again later.' . PHP_EOL;\n}\n"
          },
          {
            "lang": "Go",
            "source": "sub, err := client.GetSubscription(subID)\nif e, ok := err.(*recurly.Error); ok {\n\tif e.Type == recurly.ErrorTypeNotFound {\n\t\tfmt.Printf(\"Resource not found: %v\", e)\n\t\treturn nil, err\n\t}\n\tfmt.Printf(\"Unexpected Recurly error: %v\", e)\n\treturn nil, err\n}\nfmt.Printf(\"Fetched Subscription: %s\", sub.Id)"
          }
        ]
      },
      "put": {
        "tags": [
          "subscription"
        ],
        "summary": "Modify a subscription",
        "description": "This only lets you change the subscription settings that have no impact on the billed amount. Use the [Create Subscription Change](#operation/create_subscription_change) endpoint to make those changes.",
        "operationId": "modify_subscription",
        "parameters": [
          {
            "name": "site_id",
            "in": "path",
            "description": "Site ID or subdomain. For ID no prefix is used e.g. `e28zov4fw0v2`. For subdomain use prefix `subdomain-`, e.g. `subdomain-recurly`.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "subscription_id",
            "in": "path",
            "description": "Subscription ID or UUID. For ID no prefix is used e.g. `e28zov4fw0v2`. For UUID use prefix `uuid-`, e.g. `uuid-123457890`.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SubscriptionUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "A subscription.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Subscription"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "Node.js",
            "source": "try {\n  const update = {\n    termsAndConditions: \"Some new terms and conditions\",\n    customerNotes: \"Some new customer notes\"\n  }\n  const subscription = await client.modifySubscription(subscriptionId, update)\n  console.log('Modified subscription: ', subscription.uuid)\n} catch(err) {\n\n  if (err instanceof recurly.errors.ValidationError) {\n    // If the request was not valid, you may want to tell your user\n    // why. You can find the invalid params and reasons in err.params\n    console.log('Failed validation', err.params)\n  } else {\n    // If we don't know what to do with the err, we should\n    // probably re-raise and let our web framework and logger handle it\n    console.log('Unknown Error: ', err)\n  }\n}\n"
          },
          {
            "lang": "Python",
            "source": "try:\n    sub_update = {\"customer_notes\": \"New Notes\", \"terms_and_conditions\": \"New TaC\"}\n    subscription = client.modify_subscription(subscription_id, sub_update)\n    print(\"Modified Subscription %s\" % subscription)\nexcept recurly.errors.ValidationError as e:\n    # If the request was invalid, you may want to tell your user\n    # why. You can find the invalid params and reasons in e.error.params\n    print(\"ValidationError: %s\" % e.error.message)\n    print(e.error.params)\n"
          },
          {
            "lang": ".NET",
            "source": "try\n{\n    var updateReq = new SubscriptionUpdate()\n    {\n        TermsAndConditions = \"Some New Terms and Conditions\",\n        CustomerNotes = \"Some New Customer Notes\"\n    };\n    Subscription subscription = client.ModifySubscription(subscriptionId, updateReq);\n    Console.WriteLine($\"Modified Subscription {subscription.Uuid}\");\n}\ncatch (Recurly.Errors.Validation ex)\n{\n    // If the request was not valid, you may want to tell your user\n    // why. You can find the invalid params and reasons in ex.Error.Params\n    Console.WriteLine($\"Failed validation: {ex.Error.Message}\");\n}\ncatch (Recurly.Errors.ApiError ex)\n{\n    // Use ApiError to catch a generic error from the API\n    Console.WriteLine($\"Unexpected Recurly Error: {ex.Error.Message}\");\n}\n"
          },
          {
            "lang": "Ruby",
            "source": "begin\n  subscription_update = {\n    customer_notes: \"New Notes\",\n    terms_and_conditions: \"New ToC\"\n  }\n  subscription = @client.modify_subscription(\n    subscription_id: subscription_id,\n    body: subscription_update\n  )\n  puts \"Modified Subscription #{subscription}\"\nrescue Recurly::Errors::ValidationError => e\n  # If the request was invalid, you may want to tell your user\n  # why. You can find the invalid params and reasons in e.recurly_error.params\n  puts \"ValidationError: #{e.recurly_error.params}\"\nend\n"
          },
          {
            "lang": "Java",
            "source": "try {\n    final SubscriptionUpdate subUpdate = new SubscriptionUpdate();\n    subUpdate.setTermsAndConditions(\"Some new terms and conditions\");\n    subUpdate.setCustomerNotes(\"Some new customer notes\");\n    final Subscription subscription = client.modifySubscription(subscriptionId, subUpdate);\n    System.out.println(\"Modified Subscription: \" + subscription.getUuid());\n} catch (ValidationException e) {\n    // If the request was not valid, you may want to tell your user\n    // why. You can find the invalid params and reasons in e.getError().getParams()\n    System.out.println(\"Failed validation: \" + e.getError().getMessage());\n} catch (ApiException e) {\n    // Use ApiException to catch a generic error from the API\n    System.out.println(\"Unexpected Recurly Error: \" + e.getError().getMessage());\n}\n"
          },
          {
            "lang": "PHP",
            "source": "try {\n    $changes = array(\n        \"terms_and_conditions\" => \"Some new terms and conditions\",\n        \"customer_notes\" => \"Some new customer notes\"\n    );\n\n    $subscription = $client->modifySubscription($subscription_id, $changes);\n\n    echo 'Modified Subscription:' . PHP_EOL;\n    var_dump($subscription);\n} catch (\\Recurly\\Errors\\Validation $e) {\n    // If the request was not valid, you may want to tell your user\n    // why. You can find the invalid params and reasons in err.params\n    var_dump($e);\n} catch (\\Recurly\\RecurlyError $e) {\n    // If we don't know what to do with the err, we should\n    // probably re-raise and let our web framework and logger handle it\n    var_dump($e);\n}\n"
          },
          {
            "lang": "Go",
            "source": "updateReq := &recurly.SubscriptionUpdate{\n\tTermsAndConditions: recurly.String(\"Some new terms and conditions\"),\n\tCustomerNotes:      recurly.String(\"Some new customer notes\"),\n}\nsub, err := client.ModifySubscription(subID, updateReq)\nif e, ok := err.(*recurly.Error); ok {\n\tif e.Type == recurly.ErrorTypeValidation {\n\t\tfmt.Printf(\"Failed validation: %v\", e)\n\t\treturn nil, err\n\t}\n\tfmt.Printf(\"Unexpected Recurly error: %v\", e)\n\treturn nil, err\n}\nfmt.Printf(\"Modified Subscription: %s\", sub.Id)"
          }
        ]
      },
      "delete": {
        "tags": [
          "subscription"
        ],
        "summary": "Terminate a subscription",
        "description": "Immediately expires the subscription.\n\nIf the subscription has a paid invoice you may choose to refund all, part or none of last invoice's amount.\n",
        "operationId": "terminate_subscription",
        "parameters": [
          {
            "name": "site_id",
            "in": "path",
            "description": "Site ID or subdomain. For ID no prefix is used e.g. `e28zov4fw0v2`. For subdomain use prefix `subdomain-`, e.g. `subdomain-recurly`.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "subscription_id",
            "in": "path",
            "description": "Subscription ID or UUID. For ID no prefix is used e.g. `e28zov4fw0v2`. For UUID use prefix `uuid-`, e.g. `uuid-123457890`.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "refund",
            "in": "query",
            "description": "The type of refund to perform:\n\n* `full` - Performs a full refund of the last invoice for the current subscription term.\n* `partial` - Prorates a refund based on the amount of time remaining in the current bill cycle.\n* `none` - Terminates the subscription without a refund.\n\nIn the event that the most recent invoice is a $0 invoice paid entirely by credit, Recurly will apply the credit back to the customerâ€™s account.\n\nYou may also terminate a subscription with no refund and then manually refund specific invoices.\n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "default": "none",
              "enum": [
                "full",
                "partial",
                "none"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An expired subscription.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Subscription"
                }
              }
            }
          },
          "404": {
            "description": "Incorrect site ID or subscription ID.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "422": {
            "description": "A validation error such as \"Cannot expire an inactive subscription.\" or \"Please provide valid values for these parameters: refund.\"",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "Node.js",
            "source": "try {\n  const subscription = await client.terminateSubscription(subscriptionId)\n  console.log('Terminated subscription: ', subscription.uuid)\n} catch (err) {\n  if (err instanceof recurly.errors.ValidationError) {\n    // If the request was not valid, you may want to tell your user\n    // why. You can find the invalid params and reasons in err.params\n    console.log('Failed validation', err.params)\n  } else {\n    // If we don't know what to do with the err, we should\n    // probably re-raise and let our web framework and logger handle it\n    console.log('Unknown Error: ', err)\n  }\n}\n"
          },
          {
            "lang": "Python",
            "source": "try:\n    subscription = client.terminate_subscription(subscription_id)\n    print(\"Terminated Subscription %s\" % subscription)\nexcept recurly.errors.NotFoundError:\n    # If the resource was not found, you may want to alert the user or\n    # just return nil\n    print(\"Resource Not Found\")\n"
          },
          {
            "lang": ".NET",
            "source": "try\n{\n    Subscription subscription = client.TerminateSubscription(subscriptionId);\n    Console.WriteLine($\"Terminated Subscription {subscription.Uuid}\");\n}\ncatch (Recurly.Errors.Validation ex)\n{\n    // If the request was not valid, you may want to tell your user\n    // why. You can find the invalid params and reasons in ex.Error.Params\n    Console.WriteLine($\"Failed validation: {ex.Error.Message}\");\n}\ncatch (Recurly.Errors.ApiError ex)\n{\n    // Use ApiError to catch a generic error from the API\n    Console.WriteLine($\"Unexpected Recurly Error: {ex.Error.Message}\");\n}\n"
          },
          {
            "lang": "Ruby",
            "source": "begin\n  subscription = @client.terminate_subscription(\n    subscription_id: subscription_id,\n  )\n  puts \"Terminated Subscription #{subscription}\"\nrescue Recurly::Errors::NotFoundError\n  # If the resource was not found, you may want to alert the user or\n  # just return nil\n  puts \"Resource Not Found\"\nend\n"
          },
          {
            "lang": "Java",
            "source": "try {\n    QueryParams queryParams = new QueryParams();\n    queryParams.setRefund(\"none\"); // \"full\" for a full refund, \"partial\" for prorated refund\n    client.terminateSubscription(subscriptionId, queryParams);\n    System.out.println(\"Terminated Subscription: \" + subscriptionId);\n} catch (ValidationException e) {\n    // If the request was not valid, you may want to tell your user\n    // why. You can find the invalid params and reasons in e.getError().getParams()\n    System.out.println(\"Failed validation: \" + e.getError().getMessage());\n} catch (ApiException e) {\n    // Use ApiException to catch a generic error from the API\n    System.out.println(\"Unexpected Recurly Error: \" + e.getError().getMessage());\n}\n"
          },
          {
            "lang": "PHP",
            "source": "try {\n    $subscription = $client->terminateSubscription($subscription_id);\n\n    echo 'Terminated Subscription:' . PHP_EOL;\n    var_dump($subscription);\n} catch (\\Recurly\\Errors\\Validation $e) {\n    // If the request was not valid, you may want to tell your user\n    // why. You can find the invalid params and reasons in err.params\n    var_dump($e);\n} catch (\\Recurly\\RecurlyError $e) {\n    // If we don't know what to do with the err, we should\n    // probably re-raise and let our web framework and logger handle it\n    var_dump($e);\n}\n"
          },
          {
            "lang": "Go",
            "source": "terminateParams := &recurly.TerminateSubscriptionParams{}\nsubscription, err := client.TerminateSubscription(subID, terminateParams)\nif e, ok := err.(*recurly.Error); ok {\n\tif e.Type == recurly.ErrorTypeNotFound {\n\t\tfmt.Printf(\"Resource not found: %v\", e)\n\t\treturn nil, err\n\t}\n\tfmt.Printf(\"Unexpected Recurly error: %v\", e)\n\treturn nil, err\n}\n\nfmt.Printf(\"Terminated Subscription: %v\", subscription)"
          }
        ]
      }
    },
    "/sites/{site_id}/subscriptions/{subscription_id}/cancel": {
      "put": {
        "tags": [
          "subscription"
        ],
        "summary": "Cancel a subscription",
        "description": "A canceled subscription will continue through its current billing cycle. At the end of the current billing cycle the subscription will expire and the customer will no longer be billed. Canceled subscriptions can be reactivated until the end of the billing cycle. When a future subscription (`state=future`) is canceled it becomes failed `state=failed` and cannot be reactivated.",
        "operationId": "cancel_subscription",
        "parameters": [
          {
            "name": "site_id",
            "in": "path",
            "description": "Site ID or subdomain. For ID no prefix is used e.g. `e28zov4fw0v2`. For subdomain use prefix `subdomain-`, e.g. `subdomain-recurly`.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "subscription_id",
            "in": "path",
            "description": "Subscription ID or UUID. For ID no prefix is used e.g. `e28zov4fw0v2`. For UUID use prefix `uuid-`, e.g. `uuid-123457890`.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SubscriptionCancel"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "A canceled or failed subscription.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Subscription"
                }
              }
            }
          },
          "404": {
            "description": "Incorrect site or subscription ID.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "422": {
            "description": "A validation error such as \"Only active and future subscriptions can be canceled\".",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "Node.js",
            "source": "try {\n  let expiredSub = await client.cancelSubscription(subscriptionId)\n  console.log('Canceled Subscription: ', expiredSub.uuid)\n} catch (err) {\n  if (err instanceof recurly.errors.ValidationError) {\n    // If the request was not valid, you may want to tell your user\n    // why. You can find the invalid params and reasons in err.params\n    console.log('Failed validation', err.params)\n  } else {\n    // If we don't know what to do with the err, we should\n    // probably re-raise and let our web framework and logger handle it\n    console.log('Unknown Error: ', err)\n  }\n}\n"
          },
          {
            "lang": "Python",
            "source": "try:\n    subscription = client.cancel_subscription(subscription_id)\n    print(\"Canceled Subscription %s\" % subscription)\nexcept recurly.errors.NotFoundError:\n    # If the resource was not found, you may want to alert the user or\n    # just return nil\n    print(\"Resource Not Found\")\n"
          },
          {
            "lang": ".NET",
            "source": "try\n{\n    Subscription subscription = client.CancelSubscription(subscriptionId);\n    Console.WriteLine($\"Canceled Subscription {subscription.Uuid}\");\n}\ncatch (Recurly.Errors.Validation ex)\n{\n    // If the request was not valid, you may want to tell your user\n    // why. You can find the invalid params and reasons in ex.Error.Params\n    Console.WriteLine($\"Failed validation: {ex.Error.Message}\");\n}\ncatch (Recurly.Errors.ApiError ex)\n{\n    // Use ApiError to catch a generic error from the API\n    Console.WriteLine($\"Unexpected Recurly Error: {ex.Error.Message}\");\n}\n"
          },
          {
            "lang": "Ruby",
            "source": "begin\n  subscription = @client.cancel_subscription(\n    subscription_id: subscription_id\n  )\n  puts \"Canceled Subscription #{subscription}\"\nrescue Recurly::Errors::NotFoundError\n  # If the resource was not found, you may want to alert the user or\n  # just return nil\n  puts \"Resource Not Found\"\nend\n"
          },
          {
            "lang": "Java",
            "source": "try {\n    final Subscription subscription = client.cancelSubscription(subscriptionId);\n    System.out.println(\"Canceled Subscription: \" + subscription.getUuid());\n} catch (ValidationException e) {\n    // If the request was not valid, you may want to tell your user\n    // why. You can find the invalid params and reasons in e.getError().getParams()\n    System.out.println(\"Failed validation: \" + e.getError().getMessage());\n} catch (ApiException e) {\n    // Use ApiException to catch a generic error from the API\n    System.out.println(\"Unexpected Recurly Error: \" + e.getError().getMessage());\n}\n"
          },
          {
            "lang": "PHP",
            "source": "try {\n    $subscription = $client->cancelSubscription($subscription_id);\n\n    echo 'Canceled Subscription:' . PHP_EOL;\n    var_dump($subscription);\n} catch (\\Recurly\\Errors\\Validation $e) {\n    // If the request was not valid, you may want to tell your user\n    // why. You can find the invalid params and reasons in err.params\n    var_dump($e);\n} catch (\\Recurly\\RecurlyError $e) {\n    // If we don't know what to do with the err, we should\n    // probably re-raise and let our web framework and logger handle it\n    var_dump($e);\n}\n"
          },
          {
            "lang": "Go",
            "source": "cancelParams := &recurly.CancelSubscriptionParams{\n\tBody: &recurly.SubscriptionCancel{\n\t\tTimeframe: recurly.String(\"bill_date\"),\n\t},\n}\n\nsubscription, err := client.CancelSubscription(subID, cancelParams)\nif e, ok := err.(*recurly.Error); ok {\n\tif e.Type == recurly.ErrorTypeValidation {\n\t\tfmt.Printf(\"Failed validation: %v\", e)\n\t\treturn nil, err\n\t}\n\tfmt.Printf(\"Unexpected Recurly error: %v\", e)\n\treturn nil, err\n}\nfmt.Printf(\"Canceled Subscription: %s\", subscription.Id)"
          }
        ]
      }
    },
    "/sites/{site_id}/subscriptions/{subscription_id}/reactivate": {
      "put": {
        "tags": [
          "subscription"
        ],
        "summary": "Reactivate a canceled subscription",
        "description": "This will bring the subscription back to an active, renewing state on the customer's original billing cycle.\n\nExpired or failed subscriptions cannot be reactivated; instead a new subscription plan will need to be applied to the account.\n",
        "operationId": "reactivate_subscription",
        "parameters": [
          {
            "name": "site_id",
            "in": "path",
            "description": "Site ID or subdomain. For ID no prefix is used e.g. `e28zov4fw0v2`. For subdomain use prefix `subdomain-`, e.g. `subdomain-recurly`.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "subscription_id",
            "in": "path",
            "description": "Subscription ID or UUID. For ID no prefix is used e.g. `e28zov4fw0v2`. For UUID use prefix `uuid-`, e.g. `uuid-123457890`.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An active subscription.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Subscription"
                }
              }
            }
          },
          "404": {
            "description": "Incorrect site or subscription ID.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "422": {
            "description": "A validation error such as \"Only canceled subscriptions can be reactivated\".",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "Node.js",
            "source": "try {\n  const subscription = await client.reactivateSubscription(subscriptionId)\n  console.log('Reactivated subscription: ', subscription.uuid)\n} catch(err) {\n\n  if (err instanceof recurly.errors.ValidationError) {\n    // If the request was not valid, you may want to tell your user\n    // why. You can find the invalid params and reasons in err.params\n    console.log('Failed validation', err.params)\n  } else {\n    // If we don't know what to do with the err, we should\n    // probably re-raise and let our web framework and logger handle it\n    console.log('Unknown Error: ', err)\n  }\n}\n"
          },
          {
            "lang": "Python",
            "source": "try:\n    subscription = client.reactivate_subscription(subscription_id)\n    print(\"Reactivated Subscription %s\" % subscription)\nexcept recurly.errors.NotFoundError:\n    # If the resource was not found, you may want to alert the user or\n    # just return nil\n    print(\"Resource Not Found\")\n"
          },
          {
            "lang": ".NET",
            "source": "try\n{\n    Subscription subscription = client.ReactivateSubscription(subscriptionId);\n    Console.WriteLine($\"Reactivated Subscription {subscription.Uuid}\");\n}\ncatch (Recurly.Errors.Validation ex)\n{\n    // If the request was not valid, you may want to tell your user\n    // why. You can find the invalid params and reasons in ex.Error.Params\n    Console.WriteLine($\"Failed validation: {ex.Error.Message}\");\n}\ncatch (Recurly.Errors.ApiError ex)\n{\n    // Use ApiError to catch a generic error from the API\n    Console.WriteLine($\"Unexpected Recurly Error: {ex.Error.Message}\");\n}\n"
          },
          {
            "lang": "Ruby",
            "source": "begin\n  subscription = @client.reactivate_subscription(\n    subscription_id: subscription_id\n  )\n  puts \"Reactivated Canceled Subscription #{subscription}\"\nrescue Recurly::Errors::NotFoundError\n  # If the resource was not found, you may want to alert the user or\n  # just return nil\n  puts \"Resource Not Found\"\nend\n"
          },
          {
            "lang": "Java",
            "source": "try {\n    final Subscription subscription = client.reactivateSubscription(subscriptionId);\n    System.out.println(\"Reactivated Subscription: \" + subscription.getUuid());\n} catch (ValidationException e) {\n    // If the request was not valid, you may want to tell your user\n    // why. You can find the invalid params and reasons in e.getError().getParams()\n    System.out.println(\"Failed validation: \" + e.getError().getMessage());\n} catch (ApiException e) {\n    // Use ApiException to catch a generic error from the API\n    System.out.println(\"Unexpected Recurly Error: \" + e.getError().getMessage());\n}\n"
          },
          {
            "lang": "PHP",
            "source": "try {\n    $subscription = $client->reactivateSubscription($subscription_id);\n\n    echo 'Reactivated Subscription:' . PHP_EOL;\n    var_dump($subscription);\n} catch (\\Recurly\\Errors\\Validation $e) {\n    // If the request was not valid, you may want to tell your user\n    // why. You can find the invalid params and reasons in err.params\n    var_dump($e);\n} catch (\\Recurly\\RecurlyError $e) {\n    // If we don't know what to do with the err, we should\n    // probably re-raise and let our web framework and logger handle it\n    var_dump($e);\n}\n"
          },
          {
            "lang": "Go",
            "source": "sub, err := client.ReactivateSubscription(subID)\nif e, ok := err.(*recurly.Error); ok {\n\tif e.Type == recurly.ErrorTypeValidation {\n\t\tfmt.Printf(\"Failed validation: %v\", e)\n\t\treturn nil, err\n\t}\n\tfmt.Printf(\"Unexpected Recurly error: %v\", e)\n\treturn nil, err\n}\nfmt.Printf(\"Reactivated Subscription: %s\", sub.Id)"
          }
        ]
      }
    },
    "/sites/{site_id}/subscriptions/{subscription_id}/pause": {
      "put": {
        "tags": [
          "subscription"
        ],
        "summary": "Pause subscription",
        "description": "This will put a subscription into the pause state at the next renewal. The body\nof the request must contain the `remaining_pause_cycles` parameter. If the\nsubscription is currently paused and `remaining_pause_cycles` is 0, the subscription\nwill be resumed.\n\nExpired, cancelled, or failed subscriptions cannot be paused.\n",
        "operationId": "pause_subscription",
        "parameters": [
          {
            "name": "site_id",
            "in": "path",
            "description": "Site ID or subdomain. For ID no prefix is used e.g. `e28zov4fw0v2`. For subdomain use prefix `subdomain-`, e.g. `subdomain-recurly`.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "subscription_id",
            "in": "path",
            "description": "Subscription ID or UUID. For ID no prefix is used e.g. `e28zov4fw0v2`. For UUID use prefix `uuid-`, e.g. `uuid-123457890`.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SubscriptionPause"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "A subscription.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Subscription"
                }
              }
            }
          },
          "404": {
            "description": "Incorrect site or subscription ID.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "422": {
            "description": "A validation error such as \"remaining_pause_cycles is required\".",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "Node.js",
            "source": "try {\n  let pauseReq = {\n    remaining_pause_cycles: 2,\n  }\n  const subscription = await client.pauseSubscription(subscriptionId, pauseReq)\n  console.log('Paused subscription: ', subscription.id)\n} catch (err) {\n  if (err instanceof recurly.errors.ValidationError) {\n    // If the request was not valid, you may want to tell your user\n    // why. You can find the invalid params and reasons in err.params\n    console.log('Failed validation', err.params)\n  } else {\n    // If we don't know what to do with the err, we should\n    // probably re-raise and let our web framework and logger handle it\n    console.log('Unknown Error: ', err)\n  }\n}\n"
          },
          {
            "lang": "Python",
            "source": "try:\n    sub_pause = {\"remaining_pause_cycles\": 10}\n    subscription = client.pause_subscription(subscription_id, sub_pause)\n    print(\"Paused Subscription %s\" % subscription)\nexcept recurly.errors.ValidationError as e:\n    # If the request was invalid, you may want to tell your user\n    # why. You can find the invalid params and reasons in e.error.params\n    print(\"ValidationError: %s\" % e.error.message)\n    print(e.error.params)\n"
          },
          {
            "lang": ".NET",
            "source": "try\n{\n    var pauseReq = new SubscriptionPause() {\n      RemainingPauseCycles = 2\n    };\n    Subscription subscription = client.PauseSubscription(subscriptionId, pauseReq);\n    Console.WriteLine($\"Paused Subscription {subscription.Id}\");\n}\ncatch (Recurly.Errors.NotFound ex)\n{\n    // If the resource was not found\n    // we may want to alert the user or just return null\n    Console.WriteLine($\"Resource Not Found: {ex.Error.Message}\");\n}\ncatch (Recurly.Errors.ApiError ex)\n{\n    // Use ApiError to catch a generic error from the API\n    Console.WriteLine($\"Unexpected Recurly Error: {ex.Error.Message}\");\n}\n"
          },
          {
            "lang": "Ruby",
            "source": "begin\n  subscription_pause = {\n    remaining_pause_cycles: 10\n  }\n  subscription = @client.pause_subscription(\n    subscription_id: subscription_id,\n    body: subscription_pause\n  )\n  puts \"Paused Subscription #{subscription}\"\nrescue Recurly::Errors::NotFoundError\n  # If the resource was not found, you may want to alert the user or\n  # just return nil\n  puts \"Resource Not Found\"\nend\n"
          },
          {
            "lang": "Java",
            "source": "try {\n    final SubscriptionPause subPause = new SubscriptionPause();\n    subPause.setRemainingPauseCycles(10);\n\n    final Subscription subscription = client.pauseSubscription(subscriptionId, subPause);\n    System.out.println(\"Paused Subscription: \" + subscription.getUuid());\n} catch (ValidationException e) {\n    // If the request was not valid, you may want to tell your user\n    // why. You can find the invalid params and reasons in e.getError().getParams()\n    System.out.println(\"Failed validation: \" + e.getError().getMessage());\n} catch (ApiException e) {\n    // Use ApiException to catch a generic error from the API\n    System.out.println(\"Unexpected Recurly Error: \" + e.getError().getMessage());\n}\n"
          },
          {
            "lang": "PHP",
            "source": "try {\n    $sub_pause = [ \"remaining_pause_cycles\" => 10 ];\n    $subscription = $client->pauseSubscription($subscription_id, $sub_pause);\n\n    echo 'Paused Subscription:' . PHP_EOL;\n    var_dump($subscription);\n} catch (\\Recurly\\Errors\\Validation $e) {\n    // If the request was not valid, you may want to tell your user\n    // why. You can find the invalid params and reasons in err.params\n    var_dump($e);\n} catch (\\Recurly\\RecurlyError $e) {\n    // If we don't know what to do with the err, we should\n    // probably re-raise and let our web framework and logger handle it\n    var_dump($e);\n}\n"
          },
          {
            "lang": "Go",
            "source": "pauseReq := &recurly.SubscriptionPause{\n\tRemainingPauseCycles: recurly.Int(1),\n}\nsub, err := client.PauseSubscription(subID, pauseReq)\nif e, ok := err.(*recurly.Error); ok {\n\tif e.Type == recurly.ErrorTypeValidation {\n\t\tfmt.Printf(\"Failed validation: %v\", e)\n\t\treturn nil, err\n\t}\n\tfmt.Printf(\"Unexpected Recurly error: %v\", e)\n\treturn nil, err\n}\nfmt.Printf(\"Paused Subscription: %s\", sub.Id)"
          }
        ]
      }
    },
    "/sites/{site_id}/subscriptions/{subscription_id}/resume": {
      "put": {
        "tags": [
          "subscription"
        ],
        "summary": "Resume subscription",
        "description": "This will immediately resume a paused subscription and move it into the\nactive state.\n\nThe subscription must be in the paused state. Active, expired, cancelled,\nor failed subscriptions cannot be resumed.\n",
        "operationId": "resume_subscription",
        "parameters": [
          {
            "name": "site_id",
            "in": "path",
            "description": "Site ID or subdomain. For ID no prefix is used e.g. `e28zov4fw0v2`. For subdomain use prefix `subdomain-`, e.g. `subdomain-recurly`.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "subscription_id",
            "in": "path",
            "description": "Subscription ID or UUID. For ID no prefix is used e.g. `e28zov4fw0v2`. For UUID use prefix `uuid-`, e.g. `uuid-123457890`.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A subscription.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Subscription"
                }
              }
            }
          },
          "404": {
            "description": "Incorrect site or subscription ID.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "422": {
            "description": "A validation error such as \"Unable to resume active subscription\".",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "Node.js",
            "source": "try {\n  const subscription = await client.resumeSubscription(subscriptionId)\n  console.log('Resumed subscription: ', subscription.id)\n} catch (err) {\n  if (err instanceof recurly.errors.ValidationError) {\n    // If the request was not valid, you may want to tell your user\n    // why. You can find the invalid params and reasons in err.params\n    console.log('Failed validation', err.params)\n  } else {\n    // If we don't know what to do with the err, we should\n    // probably re-raise and let our web framework and logger handle it\n    console.log('Unknown Error: ', err)\n  }\n}\n"
          },
          {
            "lang": "Python",
            "source": "try:\n    subscription = client.resume_subscription(subscription_id)\n    print(\"Resumed Subscription %s\" % subscription)\nexcept recurly.errors.ValidationError as e:\n    # If the request was invalid, you may want to tell your user\n    # why. You can find the invalid params and reasons in e.error.params\n    print(\"ValidationError: %s\" % e.error.message)\n    print(e.error.params)\n"
          },
          {
            "lang": ".NET",
            "source": "try\n{\n    Subscription subscription = client.ResumeSubscription(subscriptionId);\n    Console.WriteLine($\"Resumed Subscription {subscription.Id}\");\n}\ncatch (Recurly.Errors.NotFound ex)\n{\n    // If the resource was not found\n    // we may want to alert the user or just return null\n    Console.WriteLine($\"Resource Not Found: {ex.Error.Message}\");\n}\ncatch (Recurly.Errors.ApiError ex)\n{\n    // Use ApiError to catch a generic error from the API\n    Console.WriteLine($\"Unexpected Recurly Error: {ex.Error.Message}\");\n}\n"
          },
          {
            "lang": "Ruby",
            "source": "begin\n  subscription = @client.resume_subscription(\n    subscription_id: subscription_id\n  )\n  puts \"Resumed Subscription #{subscription}\"\nrescue Recurly::Errors::NotFoundError\n  # If the resource was not found, you may want to alert the user or\n  # just return nil\n  puts \"Resource Not Found\"\nend\n"
          },
          {
            "lang": "Java",
            "source": "try {\n    final Subscription subscription = client.resumeSubscription(subscriptionId);\n    System.out.println(\"Resumed Subscription: \" + subscription.getUuid());\n} catch (ValidationException e) {\n    // If the request was not valid, you may want to tell your user\n    // why. You can find the invalid params and reasons in e.getError().getParams()\n    System.out.println(\"Failed validation: \" + e.getError().getMessage());\n} catch (ApiException e) {\n    // Use ApiException to catch a generic error from the API\n    System.out.println(\"Unexpected Recurly Error: \" + e.getError().getMessage());\n}\n"
          },
          {
            "lang": "PHP",
            "source": "try {\n    $subscription = $client->resumeSubscription($subscription_id);\n\n    echo 'Resumed Subscription:' . PHP_EOL;\n    var_dump($subscription);\n} catch (\\Recurly\\Errors\\Validation $e) {\n    // If the request was not valid, you may want to tell your user\n    // why. You can find the invalid params and reasons in err.params\n    var_dump($e);\n} catch (\\Recurly\\RecurlyError $e) {\n    // If we don't know what to do with the err, we should\n    // probably re-raise and let our web framework and logger handle it\n    var_dump($e);\n}\n"
          },
          {
            "lang": "Go",
            "source": "sub, err := client.ResumeSubscription(subID)\nif e, ok := err.(*recurly.Error); ok {\n\tif e.Type == recurly.ErrorTypeValidation {\n\t\tfmt.Printf(\"Failed validation: %v\", e)\n\t\treturn nil, err\n\t}\n\tfmt.Printf(\"Unexpected Recurly error: %v\", e)\n\treturn nil, err\n}\nfmt.Printf(\"Resumed Subscription: %s\", sub.Id)"
          }
        ]
      }
    },
    "/sites/{site_id}/subscriptions/{subscription_id}/convert_trial": {
      "put": {
        "tags": [
          "subscription"
        ],
        "summary": "Convert trial subscription",
        "description": "This will immediately convert a trial subscription to a fully active paid subscription, creating and collecting an invoice for auto-collecting subsriptions.  If the invoice cannot be collected, the subscription will remain in trial. The subscription must be in a trial. Active, paused, expired, cancelled, or failed subscriptions cannot be converted.",
        "operationId": "convert_trial",
        "parameters": [
          {
            "name": "site_id",
            "in": "path",
            "description": "Site ID or subdomain. For ID no prefix is used e.g. `e28zov4fw0v2`. For subdomain use prefix `subdomain-`, e.g. `subdomain-recurly`.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "subscription_id",
            "in": "path",
            "description": "Subscription ID or UUID. For ID no prefix is used e.g. `e28zov4fw0v2`. For UUID use prefix `uuid-`, e.g. `uuid-123457890`.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A subscription.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Subscription"
                }
              }
            }
          },
          "404": {
            "description": "Incorrect site or subscription ID.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "422": {
            "description": "A validation error such as \"Unable to convert active subscription\", or a transaction error if the invoice could not be collected.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMayHaveTransaction"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-code-samples": []
      }
    },
    "/sites/{site_id}/subscriptions/{subscription_id}/change": {
      "get": {
        "tags": [
          "subscription",
          "subscription_change"
        ],
        "summary": "Fetch a subscription's pending change",
        "operationId": "get_subscription_change",
        "parameters": [
          {
            "name": "site_id",
            "in": "path",
            "description": "Site ID or subdomain. For ID no prefix is used e.g. `e28zov4fw0v2`. For subdomain use prefix `subdomain-`, e.g. `subdomain-recurly`.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "subscription_id",
            "in": "path",
            "description": "Subscription ID or UUID. For ID no prefix is used e.g. `e28zov4fw0v2`. For UUID use prefix `uuid-`, e.g. `uuid-123457890`.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A subscription's pending change.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriptionChange"
                }
              }
            }
          },
          "400": {
            "description": "Invalid or unpermitted parameter.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Incorrect site ID or subscription ID or the subscription has no pending change.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "422": {
            "description": "Expired subscriptions cannot be changed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "Node.js",
            "source": "try {\n  const change = await client.getSubscriptionChange(subscriptionId)\n  console.log('Fetched subscription change: ', change.id)\n} catch (err) {\n  if (err instanceof recurly.errors.NotFoundError) {\n    // If the request was not found, you may want to alert the user or\n    // just return null\n    console.log('Resource Not Found')\n  } else {\n    // If we don't know what to do with the err, we should\n    // probably re-raise and let our web framework and logger handle it\n    console.log('Unknown Error: ', err)\n  }\n}\n"
          },
          {
            "lang": "Python",
            "source": "try:\n    change = client.get_subscription_change(subscription_id)\n    print(\"Got SubscriptionChange %s\" % change)\nexcept recurly.errors.NotFoundError:\n    # If the resource was not found, you may want to alert the user or\n    # just return nil\n    print(\"Resource Not Found\")\n"
          },
          {
            "lang": ".NET",
            "source": "try\n{\n    SubscriptionChange change = client.GetSubscriptionChange(subscriptionId);\n    Console.WriteLine($\"Fetched subscription change {change.Id}\");\n}\ncatch (Recurly.Errors.NotFound ex)\n{\n    // If the resource was not found\n    // we may want to alert the user or just return null\n    Console.WriteLine($\"Resource Not Found: {ex.Error.Message}\");\n}\ncatch (Recurly.Errors.ApiError ex)\n{\n    // Use ApiError to catch a generic error from the API\n    Console.WriteLine($\"Unexpected Recurly Error: {ex.Error.Message}\");\n}\n"
          },
          {
            "lang": "Ruby",
            "source": "begin\n  change = @client.get_subscription_change(\n    subscription_id: subscription_id\n  )\n  puts \"Got SubscriptionChange #{change}\"\nrescue Recurly::Errors::NotFoundError\n  # If the resource was not found, you may want to alert the user or\n  # just return nil\n  puts \"Resource Not Found\"\nend\n"
          },
          {
            "lang": "Java",
            "source": "try {\n    final SubscriptionChange change = client.getSubscriptionChange(subscriptionId);\n    System.out.println(\"Fetched Subscription change \" + change.getId());\n} catch (ValidationException e) {\n    // If the request was not valid, you may want to tell your user\n    // why. You can find the invalid params and reasons in e.getError().getParams()\n    System.out.println(\"Failed validation: \" + e.getError().getMessage());\n} catch (ApiException e) {\n    // Use ApiException to catch a generic error from the API\n    System.out.println(\"Unexpected Recurly Error: \" + e.getError().getMessage());\n}\n"
          },
          {
            "lang": "PHP",
            "source": "try {\n    $change = $client->getSubscriptionChange($subscription_id);\n\n    echo 'Got Pending Subscription Change:' . PHP_EOL;\n    var_dump($change);\n} catch (\\Recurly\\Errors\\NotFound $e) {\n    // Could not find the resource, you may want to inform the user\n    // or just return a NULL\n    echo 'Could not find resource.' . PHP_EOL;\n    var_dump($e);\n} catch (\\Recurly\\RecurlyError $e) {\n    // Something bad happened... tell the user so that they can fix it?\n    echo 'Some unexpected Recurly error happened. Try again later.' . PHP_EOL;\n}\n"
          },
          {
            "lang": "Go",
            "source": "subscriptionChange, err := client.GetSubscriptionChange(subID)\nif e, ok := err.(*recurly.Error); ok {\n\tif e.Type == recurly.ErrorTypeNotFound {\n\t\tfmt.Printf(\"Resource not found: %v\", e)\n\t\treturn nil, err\n\t}\n\tfmt.Printf(\"Unexpected Recurly error: %v\", e)\n\treturn nil, err\n}\nfmt.Printf(\"Fetched subscription change: %s\", subscriptionChange.Id)"
          }
        ]
      },
      "post": {
        "tags": [
          "subscription",
          "subscription_change"
        ],
        "summary": "Create a new subscription change",
        "description": "Calling this will overwrite an existing, pending subscription change.",
        "operationId": "create_subscription_change",
        "parameters": [
          {
            "name": "site_id",
            "in": "path",
            "description": "Site ID or subdomain. For ID no prefix is used e.g. `e28zov4fw0v2`. For subdomain use prefix `subdomain-`, e.g. `subdomain-recurly`.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "subscription_id",
            "in": "path",
            "description": "Subscription ID or UUID. For ID no prefix is used e.g. `e28zov4fw0v2`. For UUID use prefix `uuid-`, e.g. `uuid-123457890`.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SubscriptionChangeCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "A subscription change.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriptionChange"
                }
              }
            }
          },
          "404": {
            "description": "Incorrect site ID.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "422": {
            "description": "A validation error such as \"Subscription hasn't been changed\" or error running the verification transaction.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMayHaveTransaction"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "Node.js",
            "source": "try {\n  const subscriptionChangeCreate = {\n    planCode: newPlanCode,\n    timeframe: 'now'\n  }\n\n  const change = await client.createSubscriptionChange(subscriptionId, subscriptionChangeCreate)\n  console.log('Created subscription change: ', change.id)\n} catch (err) {\n  if (err instanceof recurly.errors.ValidationError) {\n    // If the request was not valid, you may want to tell your user\n    // why. You can find the invalid params and reasons in err.params\n    console.log('Failed validation', err.params)\n  } else {\n    // If we don't know what to do with the err, we should\n    // probably re-raise and let our web framework and logger handle it\n    console.log('Unknown Error: ', err)\n  }\n}\n"
          },
          {
            "lang": "Python",
            "source": "try:\n    sub_change_create = {\"plan_code\": new_plan_code, \"timeframe\": \"now\"}\n    change = client.create_subscription_change(subscription_id, sub_change_create)\n    print(\"Created SubscriptionChange %s\" % change)\nexcept recurly.errors.ValidationError as e:\n    # If the request was invalid, you may want to tell your user\n    # why. You can find the invalid params and reasons in e.error.params\n    print(\"ValidationError: %s\" % e.error.message)\n    print(e.error.params)\n"
          },
          {
            "lang": ".NET",
            "source": "try\n{\n    var changeReq = new SubscriptionChangeCreate()\n    {\n        PlanCode = newPlanCode,\n        Timeframe = \"now\" // choose \"now\" or \"renewal\"\n    };\n    SubscriptionChange change = client.CreateSubscriptionChange(subscriptionId, changeReq);\n    Console.WriteLine($\"Created subscription change {change.Id}\");\n}\ncatch (Recurly.Errors.Validation ex)\n{\n    // If the request was not valid, you may want to tell your user\n    // why. You can find the invalid params and reasons in ex.Error.Params\n    Console.WriteLine($\"Failed validation: {ex.Error.Message}\");\n}\ncatch (Recurly.Errors.ApiError ex)\n{\n    // Use ApiError to catch a generic error from the API\n    Console.WriteLine($\"Unexpected Recurly Error: {ex.Error.Message}\");\n}\n"
          },
          {
            "lang": "Ruby",
            "source": "begin\n  change_create = {\n    timeframe: \"now\",\n    plan_code: new_plan_code\n  }\n  change = @client.create_subscription_change(\n    subscription_id: subscription_id,\n    body: change_create\n  )\n  puts \"Created SubscriptionChange #{change}\"\nrescue Recurly::Errors::ValidationError => e\n  # If the request was invalid, you may want to tell your user\n  # why. You can find the invalid params and reasons in e.recurly_error.params\n  puts \"ValidationError: #{e.recurly_error.params}\"\nend\n"
          },
          {
            "lang": "Java",
            "source": "try {\n    SubscriptionChangeCreate changeCreate = new SubscriptionChangeCreate();\n\n    changeCreate.setPlanCode(newPlanCode);\n    changeCreate.setTimeframe(\"now\"); // choose \"now\" or \"renewal\"\n\n    SubscriptionChange change = client.createSubscriptionChange(subscriptionId, changeCreate);\n    System.out.println(\"Created subscription \" + change.getId());\n} catch (ValidationException e) {\n    // If the request was not valid, you may want to tell your user\n    // why. You can find the invalid params and reasons in e.getError().getParams()\n    System.out.println(\"Failed validation: \" + e.getError().getMessage());\n} catch (ApiException e) {\n    // Use ApiException to catch a generic error from the API\n    System.out.println(\"Unexpected Recurly Error: \" + e.getError().getMessage());\n}\n"
          },
          {
            "lang": "PHP",
            "source": "try {\n    $change_create = array(\n        \"plan_code\" => $new_plan_code,\n        \"timeframe\" => \"now\"\n    );\n    $change = $client->createSubscriptionChange($subscription_id, $change_create);\n\n    echo 'Created Subscription Change:' . PHP_EOL;\n    var_dump($change);\n} catch (\\Recurly\\Errors\\Validation $e) {\n    // If the request was not valid, you may want to tell your user\n    // why. You can find the invalid params and reasons in err.params\n    var_dump($e);\n} catch (\\Recurly\\RecurlyError $e) {\n    // If we don't know what to do with the err, we should\n    // probably re-raise and let our web framework and logger handle it\n    var_dump($e);\n}\n"
          },
          {
            "lang": "Go",
            "source": "changeReq := &recurly.SubscriptionChangeCreate{\n\tPlanCode:  recurly.String(newPlanCode),\n\tTimeframe: recurly.String(\"now\"),\n}\nsubscriptionChange, err := client.CreateSubscriptionChange(subID, changeReq)\nif e, ok := err.(*recurly.Error); ok {\n\tif e.Type == recurly.ErrorTypeValidation {\n\t\tfmt.Printf(\"Failed validation: %v\", e)\n\t\treturn nil, err\n\t}\n\tfmt.Printf(\"Unexpected Recurly error: %v\", e)\n\treturn nil, err\n}\nfmt.Printf(\"Subscription changed: %s\", subscriptionChange.Id)"
          }
        ]
      },
      "delete": {
        "tags": [
          "subscription",
          "subscription_change"
        ],
        "summary": "Delete the pending subscription change",
        "description": "Deleting the pending subscription change will cause the current subscription settings to be used on the next renewal.",
        "operationId": "remove_subscription_change",
        "parameters": [
          {
            "name": "site_id",
            "in": "path",
            "description": "Site ID or subdomain. For ID no prefix is used e.g. `e28zov4fw0v2`. For subdomain use prefix `subdomain-`, e.g. `subdomain-recurly`.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "subscription_id",
            "in": "path",
            "description": "Subscription ID or UUID. For ID no prefix is used e.g. `e28zov4fw0v2`. For UUID use prefix `uuid-`, e.g. `uuid-123457890`.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Subscription change was deleted."
          },
          "422": {
            "description": "Activated subscription changes cannot be deleted.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "Node.js",
            "source": "try {\n  await client.removeSubscriptionChange(subscriptionId)\n  console.log('Removed subscription change: ', subscriptionId)\n} catch (err) {\n  if (err instanceof recurly.errors.NotFoundError) {\n    // If the request was not found, you may want to alert the user or\n    // just return null\n    console.log('Resource Not Found')\n  } else {\n    // If we don't know what to do with the err, we should\n    // probably re-raise and let our web framework and logger handle it\n    console.log('Unknown Error: ', err)\n  }\n}\n"
          },
          {
            "lang": "Python",
            "source": "try:\n    client.remove_subscription_change(subscription_id)\n    print(\"Removed SubscriptionChange from Subscription id=%s\" % subscription_id)\nexcept recurly.errors.NotFoundError:\n    # If the resource was not found, you may want to alert the user or\n    # just return nil\n    print(\"Resource Not Found\")\n"
          },
          {
            "lang": ".NET",
            "source": "try\n{\n    client.RemoveSubscriptionChange(subscriptionId);\n    Console.WriteLine($\"Removed subscription change from {subscriptionId}\");\n}\ncatch (Recurly.Errors.Validation ex)\n{\n    // If the request was not valid, you may want to tell your user\n    // why. You can find the invalid params and reasons in ex.Error.Params\n    Console.WriteLine($\"Failed validation: {ex.Error.Message}\");\n}\ncatch (Recurly.Errors.ApiError ex)\n{\n    // Use ApiError to catch a generic error from the API\n    Console.WriteLine($\"Unexpected Recurly Error: {ex.Error.Message}\");\n}\n"
          },
          {
            "lang": "Ruby",
            "source": "begin\n  @client.remove_subscription_change(\n    subscription_id: subscription_id\n  )\n  puts \"Removed SubscriptionChange #{subscription_id}\"\nrescue Recurly::Errors::NotFoundError\n  # If the resource was not found, you may want to alert the user or\n  # just return nil\n  puts \"Resource Not Found\"\nend\n"
          },
          {
            "lang": "Java",
            "source": "try {\n    client.removeSubscriptionChange(subscriptionId);\n    System.out.println(\"Removed Subscription change from \" + subscriptionId);\n} catch (ValidationException e) {\n    // If the request was not valid, you may want to tell your user\n    // why. You can find the invalid params and reasons in e.getError().getParams()\n    System.out.println(\"Failed validation: \" + e.getError().getMessage());\n} catch (ApiException e) {\n    // Use ApiException to catch a generic error from the API\n    System.out.println(\"Unexpected Recurly Error: \" + e.getError().getMessage());\n}\n"
          },
          {
            "lang": "PHP",
            "source": "try {\n    $client->removeSubscriptionChange($subscription_id);\n    echo 'Removed Subscription Change: ' . $subscription_id . PHP_EOL;\n} catch (\\Recurly\\Errors\\Validation $e) {\n    // If the request was not valid, you may want to tell your user\n    // why. You can find the invalid params and reasons in err.params\n    var_dump($e);\n} catch (\\Recurly\\RecurlyError $e) {\n    // If we don't know what to do with the err, we should\n    // probably re-raise and let our web framework and logger handle it\n    var_dump($e);\n}\n"
          },
          {
            "lang": "Go",
            "source": "subscriptionChange, err := client.RemoveSubscriptionChange(subID)\nif e, ok := err.(*recurly.Error); ok {\n\tif e.Type == recurly.ErrorTypeNotFound {\n\t\tfmt.Printf(\"Resource not found: %v\", e)\n\t\treturn nil, err\n\t}\n\tfmt.Printf(\"Unexpected Recurly error: %v\", e)\n\treturn nil, err\n}\n\nfmt.Printf(\"Removed Subscription Change: %v\", subscriptionChange)"
          }
        ]
      }
    },
    "/sites/{site_id}/subscriptions/{subscription_id}/change/preview": {
      "post": {
        "tags": [
          "subscription",
          "subscription_change"
        ],
        "summary": "Preview a new subscription change",
        "description": "Calling this will not save the subscription change or overwrite an existing change.",
        "operationId": "preview_subscription_change",
        "parameters": [
          {
            "name": "site_id",
            "in": "path",
            "description": "Site ID or subdomain. For ID no prefix is used e.g. `e28zov4fw0v2`. For subdomain use prefix `subdomain-`, e.g. `subdomain-recurly`.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "subscription_id",
            "in": "path",
            "description": "Subscription ID or UUID. For ID no prefix is used e.g. `e28zov4fw0v2`. For UUID use prefix `uuid-`, e.g. `uuid-123457890`.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SubscriptionChangeCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "A subscription change.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriptionChangePreview"
                }
              }
            }
          },
          "404": {
            "description": "Incorrect site ID.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "422": {
            "description": "A validation error such as \"Subscription hasn't been changed\" or error running the verification transaction.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMayHaveTransaction"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-code-samples": []
      }
    },
    "/sites/{site_id}/subscriptions/{subscription_id}/invoices": {
      "get": {
        "tags": [
          "invoice",
          "subscription"
        ],
        "summary": "List a subscription's invoices",
        "operationId": "list_subscription_invoices",
        "parameters": [
          {
            "name": "site_id",
            "in": "path",
            "description": "Site ID or subdomain. For ID no prefix is used e.g. `e28zov4fw0v2`. For subdomain use prefix `subdomain-`, e.g. `subdomain-recurly`.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "subscription_id",
            "in": "path",
            "description": "Subscription ID or UUID. For ID no prefix is used e.g. `e28zov4fw0v2`. For UUID use prefix `uuid-`, e.g. `uuid-123457890`.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ids",
            "in": "query",
            "description": "Filter results by their IDs. Up to 200 IDs can be passed at once using\ncommas as separators, e.g. `ids=h1at4d57xlmy,gyqgg0d3v9n1,jrsm5b4yefg6`.\n\n**Important notes:**\n\n* The `ids` parameter cannot be used with any other ordering or filtering\n  parameters (`limit`, `order`, `sort`, `begin_time`, `end_time`, etc)\n* Invalid or unknown IDs will be ignored, so you should check that the\n  results correspond to your request.\n* Records are returned in an arbitrary order. Since results are all\n  returned at once you can sort the records yourself.\n",
            "required": false,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit number of records 1-200.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maximum": 200,
              "minimum": 1,
              "type": "integer",
              "default": 20
            }
          },
          {
            "name": "order",
            "in": "query",
            "description": "Sort order.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "default": "desc",
              "enum": [
                "asc",
                "desc"
              ]
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort field. You *really* only want to sort by `updated_at` in ascending\norder. In descending order updated records will move behind the cursor and could\nprevent some records from being returned.\n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "default": "created_at",
              "enum": [
                "created_at",
                "updated_at"
              ]
            }
          },
          {
            "name": "begin_time",
            "in": "query",
            "description": "Filter by begin_time when `sort=created_at` or `sort=updated_at`.\n**Note:** this value is an ISO8601 timestamp. A partial timestamp that does not include a time zone will default to UTC.\n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "end_time",
            "in": "query",
            "description": "Filter by end_time when `sort=created_at` or `sort=updated_at`.\n**Note:** this value is an ISO8601 timestamp. A partial timestamp that does not include a time zone will default to UTC.\n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Filter by type when:\n- `type=charge`, only charge invoices will be returned.\n- `type=credit`, only credit invoices will be returned.\n- `type=non-legacy`, only charge and credit invoices will be returned.\n- `type=legacy`, only legacy invoices will be returned.\n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": [
                "charge",
                "credit",
                "non-legacy",
                "legacy"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of the subscription's invoices.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvoiceList"
                }
              }
            }
          },
          "400": {
            "description": "Invalid or unpermitted parameter.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Incorrect site or subscription ID.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "Node.js",
            "source": "const invoices = client.listSubscriptionInvoices(subscriptionId, { limit: 200 })\n\nfor await (const invoice of invoices.each()) {\n  console.log(invoice.number)\n}\n"
          },
          {
            "lang": "Python",
            "source": "invoices = client.list_subscription_invoices(subscription_id).items()\nfor invoice in invoices:\n    print(invoice.number)\n"
          },
          {
            "lang": ".NET",
            "source": "var subscriptionInvoices = client.ListSubscriptionInvoices(subscriptionId);\nforeach(Invoice invoice in subscriptionInvoices)\n{\n    Console.WriteLine(invoice.Number);\n}\n"
          },
          {
            "lang": "Ruby",
            "source": "invoices = @client.list_subscription_invoices(\n  subscription_id: subscription_id,\n  limit: 200\n)\ninvoices.each do |invoice|\n  puts \"Invoice: #{invoice.number}\"\nend\n"
          },
          {
            "lang": "Java",
            "source": "QueryParams params = new QueryParams();\nparams.setLimit(200); // Pull 200 records at a time\nfinal Pager<Invoice> invoices = client.listSubscriptionInvoices(subscriptionId, params);\n\nfor (Invoice invoice : invoices) {\n    System.out.println(invoice.getNumber());\n}\n"
          },
          {
            "lang": "PHP",
            "source": "$params = ['limit' => 200];\n$subscription_invoices = $client->listSubscriptionInvoices($subscription_id, $params);\n\nforeach($subscription_invoices as $sub_invoice) {\n  echo 'Subscription Invoice: ' . $sub_invoice->getNumber() . PHP_EOL;\n}\n"
          },
          {
            "lang": "Go",
            "source": "listParams := &recurly.ListSubscriptionInvoicesParams{\n\tSort:  recurly.String(\"created_at\"),\n\tOrder: recurly.String(\"desc\"),\n\tLimit: recurly.Int(200),\n}\nsubInvoices := client.ListSubscriptionInvoices(subID, listParams)\n\nfor subInvoices.HasMore {\n\terr := subInvoices.Fetch()\n\tif e, ok := err.(*recurly.Error); ok {\n\t\tfmt.Printf(\"Failed to retrieve next page: %v\", e)\n\t\tbreak\n\t}\n\tfor i, invoice := range subInvoices.Data {\n\t\tfmt.Printf(\"Subscription Invoice %3d: %s\\n\",\n\t\t\ti,\n\t\t\tinvoice.Id,\n\t\t)\n\t}\n}"
          }
        ]
      }
    },
    "/sites/{site_id}/subscriptions/{subscription_id}/line_items": {
      "get": {
        "tags": [
          "subscription"
        ],
        "summary": "List a subscription's line items",
        "operationId": "list_subscription_line_items",
        "parameters": [
          {
            "name": "site_id",
            "in": "path",
            "description": "Site ID or subdomain. For ID no prefix is used e.g. `e28zov4fw0v2`. For subdomain use prefix `subdomain-`, e.g. `subdomain-recurly`.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "subscription_id",
            "in": "path",
            "description": "Subscription ID or UUID. For ID no prefix is used e.g. `e28zov4fw0v2`. For UUID use prefix `uuid-`, e.g. `uuid-123457890`.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ids",
            "in": "query",
            "description": "Filter results by their IDs. Up to 200 IDs can be passed at once using\ncommas as separators, e.g. `ids=h1at4d57xlmy,gyqgg0d3v9n1,jrsm5b4yefg6`.\n\n**Important notes:**\n\n* The `ids` parameter cannot be used with any other ordering or filtering\n  parameters (`limit`, `order`, `sort`, `begin_time`, `end_time`, etc)\n* Invalid or unknown IDs will be ignored, so you should check that the\n  results correspond to your request.\n* Records are returned in an arbitrary order. Since results are all\n  returned at once you can sort the records yourself.\n",
            "required": false,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit number of records 1-200.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maximum": 200,
              "minimum": 1,
              "type": "integer",
              "default": 20
            }
          },
          {
            "name": "order",
            "in": "query",
            "description": "Sort order.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "default": "desc",
              "enum": [
                "asc",
                "desc"
              ]
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort field. You *really* only want to sort by `updated_at` in ascending\norder. In descending order updated records will move behind the cursor and could\nprevent some records from being returned.\n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "default": "created_at",
              "enum": [
                "created_at",
                "updated_at"
              ]
            }
          },
          {
            "name": "begin_time",
            "in": "query",
            "description": "Filter by begin_time when `sort=created_at` or `sort=updated_at`.\n**Note:** this value is an ISO8601 timestamp. A partial timestamp that does not include a time zone will default to UTC.\n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "end_time",
            "in": "query",
            "description": "Filter by end_time when `sort=created_at` or `sort=updated_at`.\n**Note:** this value is an ISO8601 timestamp. A partial timestamp that does not include a time zone will default to UTC.\n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "original",
            "in": "query",
            "description": "Filter by original field.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": [
                "true"
              ]
            }
          },
          {
            "name": "state",
            "in": "query",
            "description": "Filter by state field.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": [
                "invoiced",
                "pending"
              ]
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Filter by type field.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": [
                "charge",
                "credit"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of the subscription's line items.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LineItemList"
                }
              }
            }
          },
          "400": {
            "description": "Invalid or unpermitted parameter.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Incorrect site or subscription ID.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "Node.js",
            "source": "const lineItems = client.listSubscriptionLineItems(subscriptionId, { limit: 200 })\n\nfor await (const lineItem of lineItems.each()) {\n  console.log(lineItem.id)\n}\n"
          },
          {
            "lang": "Python",
            "source": "line_items = client.list_subscription_line_items(subscription_id).items()\nfor line_item in line_items:\n    print(line_item.id)\n"
          },
          {
            "lang": ".NET",
            "source": "var subscriptionLineItems = client.ListSubscriptionLineItems(subscriptionId);\nforeach(LineItem lineItem in subscriptionLineItems)\n{\n    Console.WriteLine(lineItem.Id);\n}\n"
          },
          {
            "lang": "Ruby",
            "source": "line_items = @client.list_subscription_line_items(\n  subscription_id: subscription_id,\n  limit: 200\n)\nline_items.each do |line_item|\n  puts \"LineItem: #{line_item.id}\"\nend\n"
          },
          {
            "lang": "Java",
            "source": "QueryParams params = new QueryParams();\nparams.setLimit(200); // Pull 200 records at a time\nfinal Pager<LineItem> lineItems = client.listSubscriptionLineItems(subscriptionId, params);\n\nfor (LineItem lineItem : lineItems) {\n    System.out.println(lineItem.getId());\n}\n"
          },
          {
            "lang": "PHP",
            "source": "$params = ['limit' => 200];\n$subscription_line_items = $client->listSubscriptionLineItems($subscription_id, $params);\n\nforeach($subscription_line_items as $line_item) {\n  echo 'Subscription Invoice: ' . $line_item->getId() . PHP_EOL;\n}\n"
          },
          {
            "lang": "Go",
            "source": "listParams := &recurly.ListSubscriptionLineItemsParams{\n\tSort:  recurly.String(\"created_at\"),\n\tOrder: recurly.String(\"desc\"),\n\tLimit: recurly.Int(200),\n}\nsubLineItems := client.ListSubscriptionLineItems(subID, listParams)\n\nfor subLineItems.HasMore {\n\terr := subLineItems.Fetch()\n\tif e, ok := err.(*recurly.Error); ok {\n\t\tfmt.Printf(\"Failed to retrieve next page: %v\", e)\n\t\tbreak\n\t}\n\tfor i, lineItem := range subLineItems.Data {\n\t\tfmt.Printf(\"Subscription Line Item %3d: %s\\n\",\n\t\t\ti,\n\t\t\tlineItem.Id,\n\t\t)\n\t}\n}"
          }
        ]
      }
    },
    "/sites/{site_id}/subscriptions/{subscription_id}/coupon_redemptions": {
      "get": {
        "tags": [
          "subscription",
          "coupon_redemption"
        ],
        "summary": "Show the coupon redemptions for a subscription",
        "operationId": "list_subscription_coupon_redemptions",
        "parameters": [
          {
            "name": "site_id",
            "in": "path",
            "description": "Site ID or subdomain. For ID no prefix is used e.g. `e28zov4fw0v2`. For subdomain use prefix `subdomain-`, e.g. `subdomain-recurly`.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "subscription_id",
            "in": "path",
            "description": "Subscription ID or UUID. For ID no prefix is used e.g. `e28zov4fw0v2`. For UUID use prefix `uuid-`, e.g. `uuid-123457890`.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ids",
            "in": "query",
            "description": "Filter results by their IDs. Up to 200 IDs can be passed at once using\ncommas as separators, e.g. `ids=h1at4d57xlmy,gyqgg0d3v9n1,jrsm5b4yefg6`.\n\n**Important notes:**\n\n* The `ids` parameter cannot be used with any other ordering or filtering\n  parameters (`limit`, `order`, `sort`, `begin_time`, `end_time`, etc)\n* Invalid or unknown IDs will be ignored, so you should check that the\n  results correspond to your request.\n* Records are returned in an arbitrary order. Since results are all\n  returned at once you can sort the records yourself.\n",
            "required": false,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort field. You *really* only want to sort by `updated_at` in ascending\norder. In descending order updated records will move behind the cursor and could\nprevent some records from being returned.\n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "default": "created_at",
              "enum": [
                "created_at",
                "updated_at"
              ]
            }
          },
          {
            "name": "begin_time",
            "in": "query",
            "description": "Filter by begin_time when `sort=created_at` or `sort=updated_at`.\n**Note:** this value is an ISO8601 timestamp. A partial timestamp that does not include a time zone will default to UTC.\n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "end_time",
            "in": "query",
            "description": "Filter by end_time when `sort=created_at` or `sort=updated_at`.\n**Note:** this value is an ISO8601 timestamp. A partial timestamp that does not include a time zone will default to UTC.\n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of the the coupon redemptions on a subscription.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CouponRedemptionList"
                }
              }
            }
          },
          "404": {
            "description": "Incorrect site or subscription ID.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "Node.js",
            "source": "const redemptions = client.listSubscriptionCouponRedemptions(subscriptionId, { limit: 200 })\n\nfor await (const redemption of redemptions.each()) {\n  console.log(redemption.id)\n}\n"
          },
          {
            "lang": "Python",
            "source": "redemptions = client.list_subscription_coupon_redemptions(subscription_id).items()\nfor redemption in redemptions:\n    print(redemption.uuid)\n"
          },
          {
            "lang": ".NET",
            "source": "var subscriptionCouponRedemptions = client.ListSubscriptionCouponRedemptions(subscriptionId);\nforeach(CouponRedemption redemption in subscriptionCouponRedemptions)\n{\n    Console.WriteLine(redemption.Id);\n}\n"
          },
          {
            "lang": "Ruby",
            "source": "coupon_redemptions = @client.list_subscription_coupon_redemptions(\n  subscription_id: subscription_id,\n  limit: 200\n)\ncoupon_redemptions.each do |redemption|\n  puts \"CouponRedemption: #{redemption.id}\"\nend\n"
          },
          {
            "lang": "Java",
            "source": "QueryParams params = new QueryParams();\nparams.setLimit(200); // Pull 200 records at a time\nfinal Pager<CouponRedemption> redemptions = client.listSubscriptionCouponRedemptions(subscriptionId, params);\n\nfor (CouponRedemption redemption : redemptions) {\n    System.out.println(redemption.getId());\n}\n"
          },
          {
            "lang": "PHP",
            "source": "$params = ['limit' => 200];\n$subscription_coupon_redemptions = $client->listSubscriptionCouponRedemptions($subscription_id, $params);\n\nforeach($subscription_coupon_redemptions as $redemption) {\n  echo 'Subscription Coupon Redemption: ' . $redemption->getId() . PHP_EOL;\n}\n"
          },
          {
            "lang": "Go",
            "source": "listParams := &recurly.ListSubscriptionCouponRedemptionsParams{\n\tSort: recurly.String(\"created_at\"),\n}\nsubCouponRedemptions := client.ListSubscriptionCouponRedemptions(subID, listParams)\n\nfor subCouponRedemptions.HasMore {\n\terr := subCouponRedemptions.Fetch()\n\tif e, ok := err.(*recurly.Error); ok {\n\t\tfmt.Printf(\"Failed to retrieve next page: %v\", e)\n\t\tbreak\n\t}\n\tfor i, redemption := range subCouponRedemptions.Data {\n\t\tfmt.Printf(\"Subscription Coupon Redemption %3d: %s\\n\",\n\t\t\ti,\n\t\t\tredemption.Id,\n\t\t)\n\t}\n}"
          }
        ]
      }
    },
    "/sites/{site_id}/transactions": {
      "get": {
        "tags": [
          "transaction"
        ],
        "summary": "List a site's transactions",
        "operationId": "list_transactions",
        "parameters": [
          {
            "name": "site_id",
            "in": "path",
            "description": "Site ID or subdomain. For ID no prefix is used e.g. `e28zov4fw0v2`. For subdomain use prefix `subdomain-`, e.g. `subdomain-recurly`.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ids",
            "in": "query",
            "description": "Filter results by their IDs. Up to 200 IDs can be passed at once using\ncommas as separators, e.g. `ids=h1at4d57xlmy,gyqgg0d3v9n1,jrsm5b4yefg6`.\n\n**Important notes:**\n\n* The `ids` parameter cannot be used with any other ordering or filtering\n  parameters (`limit`, `order`, `sort`, `begin_time`, `end_time`, etc)\n* Invalid or unknown IDs will be ignored, so you should check that the\n  results correspond to your request.\n* Records are returned in an arbitrary order. Since results are all\n  returned at once you can sort the records yourself.\n",
            "required": false,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit number of records 1-200.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maximum": 200,
              "minimum": 1,
              "type": "integer",
              "default": 20
            }
          },
          {
            "name": "order",
            "in": "query",
            "description": "Sort order.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "default": "desc",
              "enum": [
                "asc",
                "desc"
              ]
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort field. You *really* only want to sort by `updated_at` in ascending\norder. In descending order updated records will move behind the cursor and could\nprevent some records from being returned.\n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "default": "created_at",
              "enum": [
                "created_at",
                "updated_at"
              ]
            }
          },
          {
            "name": "begin_time",
            "in": "query",
            "description": "Filter by begin_time when `sort=created_at` or `sort=updated_at`.\n**Note:** this value is an ISO8601 timestamp. A partial timestamp that does not include a time zone will default to UTC.\n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "end_time",
            "in": "query",
            "description": "Filter by end_time when `sort=created_at` or `sort=updated_at`.\n**Note:** this value is an ISO8601 timestamp. A partial timestamp that does not include a time zone will default to UTC.\n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Filter by type field. The value `payment` will return both `purchase` and `capture` transactions.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": [
                "verify",
                "authorization",
                "capture",
                "purchase",
                "refund",
                "payment"
              ]
            }
          },
          {
            "name": "success",
            "in": "query",
            "description": "Filter by success field.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": [
                "true"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of the site's transactions.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionList"
                }
              }
            }
          },
          "400": {
            "description": "Invalid or unpermitted parameter.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Incorrect site or subscription ID.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "Node.js",
            "source": "const transactions = client.listTransactions({ limit: 200 })\n\nfor await (const transaction of transactions.each()) {\n  console.log(transaction.uuid)\n}\n"
          },
          {
            "lang": "Python",
            "source": "transactions = client.list_transactions(limit=200).items()\nfor transaction in transactions:\n    print(transaction.uuid)\n"
          },
          {
            "lang": ".NET",
            "source": "var transactions = client.ListTransactions(limit: 200);\nforeach(Transaction transaction in transactions)\n{\n    Console.WriteLine(transaction.Uuid);\n}\n"
          },
          {
            "lang": "Ruby",
            "source": "transactions = @client.list_transactions(limit: 200)\ntransactions.each do |transaction|\n  puts \"Transaction: #{transaction.uuid}\"\nend\n"
          },
          {
            "lang": "Java",
            "source": "QueryParams params = new QueryParams();\nparams.setLimit(200); // Pull 200 records at a time\nfinal Pager<Transaction> transactions = client.listTransactions(params);\n\nfor (Transaction transaction : transactions) {\n    System.out.println(transaction.getUuid());\n}\n"
          },
          {
            "lang": "PHP",
            "source": "$params = ['limit' => 200];\n$transactions = $client->listTransactions($params);\n\nforeach($transactions as $transaction) {\n  echo 'Transaction: ' . $transaction->getUuid() . PHP_EOL;\n}\n"
          },
          {
            "lang": "Go",
            "source": "listParams := &recurly.ListTransactionsParams{\n\tSort:  recurly.String(\"created_at\"),\n\tOrder: recurly.String(\"desc\"),\n\tLimit: recurly.Int(200),\n}\ntransactions := client.ListTransactions(listParams)\n\nfor transactions.HasMore {\n\terr := transactions.Fetch()\n\tif e, ok := err.(*recurly.Error); ok {\n\t\tfmt.Printf(\"Failed to retrieve next page: %v\", e)\n\t\tbreak\n\t}\n\tfor i, transaction := range transactions.Data {\n\t\tfmt.Printf(\"Transaction %3d: %s\\n\",\n\t\t\ti,\n\t\t\ttransaction.Id,\n\t\t)\n\t}\n}"
          }
        ]
      }
    },
    "/sites/{site_id}/transactions/{transaction_id}": {
      "get": {
        "tags": [
          "transaction"
        ],
        "summary": "Fetch a transaction",
        "operationId": "get_transaction",
        "parameters": [
          {
            "name": "site_id",
            "in": "path",
            "description": "Site ID or subdomain. For ID no prefix is used e.g. `e28zov4fw0v2`. For subdomain use prefix `subdomain-`, e.g. `subdomain-recurly`.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "transaction_id",
            "in": "path",
            "description": "Transaction ID or UUID. For ID no prefix is used e.g. `e28zov4fw0v2`. For UUID use prefix `uuid-`, e.g. `uuid-123457890`.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A transaction.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Transaction"
                }
              }
            }
          },
          "404": {
            "description": "Incorrect site or transaction ID.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "Node.js",
            "source": "try {\n  const transaction = await client.getTransaction(transactionId)\n  console.log('Fetched transaction: ', transaction.uuid)\n} catch (err) {\n  if (err instanceof recurly.errors.NotFoundError) {\n    // If the request was not found, you may want to alert the user or\n    // just return null\n    console.log('Resource Not Found')\n  } else {\n    // If we don't know what to do with the err, we should\n    // probably re-raise and let our web framework and logger handle it\n    console.log('Unknown Error: ', err)\n  }\n}\n"
          },
          {
            "lang": "Python",
            "source": "try:\n  transaction = client.get_transaction(transaction_id)\n  print(\"Got Transaction %s\" % transaction)\nexcept recurly.errors.NotFoundError:\n    # If the resource was not found, you may want to alert the user or\n    # just return nil\n    print(\"Resource Not Found\")\n"
          },
          {
            "lang": ".NET",
            "source": "try\n{\n    Transaction transaction = client.GetTransaction(transactionId);\n    Console.WriteLine($\"Fetched transaction {transaction.Uuid}\");\n}\ncatch (Recurly.Errors.NotFound ex)\n{\n    // If the resource was not found\n    // we may want to alert the user or just return null\n    Console.WriteLine($\"Resource Not Found: {ex.Error.Message}\");\n}\ncatch (Recurly.Errors.ApiError ex)\n{\n    // Use ApiError to catch a generic error from the API\n    Console.WriteLine($\"Unexpected Recurly Error: {ex.Error.Message}\");\n}\n"
          },
          {
            "lang": "Ruby",
            "source": "begin\n  transaction = @client.get_transaction(transaction_id: transaction_id)\n  puts \"Got Transaction #{transaction}\"\nrescue Recurly::Errors::NotFoundError\n  # If the resource was not found, you may want to alert the user or\n  # just return nil\n  puts \"Resource Not Found\"\nend\n"
          },
          {
            "lang": "Java",
            "source": "try {\n    Transaction transaction = client.getTransaction(transactionId);\n    System.out.println(\"Fetched transaction \" + transaction.getUuid());\n} catch (NotFoundException e) {\n    // If the resource was not found\n    // we may want to alert the user or just return null\n    System.out.println(\"Resource Not Found: \" + e.getError().getMessage());\n} catch (ApiException e) {\n    // Use ApiException to catch a generic error from the API\n    System.out.println(\"Unexpected Recurly Error: \" + e.getError().getMessage());\n}\n"
          },
          {
            "lang": "PHP",
            "source": "try {\n    $transaction = $client->getTransaction($transaction_id);\n\n    echo 'Got Transaction:' . PHP_EOL;\n    var_dump($transaction);\n} catch (\\Recurly\\Errors\\NotFound $e) {\n    // Could not find the resource, you may want to inform the user\n    // or just return a NULL\n    echo 'Could not find resource.' . PHP_EOL;\n    var_dump($e);\n} catch (\\Recurly\\RecurlyError $e) {\n    // Something bad happened... tell the user so that they can fix it?\n    echo 'Some unexpected Recurly error happened. Try again later.' . PHP_EOL;\n}\n"
          },
          {
            "lang": "Go",
            "source": "transaction, err := client.GetTransaction(transactionID)\nif e, ok := err.(*recurly.Error); ok {\n\tif e.Type == recurly.ErrorTypeNotFound {\n\t\tfmt.Printf(\"Resource not found: %v\", e)\n\t\treturn nil, err\n\t}\n\tfmt.Printf(\"Unexpected Recurly error: %v\", e)\n\treturn nil, err\n}\nfmt.Printf(\"Fetched Transaction: %v\", transaction.Id)"
          }
        ]
      }
    },
    "/sites/{site_id}/unique_coupon_codes/{unique_coupon_code_id}": {
      "get": {
        "tags": [
          "unique_coupon_code"
        ],
        "summary": "Fetch a unique coupon code",
        "operationId": "get_unique_coupon_code",
        "parameters": [
          {
            "name": "site_id",
            "in": "path",
            "description": "Site ID or subdomain. For ID no prefix is used e.g. `e28zov4fw0v2`. For subdomain use prefix `subdomain-`, e.g. `subdomain-recurly`.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "unique_coupon_code_id",
            "in": "path",
            "description": "Unique Coupon Code ID or code. For ID no prefix is used e.g. `e28zov4fw0v2`. For code use prefix `code-`, e.g. `code-abc-8dh2-def`.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A unique coupon code.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UniqueCouponCode"
                }
              }
            }
          },
          "400": {
            "description": "Bad request; perhaps missing or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-code-samples": []
      },
      "delete": {
        "tags": [
          "unique_coupon_code"
        ],
        "summary": "Deactivate a unique coupon code",
        "description": "Expire a unique code, making that specific code no longer redeemable. The parent bulk coupon will not be affected.",
        "operationId": "deactivate_unique_coupon_code",
        "parameters": [
          {
            "name": "site_id",
            "in": "path",
            "description": "Site ID or subdomain. For ID no prefix is used e.g. `e28zov4fw0v2`. For subdomain use prefix `subdomain-`, e.g. `subdomain-recurly`.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "unique_coupon_code_id",
            "in": "path",
            "description": "Unique Coupon Code ID or code. For ID no prefix is used e.g. `e28zov4fw0v2`. For code use prefix `code-`, e.g. `code-abc-8dh2-def`.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A unique coupon code.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UniqueCouponCode"
                }
              }
            }
          },
          "400": {
            "description": "Bad request; perhaps missing or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "422": {
            "description": "Unique coupon code cannot be deactivated for the provided reason.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-code-samples": []
      }
    },
    "/sites/{site_id}/unique_coupon_codes/{unique_coupon_code_id}/restore": {
      "put": {
        "tags": [
          "unique_coupon_code"
        ],
        "summary": "Restore a unique coupon code",
        "operationId": "reactivate_unique_coupon_code",
        "parameters": [
          {
            "name": "site_id",
            "in": "path",
            "description": "Site ID or subdomain. For ID no prefix is used e.g. `e28zov4fw0v2`. For subdomain use prefix `subdomain-`, e.g. `subdomain-recurly`.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "unique_coupon_code_id",
            "in": "path",
            "description": "Unique Coupon Code ID or code. For ID no prefix is used e.g. `e28zov4fw0v2`. For code use prefix `code-`, e.g. `code-abc-8dh2-def`.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A unique coupon code.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UniqueCouponCode"
                }
              }
            }
          },
          "400": {
            "description": "Bad request; perhaps missing or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "422": {
            "description": "Unique coupon code cannot be restored for the provided reason.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-code-samples": []
      }
    },
    "/sites/{site_id}/purchases": {
      "post": {
        "tags": [
          "purchase"
        ],
        "summary": "Create a new purchase",
        "description": "A purchase is a checkout containing at least one or more subscriptions or one-time charges (line items) and supports both coupon and gift card redemptions. All items purchased will be on one invoice and paid for with one transaction.",
        "operationId": "create_purchase",
        "parameters": [
          {
            "name": "site_id",
            "in": "path",
            "description": "Site ID or subdomain. For ID no prefix is used e.g. `e28zov4fw0v2`. For subdomain use prefix `subdomain-`, e.g. `subdomain-recurly`.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PurchaseCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Returns the new invoices",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvoiceCollection"
                }
              }
            }
          },
          "400": {
            "description": "Bad request; perhaps missing or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "422": {
            "description": "Purchase cannot be completed for the specified reason.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "Node.js",
            "source": "try {\n  let purchaseReq = {\n    currency: 'USD',\n    account: {\n      code: accountCode,\n      firstName: 'Benjamin',\n      lastName: 'Du Monde',\n      billingInfo: {\n        tokenId: rjsTokenId\n      }\n    },\n    subscriptions: [\n      { planCode: planCode },\n    ]\n  }\n  let invoiceCollection = await client.createPurchase(purchaseReq)\n  console.log('Created Charge Invoice: ', invoiceCollection.chargeInvoice)\n  console.log('Created Credit Invoices: ', invoiceCollection.creditInvoices)\n} catch (err) {\n  if (err instanceof recurly.errors.ValidationError) {\n    // If the request was not valid, you may want to tell your user\n    // why. You can find the invalid params and reasons in err.params\n    console.log('Failed validation', err.params)\n  } else {\n    // If we don't know what to do with the err, we should\n    // probably re-raise and let our web framework and logger handle it\n    console.log('Unknown Error: ', err)\n  }\n}\n"
          },
          {
            "lang": "Python",
            "source": "try:\n    purchase = {\n        \"currency\": \"USD\",\n        \"account\": {\n            \"code\": account_code,\n            \"first_name\": \"Benjamin\",\n            \"last_name\": \"Du Monde\",\n            \"billing_info\": {\"token_id\": rjs_token_id},\n        },\n        \"subscriptions\": [{\"plan_code\": plan_code}],\n    }\n    invoice_collection = client.create_purchase(purchase)\n    print(\"Created Charge Invoice %s\" % invoice_collection.charge_invoice)\n    print(\"Created Credit Invoices %s\" % invoice_collection.credit_invoices)\nexcept recurly.errors.ValidationError as e:\n    # If the request was invalid, you may want to tell your user\n    # why. You can find the invalid params and reasons in e.error.params\n    print(\"ValidationError: %s\" % e.error.message)\n    print(e.error.params)\n"
          },
          {
            "lang": ".NET",
            "source": "try\n{\n    var purchaseReq = new PurchaseCreate()\n    {\n        Currency = \"USD\",\n        Account = new AccountPurchase()\n        {\n            Code = accountCode,\n            FirstName = \"Benjamin\",\n            LastName = \"Du Monde\",\n            BillingInfo = new BillingInfoCreate()\n            {\n                TokenId = rjsTokenId\n            }\n        },\n        Subscriptions = new List<SubscriptionPurchase>()\n        {\n            new SubscriptionPurchase() { PlanCode = planCode }\n        }\n    };\n    InvoiceCollection collection = client.CreatePurchase(purchaseReq);\n    Console.WriteLine($\"Created ChargeInvoice with Number: {collection.ChargeInvoice.Number}\");\n}\ncatch (Recurly.Errors.Validation ex)\n{\n    // If the request was not valid, you may want to tell your user\n    // why. You can find the invalid params and reasons in ex.Error.Params\n    Console.WriteLine($\"Failed validation: {ex.Error.Message}\");\n}\ncatch (Recurly.Errors.ApiError ex)\n{\n    // Use ApiError to catch a generic error from the API\n    Console.WriteLine($\"Unexpected Recurly Error: {ex.Error.Message}\");\n}\n"
          },
          {
            "lang": "Ruby",
            "source": "begin\n  purchase = {\n    currency: \"USD\",\n    account: {\n      code: account_code,\n      first_name: \"Benjamin\",\n      last_name: \"Du Monde\",\n      billing_info: {\n        token_id: rjs_token_id\n      },\n    },\n    subscriptions: [\n      { plan_code: plan_code }\n    ]\n  }\n  invoice_collection = @client.create_purchase(\n    body: purchase\n  )\n  puts \"Created Charge Invoice #{invoice_collection.charge_invoice}\"\n  puts \"Created Credit Invoices #{invoice_collection.credit_invoices}\"\nrescue Recurly::Errors::ValidationError => e\n  # If the request was invalid, you may want to tell your user\n  # why. You can find the invalid params and reasons in e.recurly_error.params\n  puts \"ValidationError: #{e.recurly_error.params}\"\nend\n"
          },
          {
            "lang": "Java",
            "source": "try {\n\n    AccountPurchase account = new AccountPurchase();\n    account.setCode(accountCode);\n    account.setFirstName(\"Benjamin\");\n    account.setLastName(\"DuMonde\");\n\n    BillingInfoCreate billing = new BillingInfoCreate();\n    billing.setTokenId(rjsTokenId);\n    account.setBillingInfo(billing);\n\n    List<SubscriptionPurchase> subscriptions = new ArrayList<SubscriptionPurchase>();\n    SubscriptionPurchase sub = new SubscriptionPurchase();\n    sub.setPlanCode(planCode);\n    subscriptions.add(sub);\n\n    PurchaseCreate purchase = new PurchaseCreate();\n    purchase.setCurrency(\"USD\");\n    purchase.setAccount(account);\n    purchase.setSubscriptions(subscriptions);\n\n    InvoiceCollection collection = client.createPurchase(purchase);\n    System.out.println(\"Created ChargeInvoice with Id: \" + collection.getChargeInvoice().getId());\n} catch (ValidationException e) {\n    // If the request was not valid, you may want to tell your user\n    // why. You can find the invalid params and reasons in e.getError().getParams()\n    System.out.println(\"Failed validation: \" + e.getError().getMessage());\n    System.out.println(\"Params: \" + e.getError().getParams());\n} catch (ApiException e) {\n    // Use ApiException to catch a generic error from the API\n    System.out.println(\"Unexpected Recurly Error: \" + e.getError().getMessage());\n}\n"
          },
          {
            "lang": "PHP",
            "source": "try {\n    $purchase_create = array(\n        \"currency\" => \"USD\",\n        \"account\" => array(\n            \"code\" => $account_code,\n            \"first_name\" => \"Douglas\",\n            \"last_name\" => \"Du Monde\",\n            \"billing_info\" => array(\n                \"token_id\" => $rjs_token_id\n            ),\n        ),\n        \"subscriptions\" => [\n            array(\n                \"plan_code\" => $plan_code\n            )\n        ]\n    );\n    $invoice_collection = $client->createPurchase($purchase_create);\n    echo 'Created Invoices:' . PHP_EOL;\n    var_dump($invoice_collection);\n} catch (\\Recurly\\Errors\\Validation $e) {\n    // If the request was not valid, you may want to tell your user\n    // why. You can find the invalid params and reasons in err.params\n    var_dump($e);\n} catch (\\Recurly\\RecurlyError $e) {\n    // If we don't know what to do with the err, we should\n    // probably re-raise and let our web framework and logger handle it\n    var_dump($e);\n}\n"
          },
          {
            "lang": "Go",
            "source": "purchaseReq := &recurly.PurchaseCreate{\n\tCurrency: recurly.String(\"USD\"),\n\tAccount: &recurly.AccountPurchase{\n\t\tCode: recurly.String(accountCode),\n\t},\n\tSubscriptions: []recurly.SubscriptionPurchase{\n\t\t{\n\t\t\tPlanCode:     recurly.String(planCode),\n\t\t\tNextBillDate: recurly.Time(time.Date(2078, time.November, 10, 23, 0, 0, 0, time.UTC)),\n\t\t},\n\t},\n\tShipping: &recurly.ShippingPurchase{\n\t\tAddressId: recurly.String(shippingAddressID),\n\t},\n}\n\ncollection, err := client.CreatePurchase(purchaseReq)\nif e, ok := err.(*recurly.Error); ok {\n\tif e.Type == recurly.ErrorTypeValidation {\n\t\tfmt.Printf(\"Failed validation: %v\", e)\n\t\treturn nil, err\n\t}\n\tfmt.Printf(\"Unexpected Recurly error: %v\", e)\n\treturn nil, err\n}\nfmt.Printf(\"Created Purchase: %s\", collection.ChargeInvoice.Number)"
          }
        ]
      }
    },
    "/sites/{site_id}/purchases/preview": {
      "post": {
        "tags": [
          "purchase"
        ],
        "summary": "Preview a new purchase",
        "description": "A purchase is a checkout containing at least one or more subscriptions or one-time charges (line items) and supports both coupon and gift card redemptions. All items purchased will be on one invoice and paid for with one transaction.",
        "operationId": "preview_purchase",
        "parameters": [
          {
            "name": "site_id",
            "in": "path",
            "description": "Site ID or subdomain. For ID no prefix is used e.g. `e28zov4fw0v2`. For subdomain use prefix `subdomain-`, e.g. `subdomain-recurly`.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PurchaseCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Returns preview of the new invoices",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvoiceCollection"
                }
              }
            }
          },
          "400": {
            "description": "Bad request; perhaps missing or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "422": {
            "description": "Purchase cannot be previewed for the specified reason.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "Node.js",
            "source": "try {\n  let purchaseReq = {\n    currency: 'USD',\n    account: {\n      firstName: 'Benjamin',\n      lastName: 'Du Monde',\n      code: accountCode,\n      billingInfo: {\n        tokenId: rjsTokenId\n      }\n    },\n    subscriptions: [\n      { planCode: planCode },\n    ]\n  }\n  let invoiceCollection = await client.previewPurchase(purchaseReq)\n  console.log('Preview Charge Invoice: ', invoiceCollection.chargeInvoice)\n  console.log('Preview Credit Invoices: ', invoiceCollection.creditInvoices)\n} catch (err) {\n  if (err instanceof recurly.errors.ValidationError) {\n    // If the request was not valid, you may want to tell your user\n    // why. You can find the invalid params and reasons in err.params\n    console.log('Failed validation', err.params)\n  } else {\n    // If we don't know what to do with the err, we should\n    // probably re-raise and let our web framework and logger handle it\n    console.log('Unknown Error: ', err)\n  }\n}\n"
          },
          {
            "lang": "Python",
            "source": "try:\n    purchase = {\n        \"currency\": \"USD\",\n        \"account\": {\n            \"code\": account_code,\n            \"first_name\": \"Benjamin\",\n            \"last_name\": \"Du Monde\",\n            \"billing_info\": {\"token_id\": rjs_token_id},\n        },\n        \"subscriptions\": [{\"plan_code\": plan_code}],\n    }\n    invoice_collection = client.preview_purchase(purchase)\n    print(\"Preview Charge Invoice %s\" % invoice_collection.charge_invoice)\n    print(\"Preview Credit Invoices %s\" % invoice_collection.credit_invoices)\nexcept recurly.errors.ValidationError as e:\n    # If the request was invalid, you may want to tell your user\n    # why. You can find the invalid params and reasons in e.error.params\n    print(\"ValidationError: %s\" % e.error.message)\n    print(e.error.params)\n"
          },
          {
            "lang": ".NET",
            "source": "try\n{\n    var purchaseReq = new PurchaseCreate()\n    {\n        Currency = \"USD\",\n        Account = new AccountPurchase()\n        {\n            Code = accountCode,\n            FirstName = \"Benjamin\",\n            LastName = \"Du Monde\",\n            BillingInfo = new BillingInfoCreate()\n            {\n                TokenId = rjsTokenId\n            }\n        },\n        Subscriptions = new List<SubscriptionPurchase>()\n        {\n            new SubscriptionPurchase() { PlanCode = planCode }\n        }\n    };\n    InvoiceCollection collection = client.PreviewPurchase(purchaseReq);\n    Console.WriteLine($\"Preview ChargeInvoice with Total: {collection.ChargeInvoice.Total}\");\n}\ncatch (Recurly.Errors.Validation ex)\n{\n    // If the request was not valid, you may want to tell your user\n    // why. You can find the invalid params and reasons in ex.Error.Params\n    Console.WriteLine($\"Failed validation: {ex.Error.Message}\");\n}\ncatch (Recurly.Errors.ApiError ex)\n{\n    // Use ApiError to catch a generic error from the API\n    Console.WriteLine($\"Unexpected Recurly Error: {ex.Error.Message}\");\n}\n"
          },
          {
            "lang": "Ruby",
            "source": "begin\n  purchase = {\n    currency: \"USD\",\n    account: {\n      code: account_code,\n      first_name: \"Benjamin\",\n      last_name: \"Du Monde\",\n      billing_info: {\n        token_id: rjs_token_id\n      },\n    },\n    subscriptions: [\n      { plan_code: plan_code }\n    ]\n  }\n  invoice_collection = @client.preview_purchase(\n    body: purchase\n  )\n  puts \"Preview Charge Invoice #{invoice_collection.charge_invoice}\"\n  puts \"Preview Credit Invoices #{invoice_collection.credit_invoices}\"\nrescue Recurly::Errors::ValidationError => e\n  # If the request was invalid, you may want to tell your user\n  # why. You can find the invalid params and reasons in e.recurly_error.params\n  puts \"ValidationError: #{e.recurly_error.params}\"\nend\n"
          },
          {
            "lang": "Java",
            "source": "try {\n\n    AccountPurchase account = new AccountPurchase();\n    account.setCode(accountCode);\n    account.setFirstName(\"Joanna\");\n    account.setLastName(\"DuMonde\");\n\n    BillingInfoCreate billing = new BillingInfoCreate();\n    billing.setTokenId(rjsTokenId);\n    account.setBillingInfo(billing);\n\n    List<SubscriptionPurchase> subscriptions = new ArrayList<SubscriptionPurchase>();\n    SubscriptionPurchase sub = new SubscriptionPurchase();\n    sub.setPlanCode(planCode);\n    subscriptions.add(sub);\n\n    PurchaseCreate purchase = new PurchaseCreate();\n    purchase.setCurrency(\"USD\");\n    purchase.setAccount(account);\n    purchase.setSubscriptions(subscriptions);\n\n    InvoiceCollection collection = client.previewPurchase(purchase);\n    System.out.println(\"Preview Charge Invoice:\" + collection.getChargeInvoice());\n    System.out.println(\"Preview Credit Invoices: \" + collection.getCreditInvoices());\n\n} catch (ValidationException e) {\n    // If the request was not valid, you may want to tell your user\n    // why. You can find the invalid params and reasons in e.getError().getParams()\n    System.out.println(\"Failed validation: \" + e.getError().getMessage());\n    System.out.println(\"Params: \" + e.getError().getParams());\n} catch (ApiException e) {\n    // Use ApiException to catch a generic error from the API\n    System.out.println(\"Unexpected Recurly Error: \" + e.getError().getMessage());\n}\n"
          },
          {
            "lang": "PHP",
            "source": "try {\n    $purchase_preview = array(\n        \"currency\" => \"USD\",\n        \"account\" => array(\n            \"code\" => $account_code,\n            \"first_name\" => \"Douglas\",\n            \"last_name\" => \"Du Monde\",\n            \"billing_info\" => array(\n                \"token_id\" => $rjs_token_id\n            ),\n        ),\n        \"subscriptions\" => [\n            array(\n                \"plan_code\" => $plan_code\n            )\n        ]\n    );\n    $invoice_collection = $client->previewPurchase($purchase_preview);\n    echo 'Preview Invoices:' . PHP_EOL;\n    var_dump($invoice_collection);\n} catch (\\Recurly\\Errors\\Validation $e) {\n    // If the request was not valid, you may want to tell your user\n    // why. You can find the invalid params and reasons in err.params\n    var_dump($e);\n} catch (\\Recurly\\RecurlyError $e) {\n    // If we don't know what to do with the err, we should\n    // probably re-raise and let our web framework and logger handle it\n    var_dump($e);\n}\n"
          },
          {
            "lang": "Go",
            "source": "collection, err := client.PreviewPurchase(purchaseReq)\nif e, ok := err.(*recurly.Error); ok {\n\tif e.Type == recurly.ErrorTypeValidation {\n\t\tfmt.Printf(\"Failed validation: %v\", e)\n\t\treturn nil, err\n\t}\n\tfmt.Printf(\"Unexpected Recurly error: %v\", e)\n\treturn nil, err\n}\nfmt.Printf(\"Preview Charge Invoice %v\", collection.ChargeInvoice)"
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "Empty": {
        "type": "object",
        "properties": {}
      },
      "BinaryFile": {
        "type": "string",
        "format": "binary",
        "readOnly": true
      },
      "AccountAcquisitionList": {
        "type": "object",
        "properties": {
          "object": {
            "title": "Object type",
            "type": "string",
            "description": "Will always be List."
          },
          "has_more": {
            "type": "boolean",
            "description": "Indicates there are more results on subsequent pages."
          },
          "next": {
            "type": "string",
            "description": "Path to subsequent page of results."
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AccountAcquisition"
            }
          }
        }
      },
      "AccountList": {
        "type": "object",
        "properties": {
          "object": {
            "title": "Object type",
            "type": "string",
            "description": "Will always be List."
          },
          "has_more": {
            "type": "boolean",
            "description": "Indicates there are more results on subsequent pages."
          },
          "next": {
            "type": "string",
            "description": "Path to subsequent page of results."
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Account"
            }
          }
        }
      },
      "AccountNoteList": {
        "type": "object",
        "properties": {
          "object": {
            "title": "Object type",
            "type": "string",
            "description": "Will always be List."
          },
          "has_more": {
            "type": "boolean",
            "description": "Indicates there are more results on subsequent pages."
          },
          "next": {
            "type": "string",
            "description": "Path to subsequent page of results."
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AccountNote"
            }
          }
        }
      },
      "AddOnList": {
        "type": "object",
        "properties": {
          "object": {
            "title": "Object type",
            "type": "string",
            "description": "Will always be List."
          },
          "has_more": {
            "type": "boolean",
            "description": "Indicates there are more results on subsequent pages."
          },
          "next": {
            "type": "string",
            "description": "Path to subsequent page of results."
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AddOn"
            }
          }
        }
      },
      "CreditPaymentList": {
        "type": "object",
        "properties": {
          "object": {
            "title": "Object type",
            "type": "string",
            "description": "Will always be List."
          },
          "has_more": {
            "type": "boolean",
            "description": "Indicates there are more results on subsequent pages."
          },
          "next": {
            "type": "string",
            "description": "Path to subsequent page of results."
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreditPayment"
            }
          }
        }
      },
      "CouponList": {
        "type": "object",
        "properties": {
          "object": {
            "title": "Object type",
            "type": "string",
            "description": "Will always be List."
          },
          "has_more": {
            "type": "boolean",
            "description": "Indicates there are more results on subsequent pages."
          },
          "next": {
            "type": "string",
            "description": "Path to subsequent page of results."
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Coupon"
            }
          }
        }
      },
      "CouponRedemptionList": {
        "type": "object",
        "properties": {
          "object": {
            "title": "Object type",
            "type": "string",
            "description": "Will always be List."
          },
          "has_more": {
            "type": "boolean",
            "description": "Indicates there are more results on subsequent pages."
          },
          "next": {
            "type": "string",
            "description": "Path to subsequent page of results."
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CouponRedemption"
            }
          }
        }
      },
      "CustomFieldDefinitionList": {
        "type": "object",
        "properties": {
          "object": {
            "title": "Object type",
            "type": "string",
            "description": "Will always be List."
          },
          "has_more": {
            "type": "boolean",
            "description": "Indicates there are more results on subsequent pages."
          },
          "next": {
            "type": "string",
            "description": "Path to subsequent page of results."
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomFieldDefinition"
            }
          }
        }
      },
      "ItemList": {
        "type": "object",
        "properties": {
          "object": {
            "title": "Object type",
            "type": "string",
            "description": "Will always be List."
          },
          "has_more": {
            "type": "boolean",
            "description": "Indicates there are more results on subsequent pages."
          },
          "next": {
            "type": "string",
            "description": "Path to subsequent page of results."
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Item"
            }
          }
        }
      },
      "InvoiceList": {
        "type": "object",
        "properties": {
          "object": {
            "title": "Object type",
            "type": "string",
            "description": "Will always be List."
          },
          "has_more": {
            "type": "boolean",
            "description": "Indicates there are more results on subsequent pages."
          },
          "next": {
            "type": "string",
            "description": "Path to subsequent page of results."
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Invoice"
            }
          }
        }
      },
      "LineItemList": {
        "type": "object",
        "properties": {
          "object": {
            "title": "Object type",
            "type": "string",
            "description": "Will always be List."
          },
          "has_more": {
            "type": "boolean",
            "description": "Indicates there are more results on subsequent pages."
          },
          "next": {
            "type": "string",
            "description": "Path to subsequent page of results."
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LineItem"
            }
          }
        }
      },
      "PlanList": {
        "type": "object",
        "properties": {
          "object": {
            "title": "Object type",
            "type": "string",
            "description": "Will always be List."
          },
          "has_more": {
            "type": "boolean",
            "description": "Indicates there are more results on subsequent pages."
          },
          "next": {
            "type": "string",
            "description": "Path to subsequent page of results."
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Plan"
            }
          }
        }
      },
      "SiteList": {
        "type": "object",
        "properties": {
          "object": {
            "title": "Object type",
            "type": "string",
            "description": "Will always be List."
          },
          "has_more": {
            "type": "boolean",
            "description": "Indicates there are more results on subsequent pages."
          },
          "next": {
            "type": "string",
            "description": "Path to subsequent page of results."
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Site"
            }
          }
        }
      },
      "ShippingMethodList": {
        "type": "object",
        "properties": {
          "object": {
            "title": "Object type",
            "type": "string",
            "description": "Will always be List."
          },
          "has_more": {
            "type": "boolean",
            "description": "Indicates there are more results on subsequent pages."
          },
          "next": {
            "type": "string",
            "description": "Path to subsequent page of results."
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ShippingMethod"
            }
          }
        }
      },
      "SubscriptionList": {
        "type": "object",
        "properties": {
          "object": {
            "title": "Object type",
            "type": "string",
            "description": "Will always be List."
          },
          "has_more": {
            "type": "boolean",
            "description": "Indicates there are more results on subsequent pages."
          },
          "next": {
            "type": "string",
            "description": "Path to subsequent page of results."
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Subscription"
            }
          }
        }
      },
      "TransactionList": {
        "type": "object",
        "properties": {
          "object": {
            "title": "Object type",
            "type": "string",
            "description": "Will always be List."
          },
          "has_more": {
            "type": "boolean",
            "description": "Indicates there are more results on subsequent pages."
          },
          "next": {
            "type": "string",
            "description": "Path to subsequent page of results."
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Transaction"
            }
          }
        }
      },
      "Account": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AccountReadOnly"
          },
          {
            "$ref": "#/components/schemas/AccountResponse"
          }
        ]
      },
      "AccountAcquisition": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AccountAcquisitionUpdatable"
          },
          {
            "$ref": "#/components/schemas/AccountAcquisitionReadOnly"
          }
        ]
      },
      "AccountAcquisitionUpdatable": {
        "type": "object",
        "properties": {
          "cost": {
            "title": "Account balance",
            "type": "array",
            "properties": {
              "currency": {
                "title": "Currency",
                "maxLength": 3,
                "type": "string",
                "description": "3-letter ISO 4217 currency code."
              },
              "amount": {
                "title": "Amount",
                "type": "number",
                "description": "The amount of the corresponding currency used to acquire the account.",
                "format": "float"
              }
            },
            "items": {
              "type": "object"
            },
            "x-class-name": "AccountAcquisitionCost"
          },
          "channel": {
            "type": "string",
            "description": "The channel through which the account was acquired.",
            "enum": [
              "referral",
              "social_media",
              "email",
              "paid_search",
              "organic_search",
              "direct_traffic",
              "marketing_content",
              "blog",
              "events",
              "outbound_sales",
              "advertising",
              "public_relations",
              "other"
            ]
          },
          "subchannel": {
            "type": "string",
            "description": "An arbitrary subchannel string representing a distinction/subcategory within a broader channel."
          },
          "campaign": {
            "type": "string",
            "description": "An arbitrary identifier for the marketing campaign that led to the acquisition of this account."
          }
        }
      },
      "AccountAcquisitionReadOnly": {
        "type": "object",
        "properties": {
          "id": {
            "maxLength": 13,
            "type": "string",
            "readOnly": true
          },
          "object": {
            "title": "Object type",
            "type": "string",
            "readOnly": true
          },
          "account": {
            "$ref": "#/components/schemas/AccountMini"
          },
          "created_at": {
            "type": "string",
            "description": "When the account acquisition data was created.",
            "format": "date-time",
            "readOnly": true
          },
          "updated_at": {
            "type": "string",
            "description": "When the account acquisition data was last changed.",
            "format": "date-time",
            "readOnly": true
          }
        }
      },
      "AccountReadOnly": {
        "type": "object",
        "properties": {
          "id": {
            "maxLength": 13,
            "type": "string",
            "readOnly": true
          },
          "object": {
            "title": "Object type",
            "type": "string",
            "readOnly": true
          },
          "state": {
            "type": "string",
            "description": "Accounts can be either active or inactive.",
            "readOnly": true,
            "enum": [
              "active",
              "inactive"
            ]
          },
          "hosted_login_token": {
            "maxLength": 32,
            "type": "string",
            "description": "The unique token for automatically logging the account in to the hosted management pages. You may automatically log the user into their hosted management pages by directing the user to: `https://{subdomain}.recurly.com/account/{hosted_login_token}`.",
            "readOnly": true
          },
          "shipping_addresses": {
            "type": "array",
            "description": "The shipping addresses on the account.",
            "items": {
              "$ref": "#/components/schemas/ShippingAddress"
            }
          },
          "has_live_subscription": {
            "type": "boolean",
            "description": "Indicates if the account has a subscription that is either active, canceled, future, or paused."
          },
          "has_active_subscription": {
            "type": "boolean",
            "description": "Indicates if the account has an active subscription."
          },
          "has_future_subscription": {
            "type": "boolean",
            "description": "Indicates if the account has a future subscription."
          },
          "has_canceled_subscription": {
            "type": "boolean",
            "description": "Indicates if the account has a canceled subscription."
          },
          "has_paused_subscription": {
            "type": "boolean",
            "description": "Indicates if the account has a paused subscription."
          },
          "has_past_due_invoice": {
            "type": "boolean",
            "description": "Indicates if the account has a past due invoice."
          },
          "created_at": {
            "type": "string",
            "description": "When the account was created.",
            "format": "date-time",
            "readOnly": true
          },
          "updated_at": {
            "type": "string",
            "description": "When the account was last changed.",
            "format": "date-time",
            "readOnly": true
          },
          "deleted_at": {
            "type": "string",
            "description": "If present, when the account was last marked inactive.",
            "format": "date-time",
            "readOnly": true
          }
        }
      },
      "AccountCreate": {
        "allOf": [
          {
            "required": [
              "code"
            ],
            "type": "object",
            "properties": {
              "code": {
                "maxLength": 50,
                "type": "string",
                "description": "The unique identifier of the account. This cannot be changed once the account is created."
              },
              "acquisition": {
                "$ref": "#/components/schemas/AccountAcquisitionUpdatable"
              },
              "shipping_addresses": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ShippingAddressCreate"
                }
              }
            }
          },
          {
            "$ref": "#/components/schemas/AccountUpdate"
          }
        ]
      },
      "AccountPurchase": {
        "allOf": [
          {
            "required": [
              "code"
            ],
            "type": "object",
            "properties": {
              "id": {
                "maxLength": 13,
                "type": "string",
                "description": "Optional, but if present allows an existing account to be used and updated as part of the purchase."
              },
              "code": {
                "maxLength": 50,
                "type": "string",
                "description": "The unique identifier of the account. This cannot be changed once the account is created."
              },
              "acquisition": {
                "$ref": "#/components/schemas/AccountAcquisitionUpdatable"
              }
            }
          },
          {
            "$ref": "#/components/schemas/AccountUpdate"
          }
        ]
      },
      "AccountUpdate": {
        "type": "object",
        "properties": {
          "username": {
            "maxLength": 255,
            "type": "string",
            "description": "A secondary value for the account."
          },
          "email": {
            "maxLength": 255,
            "type": "string",
            "description": "The email address used for communicating with this customer. The customer will also use this email address to log into your hosted account management pages. This value does not need to be unique.",
            "format": "email"
          },
          "preferred_locale": {
            "type": "string",
            "description": "Used to determine the language and locale of emails sent on behalf of the merchant to the customer. The list of locales is restricted to those the merchant has enabled on the site.",
            "enum": [
              "da-DK",
              "de-CH",
              "de-DE",
              "en-AU",
              "en-CA",
              "en-GB",
              "en-NZ",
              "en-US",
              "es-ES",
              "es-MX",
              "es-US",
              "fr-CA",
              "fr-FR",
              "hi-IN",
              "ja-JP",
              "nl-BE",
              "nl-NL",
              "pt-BR",
              "pt-PT",
              "ru-RU",
              "tr-TR",
              "zh-CN"
            ]
          },
          "cc_emails": {
            "maxLength": 255,
            "type": "string",
            "description": "Additional email address that should receive account correspondence. These should be separated only by commas. These CC emails will receive all emails that the `email` field also receives."
          },
          "first_name": {
            "maxLength": 255,
            "type": "string"
          },
          "last_name": {
            "maxLength": 255,
            "type": "string"
          },
          "company": {
            "maxLength": 50,
            "type": "string"
          },
          "vat_number": {
            "maxLength": 20,
            "type": "string",
            "description": "The VAT number of the account (to avoid having the VAT applied). This is only used for manually collected invoices."
          },
          "tax_exempt": {
            "type": "boolean",
            "description": "The tax status of the account. `true` exempts tax on the account, `false` applies tax on the account."
          },
          "exemption_certificate": {
            "maxLength": 30,
            "type": "string",
            "description": "The tax exemption certificate number for the account. If the merchant has an integration for the Vertex tax provider, this optional value will be sent in any tax calculation requests for the account."
          },
          "parent_account_code": {
            "maxLength": 50,
            "type": "string",
            "description": "The account code of the parent account to be associated with this account. Passing an empty value removes any existing parent association from this account. If both `parent_account_code` and `parent_account_id` are passed, the non-blank value in `parent_account_id` will be used. Only one level of parent child relationship is allowed. You cannot assign a parent account that itself has a parent account."
          },
          "parent_account_id": {
            "maxLength": 13,
            "type": "string",
            "description": "The UUID of the parent account to be associated with this account. Passing an empty value removes any existing parent association from this account. If both `parent_account_code` and `parent_account_id` are passed, the non-blank value in `parent_account_id` will be used. Only one level of parent child relationship is allowed. You cannot assign a parent account that itself has a parent account."
          },
          "bill_to": {
            "maxLength": 6,
            "type": "string",
            "description": "An enumerable describing the billing behavior of the account, specifically whether the account is self-paying or will rely on the parent account to pay.",
            "enum": [
              "self",
              "parent"
            ]
          },
          "transaction_type": {
            "type": "string",
            "description": "An optional type designation for the payment gateway transaction created by this request. Supports 'moto' value, which is the acronym for mail order and telephone transactions.",
            "enum": [
              "moto"
            ]
          },
          "address": {
            "$ref": "#/components/schemas/Address"
          },
          "billing_info": {
            "$ref": "#/components/schemas/BillingInfoCreate"
          },
          "custom_fields": {
            "$ref": "#/components/schemas/CustomFields"
          }
        }
      },
      "AccountResponse": {
        "type": "object",
        "properties": {
          "code": {
            "maxLength": 50,
            "type": "string",
            "description": "The unique identifier of the account. This cannot be changed once the account is created.",
            "readOnly": true
          },
          "username": {
            "maxLength": 255,
            "type": "string",
            "description": "A secondary value for the account."
          },
          "email": {
            "maxLength": 255,
            "type": "string",
            "description": "The email address used for communicating with this customer. The customer will also use this email address to log into your hosted account management pages. This value does not need to be unique.",
            "format": "email"
          },
          "preferred_locale": {
            "type": "string",
            "description": "Used to determine the language and locale of emails sent on behalf of the merchant to the customer.",
            "enum": [
              "da-DK",
              "de-CH",
              "de-DE",
              "en-AU",
              "en-CA",
              "en-GB",
              "en-NZ",
              "en-US",
              "es-ES",
              "es-MX",
              "es-US",
              "fr-CA",
              "fr-FR",
              "hi-IN",
              "ja-JP",
              "nl-BE",
              "nl-NL",
              "pt-BR",
              "pt-PT",
              "ru-RU",
              "tr-TR",
              "zh-CN"
            ]
          },
          "cc_emails": {
            "maxLength": 255,
            "type": "string",
            "description": "Additional email address that should receive account correspondence. These should be separated only by commas. These CC emails will receive all emails that the `email` field also receives."
          },
          "first_name": {
            "maxLength": 255,
            "type": "string"
          },
          "last_name": {
            "maxLength": 255,
            "type": "string"
          },
          "company": {
            "maxLength": 50,
            "type": "string"
          },
          "vat_number": {
            "maxLength": 20,
            "type": "string",
            "description": "The VAT number of the account (to avoid having the VAT applied). This is only used for manually collected invoices."
          },
          "tax_exempt": {
            "type": "boolean",
            "description": "The tax status of the account. `true` exempts tax on the account, `false` applies tax on the account."
          },
          "exemption_certificate": {
            "maxLength": 30,
            "type": "string",
            "description": "The tax exemption certificate number for the account. If the merchant has an integration for the Vertex tax provider, this optional value will be sent in any tax calculation requests for the account."
          },
          "parent_account_id": {
            "maxLength": 13,
            "type": "string",
            "description": "The UUID of the parent account associated with this account."
          },
          "bill_to": {
            "maxLength": 6,
            "type": "string",
            "description": "An enumerable describing the billing behavior of the account, specifically whether the account is self-paying or will rely on the parent account to pay.",
            "enum": [
              "self",
              "parent"
            ]
          },
          "address": {
            "$ref": "#/components/schemas/Address"
          },
          "billing_info": {
            "$ref": "#/components/schemas/BillingInfo"
          },
          "custom_fields": {
            "$ref": "#/components/schemas/CustomFields"
          }
        }
      },
      "AccountNote": {
        "required": [
          "message"
        ],
        "type": "object",
        "properties": {
          "id": {
            "maxLength": 13,
            "type": "string",
            "readOnly": true
          },
          "object": {
            "title": "Object type",
            "type": "string",
            "readOnly": true
          },
          "account_id": {
            "type": "string"
          },
          "user": {
            "$ref": "#/components/schemas/User"
          },
          "message": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          }
        }
      },
      "AccountMini": {
        "title": "Account mini details",
        "type": "object",
        "properties": {
          "id": {
            "maxLength": 13,
            "type": "string",
            "readOnly": true
          },
          "object": {
            "title": "Object type",
            "type": "string",
            "readOnly": true
          },
          "code": {
            "maxLength": 50,
            "type": "string",
            "description": "The unique identifier of the account."
          },
          "email": {
            "maxLength": 255,
            "type": "string",
            "description": "The email address used for communicating with this customer.",
            "format": "email"
          },
          "first_name": {
            "maxLength": 255,
            "type": "string"
          },
          "last_name": {
            "maxLength": 255,
            "type": "string"
          },
          "company": {
            "maxLength": 255,
            "type": "string"
          },
          "parent_account_id": {
            "maxLength": 13,
            "type": "string"
          },
          "bill_to": {
            "maxLength": 6,
            "type": "string"
          }
        }
      },
      "AccountBalance": {
        "type": "object",
        "properties": {
          "object": {
            "title": "Object type",
            "type": "string",
            "readOnly": true
          },
          "account": {
            "$ref": "#/components/schemas/AccountMini"
          },
          "past_due": {
            "type": "boolean"
          },
          "balances": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AccountBalanceAmount"
            }
          }
        }
      },
      "AccountBalanceAmount": {
        "title": "Balance Amount",
        "type": "object",
        "properties": {
          "currency": {
            "title": "Currency",
            "maxLength": 3,
            "type": "string",
            "description": "3-letter ISO 4217 currency code."
          },
          "amount": {
            "title": "Amount",
            "type": "number",
            "description": "Total amount the account is past due.",
            "format": "float"
          }
        }
      },
      "InvoiceAddress": {
        "type": "object",
        "properties": {
          "name_on_account": {
            "title": "Name on account",
            "type": "string"
          },
          "company": {
            "title": "Company",
            "type": "string"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/Address"
          }
        ]
      },
      "Address": {
        "type": "object",
        "properties": {
          "first_name": {
            "title": "First name",
            "type": "string"
          },
          "last_name": {
            "title": "Last name",
            "type": "string"
          },
          "phone": {
            "title": "Phone number",
            "type": "string"
          },
          "street1": {
            "title": "Street 1",
            "type": "string"
          },
          "street2": {
            "title": "Street 2",
            "type": "string"
          },
          "city": {
            "title": "City",
            "type": "string"
          },
          "region": {
            "title": "State/Province",
            "type": "string",
            "description": "State or province."
          },
          "postal_code": {
            "title": "Zip/Postal code",
            "type": "string",
            "description": "Zip or postal code."
          },
          "country": {
            "title": "Country",
            "type": "string",
            "description": "Country, 2-letter ISO code."
          }
        }
      },
      "AddOnMini": {
        "title": "Add-on mini details",
        "type": "object",
        "properties": {
          "id": {
            "title": "Add-on ID",
            "maxLength": 13,
            "type": "string",
            "readOnly": true
          },
          "object": {
            "title": "Object type",
            "type": "string",
            "readOnly": true
          },
          "code": {
            "title": "Add-on code",
            "maxLength": 50,
            "type": "string",
            "description": "The unique identifier for the add-on within its plan."
          },
          "name": {
            "title": "Name",
            "maxLength": 255,
            "type": "string",
            "description": "Describes your add-on and will appear in subscribers' invoices."
          },
          "item_id": {
            "title": "Item ID",
            "maxLength": 13,
            "type": "string",
            "readOnly": true
          },
          "external_sku": {
            "title": "External SKU",
            "maxLength": 50,
            "type": "string",
            "description": "Optional, stock keeping unit to link the item to other inventory systems.",
            "readOnly": true
          },
          "accounting_code": {
            "title": "Accounting code",
            "maxLength": 20,
            "pattern": "/^[a-z0-9_+-]+$/",
            "type": "string",
            "description": "Accounting code for invoice line items for this add-on. If no value is provided, it defaults to add-on's code."
          }
        },
        "description": "Just the important parts."
      },
      "AddOn": {
        "title": "Add-on",
        "required": [
          "code",
          "currencies",
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "Add-on ID",
            "maxLength": 13,
            "type": "string",
            "readOnly": true
          },
          "object": {
            "title": "Object type",
            "type": "string",
            "readOnly": true
          },
          "plan_id": {
            "title": "Plan ID",
            "maxLength": 13,
            "type": "string",
            "readOnly": true
          },
          "code": {
            "title": "Add-on code",
            "maxLength": 50,
            "type": "string",
            "description": "The unique identifier for the add-on within its plan."
          },
          "state": {
            "title": "State",
            "type": "string",
            "description": "Add-ons can be either active or inactive.",
            "readOnly": true,
            "enum": [
              "active",
              "inactive"
            ]
          },
          "name": {
            "title": "Name",
            "maxLength": 255,
            "type": "string",
            "description": "Describes your add-on and will appear in subscribers' invoices."
          },
          "accounting_code": {
            "title": "Accounting code",
            "maxLength": 20,
            "pattern": "/^[a-z0-9_+-]+$/",
            "type": "string",
            "description": "Accounting code for invoice line items for this add-on. If no value is provided, it defaults to add-on's code."
          },
          "revenue_schedule_type": {
            "title": "Revenue schedule type",
            "type": "string",
            "description": "When this add-on is invoiced, the line item will use this revenue schedule. If `item_code`/`item_id` is part of the request then `revenue_schedule_type` must be absent in the request as the value will be set from the item.",
            "enum": [
              "never",
              "evenly",
              "at_range_end",
              "at_range_start"
            ]
          },
          "tax_code": {
            "title": "Tax code",
            "maxLength": 50,
            "type": "string",
            "description": "Used by Avalara, Vertex, and Recurlyâ€™s EU VAT tax feature. The tax code values are specific to each tax system. If you are using Recurlyâ€™s EU VAT feature you can use `unknown`, `physical`, or `digital`."
          },
          "display_quantity": {
            "title": "Display quantity?",
            "type": "boolean",
            "description": "Determines if the quantity field is displayed on the hosted pages for the add-on.",
            "default": false
          },
          "default_quantity": {
            "title": "Default quantity",
            "type": "integer",
            "description": "Default quantity for the hosted pages.",
            "default": 1
          },
          "optional": {
            "title": "Optional",
            "type": "boolean",
            "description": "Whether the add-on is optional for the customer to include in their purchase on the hosted payment page. If false, the add-on will be included when a subscription is created through the Recurly UI. However, the add-on will not be included when a subscription is created through the API."
          },
          "currencies": {
            "title": "Add-on pricing",
            "minItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AddOnPricing"
            }
          },
          "item": {
            "$ref": "#/components/schemas/ItemMini"
          },
          "tier_type": {
            "title": "Tier type",
            "type": "string",
            "description": "The type of tiering used by the Add-on.",
            "default": "flat",
            "enum": [
              "flat",
              "tiered",
              "stairstep",
              "volume"
            ]
          },
          "tiers": {
            "title": "Tiers",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Tier"
            }
          },
          "external_sku": {
            "title": "External SKU",
            "maxLength": 50,
            "type": "string",
            "description": "Optional, stock keeping unit to link the item to other inventory systems.",
            "readOnly": true
          },
          "created_at": {
            "title": "Created at",
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "updated_at": {
            "title": "Last updated at",
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "deleted_at": {
            "title": "Deleted at",
            "type": "string",
            "format": "date-time",
            "readOnly": true
          }
        },
        "description": "Full add-on details."
      },
      "AddOnCreate": {
        "title": "Add-on",
        "required": [
          "code",
          "currencies",
          "name"
        ],
        "type": "object",
        "properties": {
          "item_code": {
            "title": "Item Code",
            "maxLength": 50,
            "pattern": "/^[a-z0-9_+-]+$/",
            "type": "string",
            "description": "Unique code to identify an item. Avaliable when the `Credit Invoices` and `Subscription Billing Terms` features are enabled. If `item_id` and `item_code` are both present, `item_id` will be used."
          },
          "item_id": {
            "title": "Item ID",
            "maxLength": 13,
            "type": "string",
            "description": "System-generated unique identifier for an item. Available when the `Credit Invoices` and `Subscription Billing Terms` features are enabled. If `item_id` and `item_code` are both present, `item_id` will be used."
          },
          "code": {
            "title": "Add-on code",
            "maxLength": 50,
            "type": "string",
            "description": "The unique identifier for the add-on within its plan. If `item_code`/`item_id` is part of the request then `code` must be absent. If `item_code`/`item_id` is not present `code` is required."
          },
          "name": {
            "title": "Name",
            "maxLength": 255,
            "type": "string",
            "description": "Describes your add-on and will appear in subscribers' invoices. If `item_code`/`item_id` is part of the request then `name` must be absent. If `item_code`/`item_id` is not present `name` is required."
          },
          "plan_id": {
            "title": "Plan ID",
            "maxLength": 13,
            "type": "string",
            "readOnly": true
          },
          "accounting_code": {
            "title": "Accounting code",
            "maxLength": 20,
            "pattern": "/^[a-z0-9_+-]+$/",
            "type": "string",
            "description": "Accounting code for invoice line items for this add-on. If no value is provided, it defaults to add-on's code. If `item_code`/`item_id` is part of the request then `accounting_code` must be absent."
          },
          "revenue_schedule_type": {
            "title": "Revenue schedule type",
            "type": "string",
            "description": "When this add-on is invoiced, the line item will use this revenue schedule. If `item_code`/`item_id` is part of the request then `revenue_schedule_type` must be absent in the request as the value will be set from the item.",
            "enum": [
              "never",
              "evenly",
              "at_range_end",
              "at_range_start"
            ]
          },
          "display_quantity": {
            "title": "Display quantity?",
            "type": "boolean",
            "description": "Determines if the quantity field is displayed on the hosted pages for the add-on.",
            "default": false
          },
          "default_quantity": {
            "title": "Default quantity",
            "type": "integer",
            "description": "Default quantity for the hosted pages.",
            "default": 1
          },
          "optional": {
            "title": "Optional",
            "type": "boolean",
            "description": "Whether the add-on is optional for the customer to include in their purchase on the hosted payment page. If false, the add-on will be included when a subscription is created through the Recurly UI. However, the add-on will not be included when a subscription is created through the API."
          },
          "tax_code": {
            "title": "Tax code",
            "maxLength": 50,
            "type": "string",
            "description": "Optional field used by Avalara, Vertex, and Recurly's EU VAT tax feature to determine taxation rules. If you have your own AvaTax or Vertex account configured, use their tax codes to assign specific tax rules. If you are using Recurly's EU VAT feature, you can use values of `unknown`, `physical`, or `digital`. If `item_code`/`item_id` is part of the request then `tax_code` must be absent."
          },
          "currencies": {
            "title": "Add-on pricing",
            "minItems": 1,
            "type": "array",
            "description": "* If `item_code`/`item_id` is part of the request and the item\nhas a default currency then `currencies` is optional. If the item does\nnot have a default currency, then `currencies` is required. If `item_code`/`item_id`\nis not present `currencies` is required.\n* If the add-on's `tier_type` is `tiered`, `volume`, or `stairstep`,\nthen `currencies` must be absent.\n",
            "items": {
              "$ref": "#/components/schemas/AddOnPricing"
            }
          },
          "tier_type": {
            "title": "Tier type",
            "type": "string",
            "description": "The pricing model for the add-on.  For more information,\n[click here](https://docs.recurly.com/docs/billing-models#section-quantity-based).\n",
            "default": "flat",
            "enum": [
              "flat",
              "tiered",
              "stairstep",
              "volume"
            ]
          },
          "tiers": {
            "title": "Tiers",
            "type": "array",
            "description": "If the tier_type is `flat`, then `tiers` must be absent. The `tiers` object\nmust include one to many tiers with `ending_quantity` and `unit_amount` for\nthe desired `currencies`. There must be one tier with an `ending_quantity` of\n999999999 which is the default if not provided.\n",
            "items": {
              "$ref": "#/components/schemas/Tier"
            }
          }
        },
        "description": "Full add-on details."
      },
      "AddOnUpdate": {
        "title": "Add-on",
        "type": "object",
        "properties": {
          "id": {
            "title": "Add-on ID",
            "maxLength": 13,
            "type": "string",
            "readOnly": true
          },
          "code": {
            "title": "Add-on code",
            "maxLength": 50,
            "type": "string",
            "description": "The unique identifier for the add-on within its plan. If an `Item` is associated to the `AddOn` then `code` must be absent."
          },
          "name": {
            "title": "Name",
            "maxLength": 255,
            "type": "string",
            "description": "Describes your add-on and will appear in subscribers' invoices. If an `Item` is associated to the `AddOn` then `name` must be absent."
          },
          "accounting_code": {
            "title": "Accounting code",
            "maxLength": 20,
            "pattern": "/^[a-z0-9_+-]+$/",
            "type": "string",
            "description": "Accounting code for invoice line items for this add-on. If no value is provided, it defaults to add-on's code. If an `Item` is associated to the `AddOn` then `accounting code` must be absent."
          },
          "revenue_schedule_type": {
            "title": "Revenue schedule type",
            "type": "string",
            "description": "When this add-on is invoiced, the line item will use this revenue schedule. If an `Item` is associated to the `AddOn` then `revenue_schedule_type` must be absent in the request as the value will be set from the item.",
            "enum": [
              "never",
              "evenly",
              "at_range_end",
              "at_range_start"
            ]
          },
          "tax_code": {
            "title": "Tax code",
            "maxLength": 50,
            "type": "string",
            "description": "Optional field used by Avalara, Vertex, and Recurly's EU VAT tax feature to determine taxation rules. If you have your own AvaTax or Vertex account configured, use their tax codes to assign specific tax rules. If you are using Recurly's EU VAT feature, you can use values of `unknown`, `physical`, or `digital`. If an `Item` is associated to the `AddOn` then `tax code` must be absent."
          },
          "display_quantity": {
            "title": "Display quantity?",
            "type": "boolean",
            "description": "Determines if the quantity field is displayed on the hosted pages for the add-on.",
            "default": false
          },
          "default_quantity": {
            "title": "Default quantity",
            "type": "integer",
            "description": "Default quantity for the hosted pages.",
            "default": 1
          },
          "optional": {
            "title": "Optional",
            "type": "boolean",
            "description": "Whether the add-on is optional for the customer to include in their purchase on the hosted payment page. If false, the add-on will be included when a subscription is created through the Recurly UI. However, the add-on will not be included when a subscription is created through the API."
          },
          "currencies": {
            "title": "Add-on pricing",
            "minItems": 1,
            "type": "array",
            "description": "If the add-on's `tier_type` is `tiered`, `volume` or `stairstep`,\nthen `currencies` must be absent.\n",
            "items": {
              "$ref": "#/components/schemas/AddOnPricing"
            }
          },
          "tiers": {
            "title": "Tiers",
            "type": "array",
            "description": "If the tier_type is `flat`, then `tiers` must be absent. The `tiers` object\nmust include one to many tiers with `ending_quantity` and `unit_amount` for\nthe desired `currencies`. There must be one tier with an `ending_quantity` of\n999999999 which is the default if not provided.\n",
            "items": {
              "$ref": "#/components/schemas/Tier"
            }
          }
        },
        "description": "Full add-on details."
      },
      "BillingInfo": {
        "type": "object",
        "properties": {
          "id": {
            "maxLength": 13,
            "type": "string",
            "readOnly": true
          },
          "object": {
            "title": "Object type",
            "type": "string",
            "readOnly": true
          },
          "account_id": {
            "maxLength": 13,
            "type": "string",
            "readOnly": true
          },
          "first_name": {
            "maxLength": 50,
            "type": "string"
          },
          "last_name": {
            "maxLength": 50,
            "type": "string"
          },
          "company": {
            "maxLength": 100,
            "type": "string"
          },
          "address": {
            "$ref": "#/components/schemas/Address"
          },
          "vat_number": {
            "type": "string",
            "description": "Customer's VAT number (to avoid having the VAT applied). This is only used for automatically collected invoices."
          },
          "valid": {
            "type": "boolean",
            "readOnly": true
          },
          "payment_method": {
            "$ref": "#/components/schemas/PaymentMethod"
          },
          "fraud": {
            "$ref": "#/components/schemas/Fraud information"
          },
          "created_at": {
            "type": "string",
            "description": "When the billing information was created.",
            "format": "date-time",
            "readOnly": true
          },
          "updated_at": {
            "type": "string",
            "description": "When the billing information was last changed.",
            "format": "date-time",
            "readOnly": true
          },
          "updated_by": {
            "$ref": "#/components/schemas/BillingInfo_updated_by"
          }
        }
      },
      "BillingInfoCreate": {
        "type": "object",
        "properties": {
          "token_id": {
            "title": "Token ID",
            "maxLength": 22,
            "type": "string",
            "description": "A token [generated by Recurly.js](https://developers.recurly.com/reference/recurly-js/#getting-a-token)."
          },
          "first_name": {
            "title": "First name",
            "maxLength": 50,
            "type": "string"
          },
          "last_name": {
            "title": "Last name",
            "maxLength": 50,
            "type": "string"
          },
          "company": {
            "title": "Company name",
            "maxLength": 100,
            "type": "string"
          },
          "address": {
            "$ref": "#/components/schemas/Address"
          },
          "number": {
            "title": "Credit card number",
            "type": "string",
            "description": "Credit card number, spaces and dashes are accepted."
          },
          "month": {
            "title": "Expiration month",
            "maxLength": 2,
            "type": "string"
          },
          "year": {
            "title": "Expiration year",
            "maxLength": 4,
            "type": "string"
          },
          "cvv": {
            "title": "Security code or CVV",
            "maxLength": 4,
            "type": "string",
            "description": "*STRONGLY RECOMMENDED*"
          },
          "vat_number": {
            "title": "VAT number",
            "type": "string"
          },
          "ip_address": {
            "title": "IP address",
            "maxLength": 20,
            "type": "string",
            "description": "*STRONGLY RECOMMENDED* Customer's IP address when updating their billing information."
          },
          "gateway_token": {
            "title": "A token used in place of a credit card in order to perform transactions. Must be used in conjunction with `gateway_code`.",
            "maxLength": 50,
            "type": "string"
          },
          "gateway_code": {
            "title": "An identifier for a specific payment gateway. Must be used in conjunction with `gateway_token`.",
            "maxLength": 12,
            "type": "string"
          },
          "amazon_billing_agreement_id": {
            "title": "Amazon billing agreement ID",
            "type": "string"
          },
          "paypal_billing_agreement_id": {
            "title": "PayPal billing agreement ID",
            "type": "string"
          },
          "fraud_session_id": {
            "title": "Fraud Session ID",
            "type": "string"
          },
          "transaction_type": {
            "type": "string",
            "description": "An optional type designation for the payment gateway transaction created by this request. Supports 'moto' value, which is the acronym for mail order and telephone transactions.",
            "enum": [
              "moto"
            ]
          },
          "three_d_secure_action_result_token_id": {
            "title": "3-D Secure action result token ID",
            "maxLength": 22,
            "type": "string",
            "description": "A token generated by Recurly.js after completing a 3-D Secure device fingerprinting or authentication challenge."
          },
          "iban": {
            "maxLength": 34,
            "type": "string",
            "description": "The International Bank Account Number, up to 34 alphanumeric characters comprising a country code; two check digits; and a number that includes the domestic bank account number, branch identifier, and potential routing information. (SEPA only)"
          },
          "name_on_account": {
            "maxLength": 255,
            "type": "string",
            "description": "The name associated with the bank account (ACH, SEPA, Bacs only)"
          },
          "account_number": {
            "maxLength": 255,
            "type": "string",
            "description": "The bank account number. (ACH, Bacs only)"
          },
          "routing_number": {
            "maxLength": 15,
            "type": "string",
            "description": "The bank's rounting number. (ACH only)"
          },
          "sort_code": {
            "maxLength": 15,
            "type": "string",
            "description": "Bank identifier code for UK based banks. Required for Bacs based billing infos. (Bacs only)"
          },
          "type": {
            "type": "string",
            "description": "The payment method type for a non-credit card based billing info. The value of `bacs` is the only accepted value (Bacs only)",
            "enum": [
              "bacs"
            ]
          },
          "account_type": {
            "type": "string",
            "description": "The bank account type. (ACH only)",
            "enum": [
              "checking",
              "savings"
            ]
          }
        }
      },
      "Coupon": {
        "type": "object",
        "properties": {
          "id": {
            "title": "Coupon ID",
            "type": "string",
            "readOnly": true
          },
          "object": {
            "title": "Object type",
            "type": "string",
            "readOnly": true
          },
          "code": {
            "title": "Coupon code",
            "type": "string",
            "description": "The code the customer enters to redeem the coupon."
          },
          "name": {
            "title": "Name",
            "type": "string",
            "description": "The internal name for the coupon."
          },
          "state": {
            "title": "State",
            "type": "string",
            "description": "Indicates if the coupon is redeemable, and if it is not, why.",
            "enum": [
              "redeemable",
              "maxed_out",
              "expired"
            ]
          },
          "max_redemptions": {
            "title": "Max redemptions",
            "type": "integer",
            "description": "A maximum number of redemptions for the coupon. The coupon will expire when it hits its maximum redemptions."
          },
          "max_redemptions_per_account": {
            "title": "Max redemptions per account",
            "type": "integer",
            "description": "Redemptions per account is the number of times a specific account can redeem the coupon. Set redemptions per account to `1` if you want to keep customers from gaming the system and getting more than one discount from the coupon campaign."
          },
          "unique_coupon_codes_count": {
            "title": "Unique coupon codes count",
            "type": "integer",
            "description": "When this number reaches `max_redemptions` the coupon will no longer be redeemable.",
            "readOnly": true
          },
          "unique_code_template": {
            "title": "Unique code template",
            "type": "string",
            "description": "On a bulk coupon, the template from which unique coupon codes are generated."
          },
          "duration": {
            "title": "Duration",
            "type": "string",
            "description": "- \"single_use\" coupons applies to the first invoice only.\n- \"temporal\" coupons will apply to invoices for the duration determined by the `temporal_unit` and `temporal_amount` attributes.\n",
            "enum": [
              "forever",
              "single_use",
              "temporal"
            ]
          },
          "temporal_amount": {
            "title": "Temporal amount",
            "type": "integer",
            "description": "If `duration` is \"temporal\" than `temporal_amount` is an integer which is multiplied by `temporal_unit` to define the duration that the coupon will be applied to invoices for."
          },
          "temporal_unit": {
            "title": "Temporal unit",
            "type": "string",
            "description": "If `duration` is \"temporal\" than `temporal_unit` is multiplied by `temporal_amount` to define the duration that the coupon will be applied to invoices for.",
            "enum": [
              "day",
              "week",
              "month",
              "year"
            ]
          },
          "free_trial_unit": {
            "title": "Free trial unit",
            "type": "string",
            "description": "Description of the unit of time the coupon is for. Used with `free_trial_amount` to determine the duration of time the coupon is for.",
            "enum": [
              "day",
              "week",
              "month"
            ]
          },
          "free_trial_amount": {
            "title": "Free trial amount",
            "maximum": 9999,
            "minimum": 1,
            "type": "integer",
            "description": "Sets the duration of time the `free_trial_unit` is for."
          },
          "applies_to_all_plans": {
            "title": "Applies to all plans?",
            "type": "boolean",
            "description": "The coupon is valid for all plans if true. If false then `plans` and `plans_names` will list the applicable plans.",
            "default": true
          },
          "applies_to_non_plan_charges": {
            "title": "Applied to all non-plan charges?",
            "type": "boolean",
            "description": "The coupon is valid for one-time, non-plan charges if true.",
            "default": false
          },
          "plans_names": {
            "title": "Plan names (TODO: decide if this duplicates `plans`)",
            "type": "array",
            "description": "TODO",
            "items": {
              "type": "string"
            }
          },
          "plans": {
            "title": "Plans",
            "type": "array",
            "description": "A list of plans for which this coupon applies. This will be `null` if `applies_to_all_plans=true`.",
            "items": {
              "$ref": "#/components/schemas/PlanMini"
            }
          },
          "redemption_resource": {
            "title": "Redemption resource",
            "type": "string",
            "description": "Whether the discount is for all eligible charges on the account, or only a specific subscription.",
            "default": "account",
            "enum": [
              "account",
              "subscription"
            ]
          },
          "discount": {
            "$ref": "#/components/schemas/CouponDiscount"
          },
          "coupon_type": {
            "title": "Coupon type (TODO: implement coupon generation)",
            "type": "string",
            "description": "Whether the coupon is \"single_code\" or \"bulk\". Bulk coupons will require a `unique_code_template` and will generate unique codes through the `/generate` endpoint.",
            "enum": [
              "single_code",
              "bulk"
            ]
          },
          "hosted_page_description": {
            "title": "Hosted Payment Pages description",
            "type": "string",
            "description": "This description will show up when a customer redeems a coupon on your Hosted Payment Pages, or if you choose to show the description on your own checkout page."
          },
          "invoice_description": {
            "title": "Invoice description",
            "maxLength": 255,
            "type": "string",
            "description": "Description of the coupon on the invoice."
          },
          "redeem_by": {
            "title": "Redeem by",
            "type": "string",
            "description": "The date and time the coupon will expire and can no longer be redeemed. Time is always 11:59:59, the end-of-day Pacific time.",
            "format": "date-time"
          },
          "redeemed_at": {
            "title": "Redeemed at",
            "type": "string",
            "description": "The date and time the unique coupon code was redeemed. This is only present for bulk coupons.",
            "format": "date-time",
            "readOnly": true
          },
          "created_at": {
            "title": "Created at",
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "updated_at": {
            "title": "Last updated at",
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "expired_at": {
            "title": "Expired at",
            "type": "string",
            "description": "The date and time the coupon was expired early or reached its `max_redemptions`.",
            "format": "date-time"
          }
        }
      },
      "CouponCreate": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CouponUpdate"
          },
          {
            "required": [
              "code",
              "discount_type",
              "name"
            ],
            "type": "object",
            "properties": {
              "code": {
                "title": "Coupon code",
                "type": "string",
                "description": "The code the customer enters to redeem the coupon."
              },
              "discount_type": {
                "title": "Discount type",
                "type": "string",
                "description": "The type of discount provided by the coupon (how the amount discounted is calculated)",
                "enum": [
                  "percent",
                  "fixed",
                  "free_trial"
                ]
              },
              "discount_percent": {
                "title": "Discount percent",
                "type": "integer",
                "description": "The percent of the price discounted by the coupon.  Required if `discount_type` is `percent`."
              },
              "free_trial_unit": {
                "title": "Free trial unit",
                "type": "string",
                "description": "Description of the unit of time the coupon is for. Used with `free_trial_amount` to determine the duration of time the coupon is for.  Required if `discount_type` is `free_trial`.",
                "enum": [
                  "day",
                  "week",
                  "month"
                ]
              },
              "free_trial_amount": {
                "title": "Free trial amount",
                "maximum": 9999,
                "minimum": 1,
                "type": "integer",
                "description": "Sets the duration of time the `free_trial_unit` is for. Required if `discount_type` is `free_trial`."
              },
              "currencies": {
                "title": "Currencies",
                "type": "array",
                "description": "Fixed discount currencies by currency. Required if the coupon type is `fixed`. This parameter should contain the coupon discount values",
                "items": {
                  "$ref": "#/components/schemas/CouponPricing"
                }
              },
              "applies_to_non_plan_charges": {
                "title": "Applied to all non-plan charges?",
                "type": "boolean",
                "description": "The coupon is valid for one-time, non-plan charges if true.",
                "default": false
              },
              "applies_to_all_plans": {
                "title": "Applies to all plans?",
                "type": "boolean",
                "description": "The coupon is valid for all plans if true. If false then `plans` and `plans_names` will list the applicable plans.",
                "default": true
              },
              "plan_codes": {
                "title": "Plan codes",
                "type": "array",
                "description": "List of plan codes to which this coupon applies. See `applies_to_all_plans`",
                "items": {
                  "type": "string"
                }
              },
              "duration": {
                "title": "Duration",
                "type": "string",
                "description": "This field does not apply when the discount_type is `free_trial`.\n- \"single_use\" coupons applies to the first invoice only.\n- \"temporal\" coupons will apply to invoices for the duration determined by the `temporal_unit` and `temporal_amount` attributes.\n- \"forever\" coupons will apply to invoices forever.\n",
                "default": "forever",
                "enum": [
                  "forever",
                  "single_use",
                  "temporal"
                ]
              },
              "temporal_amount": {
                "title": "Temporal amount",
                "type": "integer",
                "description": "If `duration` is \"temporal\" than `temporal_amount` is an integer which is multiplied by `temporal_unit` to define the duration that the coupon will be applied to invoices for."
              },
              "temporal_unit": {
                "title": "Temporal unit",
                "type": "string",
                "description": "If `duration` is \"temporal\" than `temporal_unit` is multiplied by `temporal_amount` to define the duration that the coupon will be applied to invoices for.",
                "enum": [
                  "day",
                  "week",
                  "month",
                  "year"
                ]
              },
              "coupon_type": {
                "title": "Coupon type",
                "type": "string",
                "description": "Whether the coupon is \"single_code\" or \"bulk\". Bulk coupons will require a `unique_code_template` and will generate unique codes through the `/generate` endpoint.",
                "enum": [
                  "single_code",
                  "bulk"
                ]
              },
              "unique_code_template": {
                "title": "Unique code template",
                "type": "string",
                "description": "On a bulk coupon, the template from which unique coupon codes are generated.\n- You must start the template with your coupon_code wrapped in single quotes.\n- Outside of single quotes, use a 9 for a character that you want to be a random number.\n- Outside of single quotes, use an \"x\" for a character that you want to be a random letter.\n- Outside of single quotes, use an * for a character that you want to be a random number or letter.\n- Use single quotes ' ' for characters that you want to remain static. These strings can be alphanumeric and may contain a - _ or +.\nFor example: \"'abc-'****'-def'\"\n"
              },
              "redemption_resource": {
                "title": "Redemption resource",
                "type": "string",
                "description": "Whether the discount is for all eligible charges on the account, or only a specific subscription.",
                "default": "account",
                "enum": [
                  "account",
                  "subscription"
                ]
              }
            }
          }
        ]
      },
      "CouponPricing": {
        "type": "object",
        "properties": {
          "currency": {
            "type": "string",
            "description": "3-letter ISO 4217 currency code."
          },
          "discount": {
            "type": "number",
            "description": "The fixed discount (in dollars) for the corresponding currency.",
            "format": "float"
          }
        }
      },
      "CouponDiscount": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "percent",
              "fixed",
              "free_trial"
            ]
          },
          "percent": {
            "type": "integer",
            "description": "This is only present when `type=percent`."
          },
          "currencies": {
            "type": "array",
            "description": "This is only present when `type=fixed`.",
            "items": {
              "$ref": "#/components/schemas/CouponDiscountPricing"
            }
          },
          "trial": {
            "$ref": "#/components/schemas/CouponDiscount_trial"
          }
        },
        "description": "Details of the discount a coupon applies. Will contain a `type`\nproperty and one of the following properties: `percent`, `fixed`, `trial`.\n"
      },
      "CouponDiscountPricing": {
        "type": "object",
        "properties": {
          "currency": {
            "title": "Currency",
            "maxLength": 3,
            "type": "string",
            "description": "3-letter ISO 4217 currency code."
          },
          "amount": {
            "title": "Discount Amount",
            "type": "number",
            "description": "Value of the fixed discount that this coupon applies.",
            "format": "float"
          }
        }
      },
      "CouponBulkCreate": {
        "type": "object",
        "properties": {
          "number_of_unique_codes": {
            "title": "Number of unique codes",
            "maximum": 200,
            "minimum": 1,
            "type": "integer",
            "description": "The quantity of unique coupon codes to generate"
          }
        }
      },
      "CouponMini": {
        "type": "object",
        "properties": {
          "id": {
            "title": "Coupon ID",
            "type": "string",
            "readOnly": true
          },
          "object": {
            "title": "Object type",
            "type": "string",
            "readOnly": true
          },
          "code": {
            "title": "Coupon code",
            "type": "string",
            "description": "The code the customer enters to redeem the coupon."
          },
          "name": {
            "title": "Name",
            "type": "string",
            "description": "The internal name for the coupon."
          },
          "state": {
            "title": "State",
            "type": "string",
            "description": "Indicates if the coupon is redeemable, and if it is not, why.",
            "enum": [
              "redeemable",
              "maxed_out",
              "expired"
            ]
          },
          "discount": {
            "$ref": "#/components/schemas/CouponDiscount"
          },
          "coupon_type": {
            "title": "Coupon type (TODO: implement coupon generation)",
            "type": "string",
            "description": "Whether the coupon is \"single_code\" or \"bulk\". Bulk coupons will require a `unique_code_template` and will generate unique codes through the `/generate` endpoint.",
            "enum": [
              "single_code",
              "bulk"
            ]
          },
          "expired_at": {
            "title": "Expired at",
            "type": "string",
            "description": "The date and time the coupon was expired early or reached its `max_redemptions`.",
            "format": "date-time"
          }
        }
      },
      "CouponRedemption": {
        "type": "object",
        "properties": {
          "id": {
            "title": "Coupon Redemption ID",
            "type": "string",
            "readOnly": true
          },
          "object": {
            "title": "Object type",
            "type": "string",
            "description": "Will always be `coupon`.",
            "readOnly": true
          },
          "account": {
            "$ref": "#/components/schemas/AccountMini"
          },
          "coupon": {
            "$ref": "#/components/schemas/Coupon"
          },
          "state": {
            "title": "Coupon Redemption state",
            "type": "string",
            "default": "active",
            "enum": [
              "active",
              "inactive"
            ]
          },
          "currency": {
            "title": "Currency",
            "maxLength": 3,
            "type": "string",
            "description": "3-letter ISO 4217 currency code."
          },
          "discounted": {
            "title": "Amount Discounted",
            "type": "number",
            "description": "The amount that was discounted upon the application of the coupon, formatted with the currency.",
            "format": "float"
          },
          "created_at": {
            "title": "Created at",
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "updated_at": {
            "title": "Last updated at",
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "removed_at": {
            "title": "Removed at",
            "type": "string",
            "description": "The date and time the redemption was removed from the account (un-redeemed).",
            "format": "date-time"
          }
        }
      },
      "CouponRedemptionCreate": {
        "required": [
          "coupon_id"
        ],
        "type": "object",
        "properties": {
          "coupon_id": {
            "title": "Coupon ID",
            "type": "string"
          },
          "currency": {
            "title": "Currency",
            "maxLength": 3,
            "type": "string",
            "description": "3-letter ISO 4217 currency code."
          }
        }
      },
      "CouponRedemptionMini": {
        "type": "object",
        "properties": {
          "id": {
            "title": "Coupon Redemption ID",
            "type": "string",
            "readOnly": true
          },
          "object": {
            "title": "Object type",
            "type": "string",
            "description": "Will always be `coupon`.",
            "readOnly": true
          },
          "coupon": {
            "$ref": "#/components/schemas/CouponMini"
          },
          "state": {
            "title": "Invoice state",
            "type": "string",
            "enum": [
              "active",
              "inactive"
            ]
          },
          "discounted": {
            "title": "Amount Discounted",
            "type": "number",
            "description": "The amount that was discounted upon the application of the coupon, formatted with the currency.",
            "format": "float"
          },
          "created_at": {
            "title": "Created at",
            "type": "string",
            "format": "date-time",
            "readOnly": true
          }
        }
      },
      "CouponUpdate": {
        "type": "object",
        "properties": {
          "name": {
            "title": "Name",
            "type": "string",
            "description": "The internal name for the coupon."
          },
          "max_redemptions": {
            "title": "Max redemptions",
            "type": "integer",
            "description": "A maximum number of redemptions for the coupon. The coupon will expire when it hits its maximum redemptions."
          },
          "max_redemptions_per_account": {
            "title": "Max redemptions per account",
            "type": "integer",
            "description": "Redemptions per account is the number of times a specific account can redeem the coupon. Set redemptions per account to `1` if you want to keep customers from gaming the system and getting more than one discount from the coupon campaign."
          },
          "hosted_description": {
            "title": "Hosted Payment Pages description",
            "type": "string",
            "description": "This description will show up when a customer redeems a coupon on your Hosted Payment Pages, or if you choose to show the description on your own checkout page."
          },
          "invoice_description": {
            "title": "Invoice description",
            "maxLength": 255,
            "type": "string",
            "description": "Description of the coupon on the invoice."
          },
          "redeem_by_date": {
            "title": "Redeem by",
            "type": "string",
            "description": "The date and time the coupon will expire and can no longer be redeemed. Time is always 11:59:59, the end-of-day Pacific time."
          }
        }
      },
      "CreditPayment": {
        "type": "object",
        "properties": {
          "id": {
            "title": "Credit Payment ID",
            "maxLength": 13,
            "type": "string"
          },
          "object": {
            "title": "Object type",
            "type": "string"
          },
          "uuid": {
            "title": "Recurly UUID",
            "maxLength": 32,
            "type": "string",
            "description": "The UUID is useful for matching data with the CSV exports and building URLs into Recurly's UI."
          },
          "action": {
            "title": "Action",
            "type": "string",
            "description": "The action for which the credit was created.",
            "enum": [
              "payment",
              "refund",
              "reduction",
              "write_off"
            ]
          },
          "account": {
            "$ref": "#/components/schemas/AccountMini"
          },
          "applied_to_invoice": {
            "$ref": "#/components/schemas/InvoiceMini"
          },
          "original_invoice": {
            "$ref": "#/components/schemas/InvoiceMini"
          },
          "currency": {
            "title": "Currency",
            "maxLength": 3,
            "type": "string",
            "description": "3-letter ISO 4217 currency code."
          },
          "amount": {
            "title": "Amount",
            "type": "number",
            "description": "Total credit payment amount applied to the charge invoice.",
            "format": "float"
          },
          "original_credit_payment_id": {
            "title": "Original Credit Payment ID",
            "maxLength": 13,
            "type": "string",
            "description": "For credit payments with action `refund`, this is the credit payment that was refunded."
          },
          "refund_transaction": {
            "$ref": "#/components/schemas/Transaction"
          },
          "created_at": {
            "title": "Created at",
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "updated_at": {
            "title": "Last updated at",
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "voided_at": {
            "title": "Voided at",
            "type": "string",
            "format": "date-time",
            "readOnly": true
          }
        }
      },
      "CustomField": {
        "title": "Custom field",
        "required": [
          "name",
          "value"
        ],
        "type": "object",
        "properties": {
          "name": {
            "title": "Field name",
            "maxLength": 50,
            "pattern": "/^[a-z0-9_-]+$/i",
            "type": "string",
            "description": "Fields must be created in the UI before values can be assigned to them."
          },
          "value": {
            "title": "Field value",
            "maxLength": 100,
            "type": "string",
            "description": "Any values that resemble a credit card number or security code (CVV/CVC) will be rejected."
          }
        }
      },
      "CustomFields": {
        "title": "Custom fields",
        "type": "array",
        "description": "The custom fields will only be altered when they are included in a request. Sending an empty array will not remove any existing values. To remove a field send the name with a null or empty value.",
        "items": {
          "$ref": "#/components/schemas/CustomField"
        }
      },
      "CustomFieldDefinition": {
        "title": "Custom field definition",
        "type": "object",
        "properties": {
          "id": {
            "title": "Custom field definition ID",
            "type": "string",
            "readOnly": true
          },
          "object": {
            "title": "Object type",
            "type": "string",
            "readOnly": true
          },
          "related_type": {
            "title": "Related Recurly object type",
            "type": "string",
            "enum": [
              "account",
              "item",
              "subscription"
            ]
          },
          "name": {
            "title": "Name",
            "maxLength": 50,
            "pattern": "/^[a-z0-9_-]+$/i",
            "type": "string",
            "description": "Used by the API to identify the field or reading and writing. The name can only be used once per Recurly object type."
          },
          "user_access": {
            "title": "User access",
            "type": "string",
            "description": "The access control applied inside Recurly's admin UI:\n- `api_only` - No one will be able to view or edit this field's data via the admin UI.\n- `read_only` - Users with the Customers role will be able to view this field's data via the admin UI, but\n  editing will only be available via the API.\n- `write` - Users with the Customers role will be able to view and edit this field's data via the admin UI.\n",
            "enum": [
              "api_only",
              "read_only",
              "write"
            ]
          },
          "display_name": {
            "title": "Display name",
            "maxLength": 50,
            "type": "string",
            "description": "Used to label the field when viewing and editing the field in Recurly's admin UI."
          },
          "tooltip": {
            "title": "Tooltip description",
            "maxLength": 255,
            "pattern": "/^[a-z0-9_-]+$/i",
            "type": "string",
            "description": "Displayed as a tooltip when editing the field in the Recurly admin UI."
          },
          "created_at": {
            "title": "Created at",
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "updated_at": {
            "title": "Last updated at",
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "deleted_at": {
            "title": "Deleted at",
            "type": "string",
            "description": "Definitions are initially soft deleted, and once all the values are removed from the accouts or subscriptions, will be hard deleted an no longer visible.",
            "format": "date-time",
            "readOnly": true
          }
        }
      },
      "ItemMini": {
        "title": "Item mini details",
        "type": "object",
        "properties": {
          "id": {
            "title": "Item ID",
            "maxLength": 13,
            "type": "string",
            "readOnly": true
          },
          "object": {
            "title": "Object type",
            "type": "string",
            "readOnly": true
          },
          "code": {
            "title": "Item code",
            "maxLength": 50,
            "pattern": "/^[a-z0-9_+-]+$/",
            "type": "string",
            "description": "Unique code to identify the item."
          },
          "state": {
            "title": "State",
            "type": "string",
            "description": "The current state of the item.",
            "readOnly": true,
            "enum": [
              "active",
              "inactive"
            ]
          },
          "name": {
            "title": "Name",
            "maxLength": 255,
            "type": "string",
            "description": "This name describes your item and will appear on the invoice when it's purchased on a one time basis."
          },
          "description": {
            "title": "Description",
            "type": "string",
            "description": "Optional, description."
          }
        },
        "description": "Just the important parts."
      },
      "Item": {
        "type": "object",
        "properties": {
          "id": {
            "title": "Item ID",
            "maxLength": 13,
            "type": "string",
            "readOnly": true
          },
          "object": {
            "title": "Object type",
            "type": "string",
            "readOnly": true
          },
          "code": {
            "title": "Item code",
            "maxLength": 50,
            "pattern": "/^[a-z0-9_+-]+$/",
            "type": "string",
            "description": "Unique code to identify the item."
          },
          "state": {
            "title": "State",
            "type": "string",
            "description": "The current state of the item.",
            "readOnly": true,
            "enum": [
              "active",
              "inactive"
            ]
          },
          "name": {
            "title": "Name",
            "maxLength": 255,
            "type": "string",
            "description": "This name describes your item and will appear on the invoice when it's purchased on a one time basis."
          },
          "description": {
            "title": "Description",
            "type": "string",
            "description": "Optional, description."
          },
          "external_sku": {
            "title": "External SKU",
            "maxLength": 50,
            "type": "string",
            "description": "Optional, stock keeping unit to link the item to other inventory systems."
          },
          "accounting_code": {
            "title": "Item accounting code",
            "maxLength": 20,
            "pattern": "/^[a-z0-9_+-]+$/",
            "type": "string",
            "description": "Accounting code for invoice line items."
          },
          "revenue_schedule_type": {
            "title": "Revenue schedule type",
            "type": "string",
            "enum": [
              "never",
              "evenly",
              "at_range_end",
              "at_range_start"
            ]
          },
          "tax_code": {
            "title": "Tax code",
            "maxLength": 50,
            "type": "string",
            "description": "Used by Avalara, Vertex, and Recurlyâ€™s EU VAT tax feature. The tax code values are specific to each tax system. If you are using Recurlyâ€™s EU VAT feature you can use `unknown`, `physical`, or `digital`."
          },
          "tax_exempt": {
            "title": "Tax exempt?",
            "type": "boolean",
            "description": "`true` exempts tax on the item, `false` applies tax on the item."
          },
          "custom_fields": {
            "$ref": "#/components/schemas/CustomFields"
          },
          "currencies": {
            "title": "Item Pricing",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Pricing"
            }
          },
          "created_at": {
            "title": "Created at",
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "updated_at": {
            "title": "Last updated at",
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "deleted_at": {
            "title": "Deleted at",
            "type": "string",
            "format": "date-time",
            "readOnly": true
          }
        },
        "description": "Full item details."
      },
      "ItemCreate": {
        "required": [
          "code",
          "name"
        ],
        "type": "object",
        "properties": {
          "code": {
            "title": "Item code",
            "maxLength": 50,
            "pattern": "/^[a-z0-9_+-]+$/",
            "type": "string",
            "description": "Unique code to identify the item."
          },
          "name": {
            "title": "Name",
            "maxLength": 255,
            "type": "string",
            "description": "This name describes your item and will appear on the invoice when it's purchased on a one time basis."
          },
          "description": {
            "title": "Description",
            "type": "string",
            "description": "Optional, description."
          },
          "external_sku": {
            "title": "External SKU",
            "maxLength": 50,
            "type": "string",
            "description": "Optional, stock keeping unit to link the item to other inventory systems."
          },
          "accounting_code": {
            "title": "Item accounting code",
            "maxLength": 20,
            "pattern": "/^[a-z0-9_+-]+$/",
            "type": "string",
            "description": "Accounting code for invoice line items."
          },
          "revenue_schedule_type": {
            "title": "Revenue schedule type",
            "type": "string",
            "enum": [
              "never",
              "evenly",
              "at_range_end",
              "at_range_start"
            ]
          },
          "tax_code": {
            "title": "Tax code",
            "maxLength": 50,
            "type": "string",
            "description": "Used by Avalara, Vertex, and Recurlyâ€™s EU VAT tax feature. The tax code values are specific to each tax system. If you are using Recurlyâ€™s EU VAT feature you can use `unknown`, `physical`, or `digital`."
          },
          "tax_exempt": {
            "title": "Tax exempt?",
            "type": "boolean",
            "description": "`true` exempts tax on the item, `false` applies tax on the item."
          },
          "custom_fields": {
            "$ref": "#/components/schemas/CustomFields"
          },
          "currencies": {
            "title": "Item Pricing",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Pricing"
            }
          }
        }
      },
      "ItemUpdate": {
        "type": "object",
        "properties": {
          "code": {
            "title": "Item code",
            "maxLength": 50,
            "pattern": "/^[a-z0-9_+-]+$/",
            "type": "string",
            "description": "Unique code to identify the item."
          },
          "name": {
            "title": "Name",
            "maxLength": 255,
            "type": "string",
            "description": "This name describes your item and will appear on the invoice when it's purchased on a one time basis."
          },
          "description": {
            "title": "Description",
            "type": "string",
            "description": "Optional, description."
          },
          "external_sku": {
            "title": "External SKU",
            "maxLength": 50,
            "type": "string",
            "description": "Optional, stock keeping unit to link the item to other inventory systems."
          },
          "accounting_code": {
            "title": "Item accounting code",
            "maxLength": 20,
            "pattern": "/^[a-z0-9_+-]+$/",
            "type": "string",
            "description": "Accounting code for invoice line items."
          },
          "revenue_schedule_type": {
            "title": "Revenue schedule type",
            "type": "string",
            "enum": [
              "never",
              "evenly",
              "at_range_end",
              "at_range_start"
            ]
          },
          "tax_code": {
            "title": "Tax code",
            "maxLength": 50,
            "type": "string",
            "description": "Used by Avalara, Vertex, and Recurlyâ€™s EU VAT tax feature. The tax code values are specific to each tax system. If you are using Recurlyâ€™s EU VAT feature you can use `unknown`, `physical`, or `digital`."
          },
          "tax_exempt": {
            "title": "Tax exempt?",
            "type": "boolean",
            "description": "`true` exempts tax on the item, `false` applies tax on the item."
          },
          "custom_fields": {
            "$ref": "#/components/schemas/CustomFields"
          },
          "currencies": {
            "title": "Item Pricing",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Pricing"
            }
          }
        }
      },
      "Invoice": {
        "type": "object",
        "properties": {
          "id": {
            "title": "Invoice ID",
            "type": "string",
            "readOnly": true
          },
          "object": {
            "title": "Object type",
            "type": "string",
            "readOnly": true
          },
          "type": {
            "title": "Invoice type",
            "type": "string",
            "description": "Invoices are either charge, credit, or legacy invoices.",
            "enum": [
              "charge",
              "credit",
              "legacy"
            ]
          },
          "origin": {
            "title": "Origin",
            "type": "string",
            "description": "The event that created the invoice.",
            "enum": [
              "purchase",
              "line_item_refund",
              "open_amount_refund",
              "renewal",
              "immediate_change",
              "termination",
              "credit",
              "gift_card",
              "write_off"
            ]
          },
          "state": {
            "title": "Invoice state",
            "type": "string",
            "enum": [
              "open",
              "pending",
              "processing",
              "past_due",
              "paid",
              "closed",
              "failed",
              "voided"
            ]
          },
          "account": {
            "$ref": "#/components/schemas/AccountMini"
          },
          "subscription_ids": {
            "title": "Subscription IDs",
            "type": "array",
            "description": "If the invoice is charging or refunding for one or more subscriptions, these are their IDs.",
            "items": {
              "title": "Subscription ID",
              "maxLength": 13,
              "type": "string"
            }
          },
          "previous_invoice_id": {
            "title": "Previous invoice ID",
            "maxLength": 13,
            "type": "string",
            "description": "On refund invoices, this value will exist and show the invoice ID of the purchase invoice the refund was created from."
          },
          "number": {
            "title": "Invoice number",
            "type": "string",
            "description": "If VAT taxation and the Country Invoice Sequencing feature are enabled, invoices will have country-specific invoice numbers for invoices billed to EU countries (ex: FR1001). Non-EU invoices will continue to use the site-level invoice number sequence."
          },
          "collection_method": {
            "title": "Collection method",
            "type": "string",
            "description": "An automatic invoice means a corresponding transaction is run using the account's billing information at the same time the invoice is created. Manual invoices are created without a corresponding transaction. The merchant must enter a manual payment transaction or have the customer pay the invoice with an automatic method, like credit card, PayPal, Amazon, or ACH bank payment.",
            "default": "automatic",
            "enum": [
              "automatic",
              "manual"
            ]
          },
          "po_number": {
            "title": "Purchase order number",
            "maxLength": 50,
            "type": "string",
            "description": "For manual invoicing, this identifies the PO number associated with the subscription."
          },
          "net_terms": {
            "title": "Net terms",
            "minimum": 0,
            "type": "integer",
            "description": "Integer representing the number of days after an invoice's creation that the invoice will become past due. If an invoice's net terms are set to '0', it is due 'On Receipt' and will become past due 24 hours after itâ€™s created. If an invoice is due net 30, it will become past due at 31 days exactly.",
            "default": 0
          },
          "address": {
            "$ref": "#/components/schemas/InvoiceAddress"
          },
          "shipping_address": {
            "$ref": "#/components/schemas/ShippingAddress"
          },
          "currency": {
            "title": "Currency",
            "maxLength": 3,
            "type": "string",
            "description": "3-letter ISO 4217 currency code."
          },
          "discount": {
            "title": "Discount",
            "type": "number",
            "description": "Total discounts applied to this invoice.",
            "format": "float"
          },
          "subtotal": {
            "title": "Subtotal",
            "type": "number",
            "description": "The summation of charges, discounts, and credits, before tax.",
            "format": "float"
          },
          "tax": {
            "title": "Tax",
            "type": "number",
            "description": "The total tax on this invoice.",
            "format": "float"
          },
          "total": {
            "title": "Total",
            "type": "number",
            "description": "The final total on this invoice. The summation of invoice charges, discounts, credits, and tax.",
            "format": "float"
          },
          "refundable_amount": {
            "title": "Refundable amount",
            "type": "number",
            "description": "The refundable amount on a charge invoice. It will be null for all other invoices.",
            "format": "float"
          },
          "paid": {
            "title": "Paid",
            "type": "number",
            "description": "The total amount of successful payments transaction on this invoice.",
            "format": "float"
          },
          "balance": {
            "title": "Balance",
            "type": "number",
            "description": "The outstanding balance remaining on this invoice.",
            "format": "float"
          },
          "tax_info": {
            "$ref": "#/components/schemas/TaxInfo"
          },
          "vat_number": {
            "title": "VAT number",
            "maxLength": 20,
            "type": "string",
            "description": "VAT registration number for the customer on this invoice. This will come from the VAT Number field in the Billing Info or the Account Info depending on your tax settings and the invoice collection method."
          },
          "vat_reverse_charge_notes": {
            "title": "VAT reverse charge notes",
            "type": "string",
            "description": "VAT Reverse Charge Notes only appear if you have EU VAT enabled or are using your own Avalara AvaTax account and the customer is in the EU, has a VAT number, and is in a different country than your own. This will default to the VAT Reverse Charge Notes text specified on the Tax Settings page in your Recurly admin, unless custom notes were created with the original subscription."
          },
          "terms_and_conditions": {
            "title": "Terms and conditions",
            "type": "string",
            "description": "This will default to the Terms and Conditions text specified on the Invoice Settings page in your Recurly admin. Specify custom notes to add or override Terms and Conditions."
          },
          "customer_notes": {
            "title": "Customer notes",
            "type": "string",
            "description": "This will default to the Customer Notes text specified on the Invoice Settings. Specify custom notes to add or override Customer Notes."
          },
          "line_items": {
            "$ref": "#/components/schemas/LineItemList"
          },
          "transactions": {
            "title": "Transactions",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Transaction"
            }
          },
          "credit_payments": {
            "title": "Credit payments",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreditPayment"
            }
          },
          "created_at": {
            "title": "Created at",
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "updated_at": {
            "title": "Last updated at",
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "due_at": {
            "title": "Due at",
            "type": "string",
            "description": "Date invoice is due. This is the date the net terms are reached.",
            "format": "date-time"
          },
          "closed_at": {
            "title": "Closed at",
            "type": "string",
            "description": "Date invoice was marked paid or failed.",
            "format": "date-time"
          }
        }
      },
      "InvoiceCreate": {
        "required": [
          "currency"
        ],
        "type": "object",
        "properties": {
          "currency": {
            "title": "Currency",
            "maxLength": 3,
            "type": "string",
            "description": "3-letter ISO 4217 currency code."
          },
          "collection_method": {
            "title": "Collection method",
            "type": "string",
            "description": "An automatic invoice means a corresponding transaction is run using the account's billing information at the same time the invoice is created. Manual invoices are created without a corresponding transaction. The merchant must enter a manual payment transaction or have the customer pay the invoice with an automatic method, like credit card, PayPal, Amazon, or ACH bank payment.",
            "default": "automatic",
            "enum": [
              "automatic",
              "manual"
            ]
          },
          "charge_customer_notes": {
            "title": "Charge customer notes",
            "type": "string",
            "description": "This will default to the Customer Notes text specified on the Invoice Settings for charge invoices. Specify custom notes to add or override Customer Notes on charge invoices."
          },
          "credit_customer_notes": {
            "title": "Credit customer notes",
            "type": "string",
            "description": "This will default to the Customer Notes text specified on the Invoice Settings for credit invoices. Specify customer notes to add or override Customer Notes on credit invoices."
          },
          "net_terms": {
            "title": "Net terms",
            "minimum": 0,
            "type": "integer",
            "description": "Integer representing the number of days after an invoice's creation that the invoice will become past due. If an invoice's net terms are set to '0', it is due 'On Receipt' and will become past due 24 hours after itâ€™s created. If an invoice is due net 30, it will become past due at 31 days exactly.",
            "default": 0
          },
          "po_number": {
            "title": "Purchase order number",
            "maxLength": 50,
            "type": "string",
            "description": "For manual invoicing, this identifies the PO number associated with the subscription."
          },
          "terms_and_conditions": {
            "title": "Terms and conditions",
            "type": "string",
            "description": "This will default to the Terms and Conditions text specified on the Invoice Settings page in your Recurly admin. Specify custom notes to add or override Terms and Conditions."
          },
          "vat_reverse_charge_notes": {
            "title": "VAT reverse charge notes",
            "type": "string",
            "description": "VAT Reverse Charge Notes only appear if you have EU VAT enabled or are using your own Avalara AvaTax account and the customer is in the EU, has a VAT number, and is in a different country than your own. This will default to the VAT Reverse Charge Notes text specified on the Tax Settings page in your Recurly admin, unless custom notes were created with the original subscription."
          }
        }
      },
      "InvoiceCollect": {
        "type": "object",
        "properties": {
          "three_d_secure_action_result_token_id": {
            "title": "3-D Secure action result token ID",
            "maxLength": 22,
            "type": "string",
            "description": "A token generated by Recurly.js after completing a 3-D Secure device fingerprinting or authentication challenge."
          },
          "transaction_type": {
            "type": "string",
            "description": "An optional type designation for the payment gateway transaction created by this request. Supports 'moto' value, which is the acronym for mail order and telephone transactions.",
            "enum": [
              "moto"
            ]
          }
        }
      },
      "InvoiceCollection": {
        "title": "Invoice collection",
        "type": "object",
        "properties": {
          "object": {
            "title": "Object type",
            "type": "string"
          },
          "charge_invoice": {
            "$ref": "#/components/schemas/Invoice"
          },
          "credit_invoices": {
            "title": "Credit invoices",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Invoice"
            }
          }
        }
      },
      "InvoiceUpdatable": {
        "type": "object",
        "properties": {
          "po_number": {
            "title": "Purchase order number",
            "maxLength": 50,
            "type": "string",
            "description": "This identifies the PO number associated with the invoice. Not editable for credit invoices."
          },
          "vat_reverse_charge_notes": {
            "title": "VAT reverse charge notes",
            "type": "string",
            "description": "VAT Reverse Charge Notes are editable only if there was a VAT reverse charge applied to the invoice."
          },
          "terms_and_conditions": {
            "title": "Terms and conditions",
            "type": "string",
            "description": "Terms and conditions are an optional note field. Not editable for credit invoices."
          },
          "customer_notes": {
            "title": "Customer notes",
            "type": "string",
            "description": "Customer notes are an optional note field."
          },
          "net_terms": {
            "title": "Net terms",
            "maximum": 999,
            "minimum": 0,
            "type": "integer",
            "description": "Integer representing the number of days after an invoice's creation that the invoice will become past due. Changing Net terms changes due_on, and the invoice could move between past due and pending."
          },
          "address": {
            "$ref": "#/components/schemas/InvoiceAddress"
          }
        }
      },
      "InvoiceMini": {
        "title": "Invoice mini details",
        "type": "object",
        "properties": {
          "id": {
            "title": "Invoice ID",
            "maxLength": 13,
            "type": "string"
          },
          "object": {
            "title": "Object type",
            "type": "string"
          },
          "number": {
            "title": "Invoice number",
            "type": "string"
          },
          "type": {
            "title": "Invoice type",
            "type": "string",
            "enum": [
              "charge",
              "credit",
              "legacy"
            ]
          },
          "state": {
            "title": "Invoice state",
            "type": "string",
            "enum": [
              "open",
              "pending",
              "processing",
              "past_due",
              "paid",
              "closed",
              "failed",
              "voided"
            ]
          }
        }
      },
      "InvoiceRefund": {
        "title": "Invoice refund",
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "title": "Type",
            "type": "string",
            "description": "The type of refund. Amount and line items cannot both be specified in the request.",
            "enum": [
              "amount",
              "line_items"
            ]
          },
          "amount": {
            "title": "Amount",
            "type": "number",
            "description": "The amount to be refunded. The amount will be split between the line items.\nIf no amount is specified, it will default to refunding the total refundable amount on the invoice.\n",
            "format": "float"
          },
          "line_items": {
            "title": "Line items",
            "type": "array",
            "description": "The line items to be refunded. This is required when `type=line_items`.",
            "items": {
              "$ref": "#/components/schemas/LineItemRefund"
            }
          },
          "refund_method": {
            "title": "Refund method",
            "type": "string",
            "description": "Indicates how the invoice should be refunded when both a credit and transaction are present on the invoice:\n- `transaction_first` â€“ Refunds the transaction first, then any amount is issued as credit back to the account. Default value when Credit Invoices feature is enabled.\n- `credit_first` â€“ Issues credit back to the account first, then refunds any remaining amount back to the transaction. Default value when Credit Invoices feature is not enabled.\n- `all_credit` â€“ Issues credit to the account for the entire amount of the refund. Only available when the Credit Invoices feature is enabled.\n- `all_transaction` â€“ Refunds the entire amount back to transactions, using transactions from previous invoices if necessary. Only available when the Credit Invoices feature is enabled.\n",
            "default": "credit_first",
            "enum": [
              "transaction_first",
              "credit_first",
              "all_credit",
              "all_transaction"
            ]
          },
          "credit_customer_notes": {
            "title": "Credit customer notes",
            "type": "string",
            "description": "Used as the Customer Notes on the credit invoice.\n\nThis field can only be include when the Credit Invoices feature is enabled.\n"
          },
          "external_refund": {
            "$ref": "#/components/schemas/InvoiceRefund_external_refund"
          }
        }
      },
      "LineItem": {
        "title": "Line item",
        "type": "object",
        "properties": {
          "id": {
            "title": "Line item ID",
            "maxLength": 13,
            "type": "string"
          },
          "object": {
            "title": "Object type",
            "type": "string"
          },
          "uuid": {
            "title": "UUID",
            "maxLength": 32,
            "type": "string",
            "description": "The UUID is useful for matching data with the CSV exports and building URLs into Recurly's UI."
          },
          "type": {
            "title": "Line item type",
            "type": "string",
            "description": "Charges are positive line items that debit the account. Credits are negative line items that credit the account.",
            "enum": [
              "charge",
              "credit"
            ]
          },
          "item_code": {
            "title": "Item Code",
            "maxLength": 50,
            "pattern": "/^[a-z0-9_+-]+$/",
            "type": "string",
            "description": "Unique code to identify an item. Available when the Credit Invoices and Subscription Billing Terms features are enabled."
          },
          "item_id": {
            "title": "Item ID",
            "maxLength": 13,
            "type": "string",
            "description": "System-generated unique identifier for an item. Available when the Credit Invoices and Subscription Billing Terms features are enabled."
          },
          "external_sku": {
            "title": "External SKU",
            "maxLength": 50,
            "type": "string",
            "description": "Optional Stock Keeping Unit assigned to an item. Available when the Credit Invoices and Subscription Billing Terms features are enabled."
          },
          "revenue_schedule_type": {
            "title": "Revenue schedule type",
            "type": "string",
            "enum": [
              "never",
              "evenly",
              "at_range_end",
              "at_range_start",
              "at_invoice"
            ]
          },
          "state": {
            "title": "Current state of the line item",
            "type": "string",
            "description": "Pending line items are charges or credits on an account that have not been applied to an invoice yet. Invoiced line items will always have an `invoice_id` value.",
            "enum": [
              "pending",
              "invoiced"
            ]
          },
          "legacy_category": {
            "title": "Legacy category",
            "type": "string",
            "description": "Category to describe the role of a line item on a legacy invoice:\n- \"charges\" refers to charges being billed for on this invoice.\n- \"credits\" refers to refund or proration credits. This portion of the invoice can be considered a credit memo.\n- \"applied_credits\" refers to previous credits applied to this invoice. See their original_line_item_id to determine where the credit first originated.\n- \"carryforwards\" can be ignored. They exist to consume any remaining credit balance. A new credit with the same amount will be created and placed back on the account.\n",
            "enum": [
              "charge",
              "credit",
              "applied_credit",
              "carryforward"
            ]
          },
          "account": {
            "$ref": "#/components/schemas/AccountMini"
          },
          "subscription_id": {
            "title": "Subscription ID",
            "maxLength": 13,
            "type": "string",
            "description": "If the line item is a charge or credit for a subscription, this is its ID."
          },
          "plan_id": {
            "title": "Plan ID",
            "maxLength": 13,
            "type": "string",
            "description": "If the line item is a charge or credit for a plan or add-on, this is the plan's ID."
          },
          "plan_code": {
            "title": "Plan code",
            "maxLength": 50,
            "type": "string",
            "description": "If the line item is a charge or credit for a plan or add-on, this is the plan's code."
          },
          "add_on_id": {
            "title": "Add-on ID",
            "maxLength": 13,
            "type": "string",
            "description": "If the line item is a charge or credit for an add-on this is its ID."
          },
          "add_on_code": {
            "title": "Add-on code",
            "maxLength": 50,
            "type": "string",
            "description": "If the line item is a charge or credit for an add-on, this is its code."
          },
          "invoice_id": {
            "title": "Invoice ID",
            "maxLength": 13,
            "type": "string",
            "description": "Once the line item has been invoiced this will be the invoice's ID."
          },
          "invoice_number": {
            "title": "Invoice number",
            "type": "string",
            "description": "Once the line item has been invoiced this will be the invoice's number. If VAT taxation and the Country Invoice Sequencing feature are enabled, invoices will have country-specific invoice numbers for invoices billed to EU countries (ex: FR1001). Non-EU invoices will continue to use the site-level invoice number sequence."
          },
          "previous_line_item_id": {
            "title": "Previous line item ID",
            "maxLength": 13,
            "type": "string",
            "description": "Will only have a value if the line item is a credit created from a previous credit, or if the credit was created from a charge refund."
          },
          "original_line_item_invoice_id": {
            "title": "Original line item's invoice ID",
            "maxLength": 13,
            "type": "string",
            "description": "The invoice where the credit originated. Will only have a value if the line item is a credit created from a previous credit, or if the credit was created from a charge refund."
          },
          "origin": {
            "title": "Origin of line item",
            "type": "string",
            "description": "A credit created from an original charge will have the value of the charge's origin.",
            "enum": [
              "plan",
              "plan_trial",
              "setup_fee",
              "add_on_trial",
              "add_on",
              "debit",
              "one_time",
              "credit",
              "coupon",
              "carryforward"
            ]
          },
          "accounting_code": {
            "title": "Accounting code",
            "maxLength": 20,
            "type": "string",
            "description": "Internal accounting code to help you reconcile your revenue to the correct ledger. Line items created as part of a subscription invoice will use the plan or add-on's accounting code, otherwise the value will only be present if you define an accounting code when creating the line item."
          },
          "product_code": {
            "title": "Product code",
            "maxLength": 50,
            "type": "string",
            "description": "For plan-related line items this will be the plan's code, for add-on related line items it will be the add-on's code. For item-related line items it will be the item's `external_sku`."
          },
          "credit_reason_code": {
            "title": "Credit reason code",
            "type": "string",
            "description": "The reason the credit was given when line item is `type=credit`.",
            "default": "general",
            "enum": [
              "general",
              "service",
              "promotional",
              "refund",
              "gift_card",
              "write_off"
            ]
          },
          "currency": {
            "title": "Currency",
            "maxLength": 3,
            "type": "string",
            "description": "3-letter ISO 4217 currency code."
          },
          "amount": {
            "title": "Total after discounts and taxes",
            "type": "number",
            "description": "`(quantity * unit_amount) - (discount + tax)`",
            "format": "float"
          },
          "description": {
            "title": "Description",
            "maxLength": 255,
            "type": "string",
            "description": "Description that appears on the invoice. For subscription related items this will be filled in automatically."
          },
          "quantity": {
            "title": "Quantity",
            "type": "integer",
            "description": "This number will be multiplied by the unit amount to compute the subtotal before any discounts or taxes.",
            "default": 1
          },
          "unit_amount": {
            "title": "Unit amount",
            "type": "number",
            "description": "Positive amount for a charge, negative amount for a credit.",
            "format": "float"
          },
          "subtotal": {
            "title": "Total before discounts and taxes",
            "type": "number",
            "description": "`quantity * unit_amount`",
            "format": "float"
          },
          "discount": {
            "title": "Discount",
            "type": "number",
            "description": "The discount applied to the line item.",
            "format": "float"
          },
          "tax": {
            "title": "Tax",
            "type": "number",
            "description": "The tax amount for the line item.",
            "format": "float"
          },
          "taxable": {
            "title": "Taxable?",
            "type": "boolean",
            "description": "`true` if the line item is taxable, `false` if it is not."
          },
          "tax_exempt": {
            "title": "Tax exempt?",
            "type": "boolean",
            "description": "`true` exempts tax on charges, `false` applies tax on charges. If not defined, then defaults to the Plan and Site settings. This attribute does not work for credits (negative line items). Credits are always applied post-tax. Pre-tax discounts should use the Coupons feature."
          },
          "tax_code": {
            "title": "Tax code",
            "maxLength": 50,
            "type": "string",
            "description": "Used by Avalara, Vertex, and Recurlyâ€™s EU VAT tax feature. The tax code values are specific to each tax system. If you are using Recurlyâ€™s EU VAT feature you can use `unknown`, `physical`, or `digital`."
          },
          "tax_info": {
            "$ref": "#/components/schemas/TaxInfo"
          },
          "proration_rate": {
            "title": "Proration rate",
            "maximum": 1,
            "minimum": 0,
            "type": "number",
            "description": "When a line item has been prorated, this is the rate of the proration. Proration rates were made available for line items created after March 30, 2017. For line items created prior to that date, the proration rate will be `null`, even if the line item was prorated.",
            "format": "float"
          },
          "refund": {
            "title": "Refund?",
            "type": "boolean"
          },
          "refunded_quantity": {
            "title": "Refunded Quantity",
            "type": "integer",
            "description": "For refund charges, the quantity being refunded. For non-refund charges, the total quantity refunded (possibly over multiple refunds)."
          },
          "credit_applied": {
            "title": "Credit Applied",
            "type": "number",
            "description": "The amount of credit from this line item that was applied to the invoice.",
            "format": "float"
          },
          "shipping_address": {
            "$ref": "#/components/schemas/ShippingAddress"
          },
          "start_date": {
            "title": "Start date",
            "type": "string",
            "description": "If an end date is present, this is value indicates the beginning of a billing time range. If no end date is present it indicates billing for a specific date.",
            "format": "date-time"
          },
          "end_date": {
            "title": "End date",
            "type": "string",
            "description": "If this date is provided, it indicates the end of a time range.",
            "format": "date-time"
          },
          "created_at": {
            "title": "Created at",
            "type": "string",
            "description": "When the line item was created.",
            "format": "date-time"
          },
          "updated_at": {
            "title": "Last updated at",
            "type": "string",
            "description": "When the line item was last changed.",
            "format": "date-time"
          }
        }
      },
      "LineItemRefund": {
        "type": "object",
        "properties": {
          "id": {
            "title": "Line item ID",
            "maxLength": 13,
            "type": "string"
          },
          "quantity": {
            "title": "Quantity",
            "type": "integer",
            "description": "Line item quantity to be refunded."
          },
          "prorate": {
            "title": "Prorate",
            "type": "boolean",
            "description": "Set to `true` if the line item should be prorated; set to `false` if not.\nThis can only be used on line items that have a start and end date.\n",
            "default": false
          }
        }
      },
      "LineItemCreate": {
        "required": [
          "currency",
          "type",
          "unit_amount"
        ],
        "type": "object",
        "properties": {
          "currency": {
            "title": "Currency",
            "maxLength": 3,
            "type": "string",
            "description": "3-letter ISO 4217 currency code. If `item_code`/`item_id` is part of the request then `currency` is optional, if the site has a single default currency. `currency` is required if `item_code`/`item_id` is present, and there are multiple currencies defined on the site. If `item_code`/`item_id` is not present `currency` is required."
          },
          "unit_amount": {
            "title": "Unit amount",
            "type": "number",
            "description": "A positive or negative amount with `type=charge` will result in a positive `unit_amount`.\nA positive or negative amount with `type=credit` will result in a negative `unit_amount`.\nIf `item_code`/`item_id` is present, `unit_amount` can be passed in, to override the `Item`'s\n`unit_amount`. If `item_code`/`item_id` is not present then `unit_amount` is required.\n",
            "format": "float"
          },
          "quantity": {
            "title": "Quantity",
            "type": "integer",
            "description": "This number will be multiplied by the unit amount to compute the subtotal before any discounts or taxes.",
            "default": 1
          },
          "description": {
            "title": "Description",
            "maxLength": 255,
            "type": "string",
            "description": "Description that appears on the invoice. If `item_code`/`item_id` is part of the request then `description` must be absent."
          },
          "item_code": {
            "title": "Item Code",
            "maxLength": 50,
            "pattern": "/^[a-z0-9_+-]+$/",
            "type": "string",
            "description": "Unique code to identify an item. Avaliable when the Credit Invoices and Subscription Billing Terms features are enabled."
          },
          "item_id": {
            "title": "Item ID",
            "maxLength": 13,
            "type": "string",
            "description": "System-generated unique identifier for an item. Available when the Credit Invoices and Subscription Billing Terms features are enabled."
          },
          "revenue_schedule_type": {
            "title": "Revenue schedule type",
            "type": "string",
            "enum": [
              "never",
              "evenly",
              "at_range_end",
              "at_range_start",
              "at_invoice"
            ]
          },
          "type": {
            "title": "Type",
            "type": "string",
            "description": "Line item type. If `item_code`/`item_id` is present then `type` should not be present. If `item_code`/`item_id` is not present then `type` is required.",
            "enum": [
              "charge",
              "credit"
            ]
          },
          "credit_reason_code": {
            "title": "Credit reason code",
            "type": "string",
            "description": "The reason the credit was given when line item is `type=credit`. When the Credit Invoices feature is enabled, the value can be set and will default to `general`. When the Credit Invoices feature is not enabled, the value will always be `null`.",
            "default": "general",
            "enum": [
              "general",
              "service",
              "promotional"
            ]
          },
          "accounting_code": {
            "title": "Accounting Code",
            "maxLength": 20,
            "pattern": "/^[a-z0-9_+-]+$/",
            "type": "string",
            "description": "Accounting Code for the `LineItem`. If `item_code`/`item_id` is part of the request then `accounting_code` must be absent."
          },
          "tax_exempt": {
            "title": "Tax exempt?",
            "type": "boolean",
            "description": "`true` exempts tax on charges, `false` applies tax on charges. If not defined, then defaults to the Plan and Site settings. This attribute does not work for credits (negative line items). Credits are always applied post-tax. Pre-tax discounts should use the Coupons feature."
          },
          "tax_code": {
            "title": "Tax code",
            "maxLength": 50,
            "type": "string",
            "description": "Optional field used by Avalara, Vertex, and Recurly's EU VAT tax feature to determine taxation rules. If you have your own AvaTax or Vertex account configured, use their tax codes to assign specific tax rules. If you are using Recurly's EU VAT feature, you can use values of `unknown`, `physical`, or `digital`."
          },
          "product_code": {
            "title": "Product code",
            "maxLength": 50,
            "type": "string",
            "description": "Optional field to track a product code or SKU for the line item. This can be used to later reporting on product purchases. For Vertex tax calculations, this field will be used as the Vertex `product` field. If `item_code`/`item_id` is part of the request then `product_code` must be absent."
          },
          "origin": {
            "title": "Origin",
            "type": "string",
            "description": "Only allowed if the Gift Cards feature is enabled on your site and `type` is `credit`. Can only have a value of `external_gift_card`. Set this value in order to track gift card credits from external gift cards (like InComm). It also skips billing information requirements.",
            "enum": [
              "external_gift_card"
            ]
          },
          "start_date": {
            "title": "Start date",
            "type": "string",
            "description": "If an end date is present, this is value indicates the beginning of a billing time range. If no end date is present it indicates billing for a specific date. Defaults to the current date-time.",
            "format": "date-time"
          },
          "end_date": {
            "title": "End date",
            "type": "string",
            "description": "If this date is provided, it indicates the end of a time range.",
            "format": "date-time"
          }
        }
      },
      "PlanMini": {
        "title": "Plan mini details",
        "type": "object",
        "properties": {
          "id": {
            "title": "Plan ID",
            "maxLength": 13,
            "type": "string",
            "readOnly": true
          },
          "object": {
            "title": "Object type",
            "type": "string",
            "readOnly": true
          },
          "code": {
            "title": "Plan code",
            "maxLength": 50,
            "pattern": "/^[a-z0-9_+-]+$/i",
            "type": "string",
            "description": "Unique code to identify the plan. This is used in Hosted Payment Page URLs and in the invoice exports."
          },
          "name": {
            "title": "Name",
            "maxLength": 255,
            "type": "string",
            "description": "This name describes your plan and will appear on the Hosted Payment Page and the subscriber's invoice."
          }
        },
        "description": "Just the important parts."
      },
      "Plan": {
        "required": [
          "code",
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "Plan ID",
            "maxLength": 13,
            "type": "string",
            "readOnly": true
          },
          "object": {
            "title": "Object type",
            "type": "string",
            "readOnly": true
          },
          "code": {
            "title": "Plan code",
            "maxLength": 50,
            "pattern": "/^[a-z0-9_+-]+$/i",
            "type": "string",
            "description": "Unique code to identify the plan. This is used in Hosted Payment Page URLs and in the invoice exports."
          },
          "state": {
            "title": "State",
            "type": "string",
            "description": "The current state of the plan.",
            "readOnly": true,
            "enum": [
              "active",
              "inactive"
            ]
          },
          "name": {
            "title": "Name",
            "maxLength": 255,
            "type": "string",
            "description": "This name describes your plan and will appear on the Hosted Payment Page and the subscriber's invoice."
          },
          "description": {
            "title": "Description",
            "type": "string",
            "description": "Optional description, not displayed."
          },
          "interval_unit": {
            "title": "Interval unit",
            "type": "string",
            "description": "Unit for the plan's billing interval.",
            "default": "months",
            "enum": [
              "days",
              "months"
            ]
          },
          "interval_length": {
            "title": "Interval length",
            "minimum": 1,
            "type": "integer",
            "description": "Length of the plan's billing interval in `interval_unit`.",
            "default": 1
          },
          "trial_unit": {
            "title": "Trial unit",
            "type": "string",
            "description": "Units for the plan's trial period.",
            "default": "months",
            "enum": [
              "days",
              "months"
            ]
          },
          "trial_length": {
            "title": "Trial length",
            "minimum": 0,
            "type": "integer",
            "description": "Length of plan's trial period in `trial_units`. `0` means `no trial`.",
            "default": 0
          },
          "trial_requires_billing_info": {
            "title": "Trial Requires BillingInfo",
            "type": "boolean",
            "description": "Allow free trial subscriptions to be created without billing info."
          },
          "total_billing_cycles": {
            "title": "Total billing cycles",
            "minimum": 0,
            "type": "integer",
            "description": "Automatically terminate subscriptions after a defined number of billing cycles. Number of billing cycles before the plan automatically stops renewing, defaults to `null` for continuous, automatic renewal."
          },
          "auto_renew": {
            "title": "Auto renew",
            "type": "boolean",
            "description": "Subscriptions will automatically inherit this value once they are active. If `auto_renew` is `true`, then a subscription will automatically renew its term at renewal. If `auto_renew` is `false`, then a subscription will expire at the end of its term. `auto_renew` can be overridden on the subscription record itself.",
            "default": true
          },
          "accounting_code": {
            "title": "Plan accounting code",
            "maxLength": 20,
            "pattern": "/^[a-z0-9_+-]+$/",
            "type": "string",
            "description": "Accounting code for invoice line items for the plan. If no value is provided, it defaults to plan's code."
          },
          "revenue_schedule_type": {
            "title": "Revenue schedule type",
            "type": "string",
            "enum": [
              "never",
              "evenly",
              "at_range_end",
              "at_range_start"
            ]
          },
          "setup_fee_revenue_schedule_type": {
            "title": "Setup fee revenue schedule type",
            "type": "string",
            "enum": [
              "never",
              "evenly",
              "at_range_end",
              "at_range_start"
            ]
          },
          "setup_fee_accounting_code": {
            "title": "Setup fee accounting code",
            "maxLength": 20,
            "pattern": "/^[a-z0-9_+-]+$/",
            "type": "string",
            "description": "Accounting code for invoice line items for the plan's setup fee. If no value is provided, it defaults to plan's accounting code."
          },
          "tax_code": {
            "title": "Tax code",
            "maxLength": 50,
            "type": "string",
            "description": "Used by Avalara, Vertex, and Recurlyâ€™s EU VAT tax feature. The tax code values are specific to each tax system. If you are using Recurlyâ€™s EU VAT feature you can use `unknown`, `physical`, or `digital`."
          },
          "tax_exempt": {
            "title": "Tax exempt?",
            "type": "boolean",
            "description": "`true` exempts tax on the plan, `false` applies tax on the plan."
          },
          "currencies": {
            "title": "Pricing",
            "minItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PlanPricing"
            }
          },
          "hosted_pages": {
            "$ref": "#/components/schemas/PlanHostedPages"
          },
          "allow_any_item_on_subscriptions": {
            "title": "Allow any item on subscriptions",
            "type": "boolean",
            "description": "Used to determine whether items can be assigned as add-ons to individual subscriptions.\nIf `true`, items can be assigned as add-ons to individual subscription add-ons.\nIf `false`, only plan add-ons can be used.\n"
          },
          "created_at": {
            "title": "Created at",
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "updated_at": {
            "title": "Last updated at",
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "deleted_at": {
            "title": "Deleted at",
            "type": "string",
            "format": "date-time",
            "readOnly": true
          }
        },
        "description": "Full plan details."
      },
      "PlanCreate": {
        "required": [
          "code",
          "currencies",
          "name"
        ],
        "type": "object",
        "properties": {
          "code": {
            "title": "Plan code",
            "maxLength": 50,
            "pattern": "/^[a-z0-9_+-]+$/i",
            "type": "string",
            "description": "Unique code to identify the plan. This is used in Hosted Payment Page URLs and in the invoice exports."
          },
          "name": {
            "title": "Name",
            "maxLength": 255,
            "type": "string",
            "description": "This name describes your plan and will appear on the Hosted Payment Page and the subscriber's invoice."
          },
          "description": {
            "title": "Description",
            "type": "string",
            "description": "Optional description, not displayed."
          },
          "accounting_code": {
            "title": "Plan accounting code",
            "maxLength": 20,
            "pattern": "/^[a-z0-9_+-]+$/",
            "type": "string",
            "description": "Accounting code for invoice line items for the plan. If no value is provided, it defaults to plan's code."
          },
          "interval_unit": {
            "title": "Interval unit",
            "type": "string",
            "description": "Unit for the plan's billing interval.",
            "default": "months",
            "enum": [
              "days",
              "months"
            ]
          },
          "interval_length": {
            "title": "Interval length",
            "minimum": 1,
            "type": "integer",
            "description": "Length of the plan's billing interval in `interval_unit`.",
            "default": 1
          },
          "trial_unit": {
            "title": "Trial unit",
            "type": "string",
            "description": "Units for the plan's trial period.",
            "default": "months",
            "enum": [
              "days",
              "months"
            ]
          },
          "trial_length": {
            "title": "Trial length",
            "minimum": 0,
            "type": "integer",
            "description": "Length of plan's trial period in `trial_units`. `0` means `no trial`.",
            "default": 0
          },
          "trial_requires_billing_info": {
            "title": "Trial Requires BillingInfo",
            "type": "boolean",
            "description": "Allow free trial subscriptions to be created without billing info. Should not be used if billing info is needed for initial invoice due to existing uninvoiced charges or setup fee.",
            "default": true
          },
          "total_billing_cycles": {
            "title": "Total billing cycles",
            "minimum": 0,
            "type": "integer",
            "description": "Automatically terminate plans after a defined number of billing cycles."
          },
          "auto_renew": {
            "title": "Auto renew",
            "type": "boolean",
            "description": "Subscriptions will automatically inherit this value once they are active. If `auto_renew` is `true`, then a subscription will automatically renew its term at renewal. If `auto_renew` is `false`, then a subscription will expire at the end of its term. `auto_renew` can be overridden on the subscription record itself.",
            "default": true
          },
          "revenue_schedule_type": {
            "title": "Revenue schedule type",
            "type": "string",
            "enum": [
              "never",
              "evenly",
              "at_range_end",
              "at_range_start"
            ]
          },
          "setup_fee_revenue_schedule_type": {
            "title": "Setup fee revenue schedule type",
            "type": "string",
            "enum": [
              "never",
              "evenly",
              "at_range_end",
              "at_range_start"
            ]
          },
          "setup_fee_accounting_code": {
            "title": "Setup fee accounting code",
            "maxLength": 20,
            "pattern": "/^[a-z0-9_+-]+$/",
            "type": "string",
            "description": "Accounting code for invoice line items for the plan's setup fee. If no value is provided, it defaults to plan's accounting code."
          },
          "tax_code": {
            "title": "Tax code",
            "maxLength": 50,
            "type": "string",
            "description": "Optional field used by Avalara, Vertex, and Recurly's EU VAT tax feature to determine taxation rules. If you have your own AvaTax or Vertex account configured, use their tax codes to assign specific tax rules. If you are using Recurly's EU VAT feature, you can use values of `unknown`, `physical`, or `digital`."
          },
          "tax_exempt": {
            "title": "Tax exempt?",
            "type": "boolean",
            "description": "`true` exempts tax on the plan, `false` applies tax on the plan."
          },
          "currencies": {
            "title": "Pricing",
            "minItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PlanPricing"
            }
          },
          "hosted_pages": {
            "$ref": "#/components/schemas/PlanHostedPages"
          },
          "add_ons": {
            "title": "Add Ons",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AddOnCreate"
            }
          },
          "allow_any_item_on_subscriptions": {
            "title": "Allow any item on subscriptions",
            "type": "boolean",
            "description": "Used to determine whether items can be assigned as add-ons to individual subscriptions.\nIf `true`, items can be assigned as add-ons to individual subscription add-ons.\nIf `false`, only plan add-ons can be used.\n",
            "default": false
          }
        }
      },
      "PlanHostedPages": {
        "type": "object",
        "properties": {
          "success_url": {
            "title": "Success redirect URL",
            "type": "string",
            "description": "URL to redirect to after signup on the hosted payment pages."
          },
          "cancel_url": {
            "title": "Cancel redirect URL (deprecated)",
            "type": "string",
            "description": "URL to redirect to on canceled signup on the hosted payment pages."
          },
          "bypass_confirmation": {
            "title": "Bypass confirmation page?",
            "type": "boolean",
            "description": "If `true`, the customer will be sent directly to your `success_url` after a successful signup, bypassing Recurly's hosted confirmation page."
          },
          "display_quantity": {
            "title": "Display quantity?",
            "type": "boolean",
            "description": "Determines if the quantity field is displayed on the hosted pages for the plan."
          }
        }
      },
      "PlanPricing": {
        "type": "object",
        "properties": {
          "currency": {
            "title": "Currency",
            "maxLength": 3,
            "type": "string",
            "description": "3-letter ISO 4217 currency code."
          },
          "setup_fee": {
            "title": "Setup fee",
            "maximum": 100000,
            "minimum": 0,
            "type": "number",
            "description": "Amount of one-time setup fee automatically charged at the beginning of a subscription billing cycle. For subscription plans with a trial, the setup fee will be charged at the time of signup. Setup fees do not increase with the quantity of a subscription plan.",
            "format": "float"
          },
          "unit_amount": {
            "title": "Unit price",
            "maximum": 100000,
            "minimum": 0,
            "type": "number",
            "format": "float"
          }
        }
      },
      "PlanUpdate": {
        "type": "object",
        "properties": {
          "id": {
            "title": "Plan ID",
            "maxLength": 13,
            "type": "string",
            "readOnly": true
          },
          "code": {
            "title": "Plan code",
            "maxLength": 50,
            "pattern": "/^[a-z0-9_+-]+$/i",
            "type": "string",
            "description": "Unique code to identify the plan. This is used in Hosted Payment Page URLs and in the invoice exports."
          },
          "name": {
            "title": "Name",
            "maxLength": 255,
            "type": "string",
            "description": "This name describes your plan and will appear on the Hosted Payment Page and the subscriber's invoice."
          },
          "description": {
            "title": "Description",
            "type": "string",
            "description": "Optional description, not displayed."
          },
          "accounting_code": {
            "title": "Plan accounting code",
            "maxLength": 20,
            "pattern": "/^[a-z0-9_+-]+$/",
            "type": "string",
            "description": "Accounting code for invoice line items for the plan. If no value is provided, it defaults to plan's code."
          },
          "trial_unit": {
            "title": "Trial unit",
            "type": "string",
            "description": "Units for the plan's trial period.",
            "default": "months",
            "enum": [
              "days",
              "months"
            ]
          },
          "trial_length": {
            "title": "Trial length",
            "minimum": 0,
            "type": "integer",
            "description": "Length of plan's trial period in `trial_units`. `0` means `no trial`.",
            "default": 0
          },
          "trial_requires_billing_info": {
            "title": "Trial Requires BillingInfo",
            "type": "boolean",
            "description": "Allow free trial subscriptions to be created without billing info. Should not be used if billing info is needed for initial invoice due to existing uninvoiced charges or setup fee.",
            "default": true
          },
          "total_billing_cycles": {
            "title": "Total billing cycles",
            "minimum": 0,
            "type": "integer",
            "description": "Automatically terminate plans after a defined number of billing cycles."
          },
          "auto_renew": {
            "title": "Auto renew",
            "type": "boolean",
            "description": "Subscriptions will automatically inherit this value once they are active. If `auto_renew` is `true`, then a subscription will automatically renew its term at renewal. If `auto_renew` is `false`, then a subscription will expire at the end of its term. `auto_renew` can be overridden on the subscription record itself.",
            "default": true
          },
          "revenue_schedule_type": {
            "title": "Revenue schedule type",
            "type": "string",
            "enum": [
              "never",
              "evenly",
              "at_range_end",
              "at_range_start"
            ]
          },
          "setup_fee_revenue_schedule_type": {
            "title": "Setup fee revenue schedule type",
            "type": "string",
            "enum": [
              "never",
              "evenly",
              "at_range_end",
              "at_range_start"
            ]
          },
          "setup_fee_accounting_code": {
            "title": "Setup fee accounting code",
            "maxLength": 20,
            "pattern": "/^[a-z0-9_+-]+$/",
            "type": "string",
            "description": "Accounting code for invoice line items for the plan's setup fee. If no value is provided, it defaults to plan's accounting code."
          },
          "tax_code": {
            "title": "Tax code",
            "maxLength": 50,
            "type": "string",
            "description": "Optional field used by Avalara, Vertex, and Recurly's EU VAT tax feature to determine taxation rules. If you have your own AvaTax or Vertex account configured, use their tax codes to assign specific tax rules. If you are using Recurly's EU VAT feature, you can use values of `unknown`, `physical`, or `digital`."
          },
          "tax_exempt": {
            "title": "Tax exempt?",
            "type": "boolean",
            "description": "`true` exempts tax on the plan, `false` applies tax on the plan."
          },
          "currencies": {
            "title": "Pricing",
            "minItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PlanPricing"
            }
          },
          "hosted_pages": {
            "$ref": "#/components/schemas/PlanHostedPages"
          },
          "add_ons": {
            "title": "Add Ons",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AddOnCreate"
            }
          },
          "allow_any_item_on_subscriptions": {
            "title": "Allow any item on subscriptions",
            "type": "boolean",
            "description": "Used to determine whether items can be assigned as add-ons to individual subscriptions.\nIf `true`, items can be assigned as add-ons to individual subscription add-ons.\nIf `false`, only plan add-ons can be used.\n"
          }
        }
      },
      "AddOnPricing": {
        "required": [
          "currency",
          "unit_amount"
        ],
        "type": "object",
        "properties": {
          "currency": {
            "title": "Currency",
            "maxLength": 3,
            "type": "string",
            "description": "3-letter ISO 4217 currency code."
          },
          "unit_amount": {
            "title": "Unit price",
            "maximum": 100000,
            "minimum": 0,
            "type": "number",
            "format": "float"
          }
        }
      },
      "Pricing": {
        "required": [
          "currency",
          "unit_amount"
        ],
        "type": "object",
        "properties": {
          "currency": {
            "title": "Currency",
            "maxLength": 3,
            "type": "string",
            "description": "3-letter ISO 4217 currency code."
          },
          "unit_amount": {
            "title": "Unit price",
            "maximum": 100000,
            "minimum": 0,
            "type": "number",
            "format": "float"
          }
        }
      },
      "Tier": {
        "required": [
          "currencies"
        ],
        "type": "object",
        "properties": {
          "ending_quantity": {
            "title": "Ending quantity",
            "maximum": 999999999,
            "minimum": 1,
            "type": "integer",
            "default": 999999999
          },
          "currencies": {
            "title": "Tier pricing",
            "minItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Pricing"
            }
          }
        }
      },
      "Settings": {
        "type": "object",
        "properties": {
          "billing_address_requirement": {
            "type": "string",
            "description": "- full:      Full Address (Street, City, State, Postal Code and Country)\n- streetzip: Street and Postal Code only\n- zip:       Postal Code only\n- none:      No Address\n",
            "readOnly": true,
            "enum": [
              "full",
              "streetzip",
              "zip",
              "none"
            ]
          },
          "accepted_currencies": {
            "type": "array",
            "readOnly": true,
            "items": {
              "type": "string",
              "description": "3-letter ISO 4217 currency code."
            }
          },
          "default_currency": {
            "type": "string",
            "description": "The default 3-letter ISO 4217 currency code.",
            "readOnly": true
          }
        }
      },
      "ShippingAddress": {
        "type": "object",
        "properties": {
          "id": {
            "title": "Shipping Address ID",
            "maxLength": 13,
            "type": "string",
            "readOnly": true
          },
          "object": {
            "title": "Object type",
            "type": "string",
            "readOnly": true
          },
          "account_id": {
            "title": "Account ID",
            "maxLength": 13,
            "type": "string",
            "readOnly": true
          },
          "nickname": {
            "maxLength": 255,
            "type": "string"
          },
          "first_name": {
            "maxLength": 255,
            "type": "string"
          },
          "last_name": {
            "maxLength": 255,
            "type": "string"
          },
          "company": {
            "maxLength": 255,
            "type": "string"
          },
          "email": {
            "maxLength": 255,
            "type": "string"
          },
          "vat_number": {
            "maxLength": 20,
            "type": "string"
          },
          "phone": {
            "maxLength": 30,
            "type": "string"
          },
          "street1": {
            "maxLength": 255,
            "type": "string"
          },
          "street2": {
            "maxLength": 255,
            "type": "string"
          },
          "city": {
            "maxLength": 255,
            "type": "string"
          },
          "region": {
            "maxLength": 255,
            "type": "string",
            "description": "State or province."
          },
          "postal_code": {
            "maxLength": 20,
            "type": "string",
            "description": "Zip or postal code."
          },
          "country": {
            "maxLength": 50,
            "type": "string",
            "description": "Country, 2-letter ISO code."
          },
          "created_at": {
            "title": "Created at",
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "updated_at": {
            "title": "Updated at",
            "type": "string",
            "format": "date-time",
            "readOnly": true
          }
        }
      },
      "ShippingAddressCreate": {
        "required": [
          "city",
          "country",
          "first_name",
          "last_name",
          "postal_code",
          "street1"
        ],
        "type": "object",
        "properties": {
          "nickname": {
            "maxLength": 255,
            "type": "string"
          },
          "first_name": {
            "maxLength": 255,
            "type": "string"
          },
          "last_name": {
            "maxLength": 255,
            "type": "string"
          },
          "company": {
            "maxLength": 255,
            "type": "string"
          },
          "email": {
            "maxLength": 255,
            "type": "string"
          },
          "vat_number": {
            "maxLength": 20,
            "type": "string"
          },
          "phone": {
            "maxLength": 30,
            "type": "string"
          },
          "street1": {
            "maxLength": 255,
            "type": "string"
          },
          "street2": {
            "maxLength": 255,
            "type": "string"
          },
          "city": {
            "maxLength": 255,
            "type": "string"
          },
          "region": {
            "maxLength": 255,
            "type": "string",
            "description": "State or province."
          },
          "postal_code": {
            "maxLength": 20,
            "type": "string",
            "description": "Zip or postal code."
          },
          "country": {
            "maxLength": 50,
            "type": "string",
            "description": "Country, 2-letter ISO code."
          }
        }
      },
      "ShippingAddressList": {
        "type": "object",
        "properties": {
          "object": {
            "title": "Object type",
            "type": "string",
            "description": "Will always be List."
          },
          "has_more": {
            "type": "boolean",
            "description": "Indicates there are more results on subsequent pages."
          },
          "next": {
            "type": "string",
            "description": "Path to subsequent page of results."
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ShippingAddress"
            }
          }
        }
      },
      "ShippingMethod": {
        "type": "object",
        "properties": {
          "id": {
            "title": "Shipping Method ID",
            "maxLength": 13,
            "type": "string",
            "readOnly": true
          },
          "object": {
            "title": "Object type",
            "type": "string",
            "readOnly": true
          },
          "code": {
            "title": "Code",
            "maxLength": 50,
            "type": "string",
            "description": "The internal name used identify the shipping method."
          },
          "name": {
            "title": "Name",
            "maxLength": 100,
            "type": "string",
            "description": "The name of the shipping method displayed to customers."
          },
          "accounting_code": {
            "title": "Accounting Code",
            "maxLength": 20,
            "type": "string",
            "description": "Accounting code for shipping method."
          },
          "tax_code": {
            "title": "Tax code",
            "maxLength": 50,
            "type": "string",
            "description": "Used by Avalara, Vertex, and Recurlyâ€™s built-in tax feature. The tax\ncode values are specific to each tax system. If you are using Recurlyâ€™s\nbuilt-in taxes the values are:\n\n- `FR` â€“ Common Carrier FOB Destination\n- `FR022000` â€“ Common Carrier FOB Origin\n- `FR020400` â€“ Non Common Carrier FOB Destination\n- `FR020500` â€“ Non Common Carrier FOB Origin\n- `FR010100` â€“ Delivery by Company Vehicle Before Passage of Title\n- `FR010200` â€“ Delivery by Company Vehicle After Passage of Title\n- `NT` â€“ Non-Taxable\n"
          },
          "created_at": {
            "title": "Created at",
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "updated_at": {
            "title": "Last updated at",
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "deleted_at": {
            "title": "Deleted at",
            "type": "string",
            "format": "date-time",
            "readOnly": true
          }
        }
      },
      "ShippingMethodMini": {
        "type": "object",
        "properties": {
          "id": {
            "title": "Shipping Method ID",
            "maxLength": 13,
            "type": "string",
            "readOnly": true
          },
          "object": {
            "title": "Object type",
            "type": "string",
            "readOnly": true
          },
          "code": {
            "title": "Code",
            "maxLength": 50,
            "type": "string",
            "description": "The internal name used identify the shipping method."
          },
          "name": {
            "title": "Name",
            "maxLength": 100,
            "type": "string",
            "description": "The name of the shipping method displayed to customers."
          }
        }
      },
      "ShippingMethodCreate": {
        "required": [
          "code",
          "name"
        ],
        "type": "object",
        "properties": {
          "code": {
            "title": "Code",
            "maxLength": 50,
            "pattern": "/^[a-z0-9_+-]+$/i",
            "type": "string",
            "description": "The internal name used identify the shipping method."
          },
          "name": {
            "title": "Name",
            "maxLength": 100,
            "type": "string",
            "description": "The name of the shipping method displayed to customers."
          },
          "accounting_code": {
            "title": "Accounting Code",
            "maxLength": 20,
            "type": "string",
            "description": "Accounting code for shipping method."
          },
          "tax_code": {
            "title": "Tax code",
            "maxLength": 50,
            "type": "string",
            "description": "Used by Avalara, Vertex, and Recurlyâ€™s built-in tax feature. The tax\ncode values are specific to each tax system. If you are using Recurlyâ€™s\nbuilt-in taxes the values are:\n\n- `FR` â€“ Common Carrier FOB Destination\n- `FR022000` â€“ Common Carrier FOB Origin\n- `FR020400` â€“ Non Common Carrier FOB Destination\n- `FR020500` â€“ Non Common Carrier FOB Origin\n- `FR010100` â€“ Delivery by Company Vehicle Before Passage of Title\n- `FR010200` â€“ Delivery by Company Vehicle After Passage of Title\n- `NT` â€“ Non-Taxable\n"
          }
        }
      },
      "ShippingMethodUpdate": {
        "type": "object",
        "properties": {
          "code": {
            "title": "Code",
            "maxLength": 50,
            "pattern": "/^[a-z0-9_+-]+$/i",
            "type": "string",
            "description": "The internal name used identify the shipping method."
          },
          "name": {
            "title": "Name",
            "maxLength": 100,
            "type": "string",
            "description": "The name of the shipping method displayed to customers."
          },
          "accounting_code": {
            "title": "Accounting Code",
            "maxLength": 20,
            "type": "string",
            "description": "Accounting code for shipping method."
          },
          "tax_code": {
            "title": "Tax code",
            "maxLength": 50,
            "type": "string",
            "description": "Used by Avalara, Vertex, and Recurlyâ€™s built-in tax feature. The tax\ncode values are specific to each tax system. If you are using Recurlyâ€™s\nbuilt-in taxes the values are:\n\n- `FR` â€“ Common Carrier FOB Destination\n- `FR022000` â€“ Common Carrier FOB Origin\n- `FR020400` â€“ Non Common Carrier FOB Destination\n- `FR020500` â€“ Non Common Carrier FOB Origin\n- `FR010100` â€“ Delivery by Company Vehicle Before Passage of Title\n- `FR010200` â€“ Delivery by Company Vehicle After Passage of Title\n- `NT` â€“ Non-Taxable\n"
          }
        }
      },
      "ShippingFeeCreate": {
        "type": "object",
        "properties": {
          "method_id": {
            "title": "Method ID",
            "maxLength": 13,
            "type": "string",
            "description": "The id of the shipping method used to deliver the purchase. If `method_id` and `method_code` are both present, `method_id` will be used."
          },
          "method_code": {
            "title": "Method Code",
            "maxLength": 50,
            "type": "string",
            "description": "The code of the shipping method used to deliver the purchase. If `method_id` and `method_code` are both present, `method_id` will be used."
          },
          "amount": {
            "title": "Amount",
            "minimum": 0,
            "type": "number",
            "description": "This is priced in the purchase's currency.",
            "format": "float"
          }
        }
      },
      "ShippingAddressUpdate": {
        "type": "object",
        "properties": {
          "id": {
            "title": "Shipping Address ID",
            "maxLength": 13,
            "type": "string",
            "readOnly": true
          },
          "nickname": {
            "maxLength": 255,
            "type": "string"
          },
          "first_name": {
            "maxLength": 255,
            "type": "string"
          },
          "last_name": {
            "maxLength": 255,
            "type": "string"
          },
          "company": {
            "maxLength": 255,
            "type": "string"
          },
          "email": {
            "maxLength": 255,
            "type": "string"
          },
          "vat_number": {
            "maxLength": 20,
            "type": "string"
          },
          "phone": {
            "maxLength": 30,
            "type": "string"
          },
          "street1": {
            "maxLength": 255,
            "type": "string"
          },
          "street2": {
            "maxLength": 255,
            "type": "string"
          },
          "city": {
            "maxLength": 255,
            "type": "string"
          },
          "region": {
            "maxLength": 255,
            "type": "string",
            "description": "State or province."
          },
          "postal_code": {
            "maxLength": 20,
            "type": "string",
            "description": "Zip or postal code."
          },
          "country": {
            "maxLength": 50,
            "type": "string",
            "description": "Country, 2-letter ISO code."
          }
        }
      },
      "Site": {
        "type": "object",
        "properties": {
          "id": {
            "title": "Site ID",
            "maxLength": 13,
            "type": "string",
            "readOnly": true
          },
          "object": {
            "title": "Object type",
            "type": "string",
            "readOnly": true
          },
          "subdomain": {
            "maxLength": 100,
            "type": "string",
            "readOnly": true
          },
          "public_api_key": {
            "title": "Public API Key",
            "maxLength": 50,
            "type": "string",
            "description": "This value is used to configure RecurlyJS to submit tokenized billing information.",
            "readOnly": true
          },
          "mode": {
            "title": "Mode",
            "maxLength": 15,
            "type": "string",
            "readOnly": true,
            "enum": [
              "development",
              "production",
              "sandbox"
            ]
          },
          "address": {
            "$ref": "#/components/schemas/Address"
          },
          "settings": {
            "$ref": "#/components/schemas/Settings"
          },
          "features": {
            "title": "Features",
            "type": "array",
            "description": "A list of features enabled for the site.",
            "items": {
              "type": "string",
              "readOnly": true,
              "enum": [
                "credit_memos",
                "manual_invoicing",
                "only_bill_what_changed",
                "subscription_terms"
              ]
            }
          },
          "created_at": {
            "title": "Created at",
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "updated_at": {
            "title": "Updated at",
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "deleted_at": {
            "title": "Deleted at",
            "type": "string",
            "format": "date-time",
            "readOnly": true
          }
        }
      },
      "Subscription": {
        "type": "object",
        "properties": {
          "id": {
            "title": "Subscription ID",
            "maxLength": 13,
            "type": "string"
          },
          "object": {
            "title": "Object type",
            "type": "string"
          },
          "uuid": {
            "title": "UUID",
            "maxLength": 32,
            "type": "string",
            "description": "The UUID is useful for matching data with the CSV exports and building URLs into Recurly's UI."
          },
          "account": {
            "$ref": "#/components/schemas/AccountMini"
          },
          "plan": {
            "$ref": "#/components/schemas/PlanMini"
          },
          "state": {
            "title": "State",
            "type": "string",
            "enum": [
              "active",
              "canceled",
              "expired",
              "failed",
              "future",
              "paused"
            ]
          },
          "shipping": {
            "$ref": "#/components/schemas/SubscriptionShipping"
          },
          "coupon_redemptions": {
            "title": "Coupon redemptions",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CouponRedemptionMini"
            }
          },
          "pending_change": {
            "$ref": "#/components/schemas/SubscriptionChange"
          },
          "current_period_started_at": {
            "title": "Current billing period started at",
            "type": "string",
            "format": "date-time"
          },
          "current_period_ends_at": {
            "title": "Current billing period ends at",
            "type": "string",
            "format": "date-time"
          },
          "current_term_started_at": {
            "title": "Current term started at",
            "type": "string",
            "description": "The start date of the term when the first billing period starts. The subscription term is the length of time that a customer will be committed to a subscription. A term can span multiple billing periods.",
            "format": "date-time"
          },
          "current_term_ends_at": {
            "title": "Current term ends at",
            "type": "string",
            "description": "When the term ends. This is calculated by a plan's interval and `total_billing_cycles` in a term. Subscription changes with a `timeframe=renewal` will be applied on this date.",
            "format": "date-time"
          },
          "trial_started_at": {
            "title": "Trial period started at",
            "type": "string",
            "format": "date-time"
          },
          "trial_ends_at": {
            "title": "Trial period ends at",
            "type": "string",
            "format": "date-time"
          },
          "remaining_billing_cycles": {
            "title": "Remaining billing cycles",
            "type": "integer",
            "description": "The remaining billing cycles in the current term."
          },
          "total_billing_cycles": {
            "title": "Total billing cycles",
            "type": "integer",
            "description": "The number of cycles/billing periods in a term. When `remaining_billing_cycles=0`, if `auto_renew=true` the subscription will renew and a new term will begin, otherwise the subscription will expire."
          },
          "renewal_billing_cycles": {
            "title": "Renewal billing cycles",
            "type": "integer",
            "description": "If `auto_renew=true`, when a term completes, `total_billing_cycles` takes this value as the length of subsequent terms. Defaults to the plan's `total_billing_cycles`."
          },
          "auto_renew": {
            "title": "Auto renew",
            "type": "boolean",
            "description": "Whether the subscription renews at the end of its term.",
            "default": true
          },
          "paused_at": {
            "title": "Paused at",
            "type": "string",
            "description": "Null unless subscription is paused or will pause at the end of the current billing period.",
            "format": "date-time"
          },
          "remaining_pause_cycles": {
            "title": "Remaining pause cycles",
            "type": "integer",
            "description": "Null unless subscription is paused or will pause at the end of the current billing period."
          },
          "currency": {
            "title": "Currency",
            "maxLength": 3,
            "type": "string",
            "description": "3-letter ISO 4217 currency code."
          },
          "revenue_schedule_type": {
            "title": "Revenue schedule type",
            "type": "string",
            "enum": [
              "never",
              "evenly",
              "at_range_end",
              "at_range_start"
            ]
          },
          "unit_amount": {
            "title": "Subscription unit price",
            "type": "number",
            "format": "float"
          },
          "quantity": {
            "title": "Subscription quantity",
            "minimum": 0,
            "type": "integer"
          },
          "add_ons": {
            "title": "Add-ons",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SubscriptionAddOn"
            }
          },
          "add_ons_total": {
            "title": "Total price of add-ons",
            "minimum": 0,
            "type": "number",
            "format": "float"
          },
          "subtotal": {
            "title": "Estimated total, before tax.",
            "minimum": 0,
            "type": "number",
            "format": "float"
          },
          "collection_method": {
            "title": "Collection method",
            "type": "string",
            "default": "automatic",
            "enum": [
              "automatic",
              "manual"
            ]
          },
          "po_number": {
            "title": "Purchase order number",
            "maxLength": 50,
            "type": "string",
            "description": "For manual invoicing, this identifies the PO number associated with the subscription."
          },
          "net_terms": {
            "title": "Net terms",
            "minimum": 0,
            "type": "integer",
            "description": "Integer representing the number of days after an invoice's creation that the invoice will become past due. If an invoice's net terms are set to '0', it is due 'On Receipt' and will become past due 24 hours after itâ€™s created. If an invoice is due net 30, it will become past due at 31 days exactly.",
            "default": 0
          },
          "terms_and_conditions": {
            "title": "Terms and conditions",
            "type": "string"
          },
          "customer_notes": {
            "title": "Customer notes",
            "type": "string"
          },
          "expiration_reason": {
            "title": "Expiration reason",
            "type": "string"
          },
          "custom_fields": {
            "$ref": "#/components/schemas/CustomFields"
          },
          "created_at": {
            "title": "Created at",
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "title": "Last updated at",
            "type": "string",
            "format": "date-time"
          },
          "activated_at": {
            "title": "Activated at",
            "type": "string",
            "format": "date-time"
          },
          "canceled_at": {
            "title": "Canceled at",
            "type": "string",
            "format": "date-time"
          },
          "expires_at": {
            "title": "Expires at",
            "type": "string",
            "format": "date-time"
          },
          "bank_account_authorized_at": {
            "title": "Bank account authorized",
            "type": "string",
            "description": "Recurring subscriptions paid with ACH will have this attribute set. This timestamp is used for alerting customers to reauthorize in 3 years in accordance with NACHA rules. If a subscription becomes inactive or the billing info is no longer a bank account, this timestamp is cleared.",
            "format": "date-time"
          }
        }
      },
      "SubscriptionAddOn": {
        "title": "Subscription Add-on",
        "type": "object",
        "properties": {
          "id": {
            "title": "Subscription Add-on ID",
            "maxLength": 13,
            "type": "string"
          },
          "object": {
            "title": "Object type",
            "type": "string"
          },
          "subscription_id": {
            "title": "Subscription ID",
            "maxLength": 13,
            "type": "string"
          },
          "add_on": {
            "$ref": "#/components/schemas/AddOnMini"
          },
          "add_on_source": {
            "title": "Add-on source",
            "type": "string",
            "description": "Used to determine where the associated add-on data is pulled from. If this value is set to\n`plan_add_on` or left blank, then add-on data will be pulled from the plan's add-ons. If the associated\n`plan` has `allow_any_item_on_subscriptions` set to `true` and this field is set to `item`, then\nthe associated add-on data will be pulled from the site's item catalog.\n",
            "default": "plan_add_on",
            "enum": [
              "plan_add_on",
              "item"
            ]
          },
          "quantity": {
            "title": "Add-on quantity",
            "minimum": 0,
            "type": "integer"
          },
          "unit_amount": {
            "title": "Add-on unit price",
            "type": "number",
            "description": "This is priced in the subscription's currency.",
            "format": "float"
          },
          "revenue_schedule_type": {
            "title": "Revenue schedule type",
            "type": "string",
            "enum": [
              "never",
              "evenly",
              "at_range_end",
              "at_range_start"
            ]
          },
          "tier_type": {
            "title": "Tier type",
            "type": "string",
            "description": "The type of tiering used by the Add-on.",
            "default": "flat",
            "enum": [
              "flat",
              "tiered",
              "stairstep",
              "volume"
            ]
          },
          "tiers": {
            "title": "Tiers",
            "minItems": 1,
            "type": "array",
            "description": "Empty unless `tier_type` is `tiered`, `volume`, or `stairstep`.",
            "items": {
              "$ref": "#/components/schemas/SubscriptionAddOnTier"
            }
          },
          "created_at": {
            "title": "Created at",
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "title": "Updated at",
            "type": "string",
            "format": "date-time"
          },
          "expired_at": {
            "title": "Expired at",
            "type": "string",
            "format": "date-time"
          }
        },
        "description": "This links an Add-on to a specific Subscription."
      },
      "SubscriptionAddOnCreate": {
        "required": [
          "code"
        ],
        "type": "object",
        "properties": {
          "code": {
            "title": "Add-on code",
            "maxLength": 50,
            "type": "string",
            "description": "If `add_on_source` is set to `plan_add_on` or left blank, then plan's add-on `code` should be used.\nIf `add_on_source` is set to `item`, then the `code` from the associated item should be used.\n"
          },
          "add_on_source": {
            "title": "Add-on source",
            "type": "string",
            "description": "Used to determine where the associated add-on data is pulled from. If this value is set to\n`plan_add_on` or left blank, then add_on data will be pulled from the plan's add-ons. If the associated\n`plan` has `allow_any_item_on_subscriptions` set to `true` and this field is set to `item`, then\nthe associated add-on data will be pulled from the site's item catalog.\n",
            "default": "plan_add_on",
            "enum": [
              "plan_add_on",
              "item"
            ]
          },
          "quantity": {
            "title": "Quantity",
            "minimum": 0,
            "type": "integer",
            "default": 1
          },
          "unit_amount": {
            "title": "Unit amount",
            "minimum": 0,
            "type": "number",
            "description": "* Optionally, override the add-on's default unit amount.\n* If the plan add-on's `tier_type` is `tiered`, `volume`, or `stairstep`, then `unit_amount` must be absent.\n",
            "format": "float"
          },
          "tiers": {
            "title": "Tiers",
            "minItems": 1,
            "type": "array",
            "description": "If the plan add-on's `tier_type` is `flat`, then `tiers` must be absent. The `tiers` object\nmust include one to many tiers with `ending_quantity` and `unit_amount`.\nThere must be one tier with an `ending_quantity` of 999999999 which is the\ndefault if not provided.\n",
            "items": {
              "$ref": "#/components/schemas/SubscriptionAddOnTier"
            }
          },
          "revenue_schedule_type": {
            "title": "Revenue schedule type",
            "type": "string",
            "enum": [
              "never",
              "evenly",
              "at_range_end",
              "at_range_start"
            ]
          }
        }
      },
      "SubscriptionAddOnUpdate": {
        "type": "object",
        "properties": {
          "id": {
            "title": "Subscription Add-on ID.",
            "maxLength": 13,
            "type": "string",
            "description": "When an id is provided, the existing subscription add-on attributes will\npersist unless overridden in the request.\n"
          },
          "code": {
            "title": "Add-on code",
            "maxLength": 50,
            "type": "string",
            "description": "If a code is provided without an id, the subscription add-on attributes\nwill be set to the current value for those attributes on the plan add-on\nunless provided in the request. If `add_on_source` is set to `plan_add_on`\nor left blank, then plan's add-on `code` should be used. If `add_on_source`\nis set to `item`, then the `code` from the associated item should be used.\n"
          },
          "add_on_source": {
            "title": "Add-on source",
            "type": "string",
            "description": "Used to determine where the associated add-on data is pulled from. If this value is set to\n`plan_add_on` or left blank, then add_on data will be pulled from the plan's add-ons. If the associated\n`plan` has `allow_any_item_on_subscriptions` set to `true` and this field is set to `item`, then\nthe associated add-on data will be pulled from the site's item catalog.\n",
            "default": "plan_add_on",
            "enum": [
              "plan_add_on",
              "item"
            ]
          },
          "quantity": {
            "title": "Quantity",
            "minimum": 0,
            "type": "integer"
          },
          "unit_amount": {
            "title": "Unit amount",
            "minimum": 0,
            "type": "number",
            "description": "Optionally, override the add-on's default unit amount.",
            "format": "float"
          },
          "tiers": {
            "title": "Tiers",
            "minItems": 1,
            "type": "array",
            "description": "If the plan add-on's `tier_type` is `flat`, then `tiers` must be absent. The `tiers` object\nmust include one to many tiers with `ending_quantity` and `unit_amount`.\nThere must be one tier with an `ending_quantity` of 999999999 which is the\ndefault if not provided.\n",
            "items": {
              "$ref": "#/components/schemas/SubscriptionAddOnTier"
            }
          },
          "revenue_schedule_type": {
            "title": "Revenue schedule type",
            "type": "string",
            "enum": [
              "never",
              "evenly",
              "at_range_end",
              "at_range_start"
            ]
          }
        }
      },
      "SubscriptionAddOnTier": {
        "type": "object",
        "properties": {
          "ending_quantity": {
            "title": "Ending quantity",
            "maximum": 999999999,
            "minimum": 1,
            "type": "integer",
            "default": 999999999
          },
          "unit_amount": {
            "title": "Unit amount",
            "minimum": 0,
            "type": "number",
            "format": "float"
          }
        }
      },
      "SubscriptionCancel": {
        "type": "object",
        "properties": {
          "timeframe": {
            "title": "Timeframe",
            "type": "string",
            "description": "The timeframe parameter controls when the expiration takes place. The `bill_date` timeframe causes the subscription to expire when the subscription is scheduled to bill next. The `term_end` timeframe causes the subscription to continue to bill until the end of the subscription term, then expire.",
            "default": "term_end",
            "enum": [
              "bill_date",
              "term_end"
            ]
          }
        }
      },
      "SubscriptionChange": {
        "title": "Subscription Change",
        "type": "object",
        "properties": {
          "id": {
            "title": "Subscription Change ID",
            "type": "string",
            "description": "The ID of the Subscription Change."
          },
          "object": {
            "title": "Object type",
            "type": "string"
          },
          "subscription_id": {
            "title": "Subscription ID",
            "maxLength": 13,
            "type": "string",
            "description": "The ID of the subscription that is going to be changed."
          },
          "plan": {
            "$ref": "#/components/schemas/PlanMini"
          },
          "add_ons": {
            "title": "Add-ons",
            "type": "array",
            "description": "These add-ons will be used when the subscription renews.",
            "items": {
              "$ref": "#/components/schemas/SubscriptionAddOn"
            }
          },
          "unit_amount": {
            "title": "Unit amount",
            "type": "number",
            "format": "float"
          },
          "quantity": {
            "title": "Subscription quantity",
            "type": "integer"
          },
          "shipping": {
            "$ref": "#/components/schemas/SubscriptionShipping"
          },
          "activate_at": {
            "title": "Activated at",
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "activated": {
            "title": "Activated?",
            "type": "boolean",
            "description": "Returns `true` if the subscription change is activated."
          },
          "revenue_schedule_type": {
            "title": "Revenue schedule type",
            "type": "string",
            "enum": [
              "never",
              "evenly",
              "at_range_end",
              "at_range_start"
            ]
          },
          "setup_fee_revenue_schedule_type": {
            "title": "Setup fee revenue schedule type",
            "type": "string",
            "enum": [
              "never",
              "evenly",
              "at_range_end",
              "at_range_start"
            ]
          },
          "created_at": {
            "title": "Created at",
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "updated_at": {
            "title": "Updated at",
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "deleted_at": {
            "title": "Deleted at",
            "type": "string",
            "format": "date-time",
            "readOnly": true
          }
        }
      },
      "SubscriptionChangeCreate": {
        "type": "object",
        "properties": {
          "timeframe": {
            "title": "Timeframe",
            "type": "string",
            "description": "The timeframe parameter controls when the upgrade or downgrade takes place. The subscription change can occur now, when the subscription is next billed, or when the subscription term ends. Generally, if you're performing an upgrade, you will want the change to occur immediately (now). If you're performing a downgrade, you should set the timeframe to `term_end` or `bill_date` so the change takes effect at a scheduled billing date. The `renewal` timeframe option is accepted as an alias for `term_end`.",
            "default": "now",
            "enum": [
              "now",
              "bill_date",
              "term_end",
              "renewal"
            ]
          },
          "plan_id": {
            "title": "Plan ID",
            "maxLength": 13,
            "type": "string",
            "description": "If you want to change to a new plan, you can provide the plan's code or id. If both are provided the `plan_id` will be used."
          },
          "plan_code": {
            "title": "New plan code",
            "maxLength": 50,
            "type": "string",
            "description": "If you want to change to a new plan, you can provide the plan's code or id. If both are provided the `plan_id` will be used."
          },
          "unit_amount": {
            "title": "Custom subscription price",
            "maximum": 100000,
            "minimum": 0,
            "type": "number",
            "description": "Optionally, sets custom pricing for the subscription, overriding the plan's default unit amount. The subscription's current currency will be used.",
            "format": "float"
          },
          "quantity": {
            "title": "Quantity",
            "minimum": 0,
            "type": "integer",
            "description": "Optionally override the default quantity of 1.",
            "default": 1
          },
          "shipping": {
            "$ref": "#/components/schemas/SubscriptionChangeShippingCreate"
          },
          "coupon_codes": {
            "title": "Coupon codes",
            "type": "array",
            "description": "A list of coupon_codes to be redeemed on the subscription during the change. Only allowed if timeframe is now and you change something about the subscription that creates an invoice.",
            "items": {
              "type": "string"
            }
          },
          "add_ons": {
            "title": "Add-ons",
            "type": "array",
            "description": "If you provide a value for this field it will replace any\nexisting add-ons. So, when adding or modifying an add-on, you need to\ninclude the existing subscription add-ons. Unchanged add-ons can be included\njust using the subscription add-on's ID: `{\"id\": \"abc123\"}`.\n\nIf a subscription add-on's `code` is supplied without the `id`,\n`{\"code\": \"def456\"}`, the subscription add-on attributes will be set to the\ncurrent values of the plan add-on unless provided in the request.\n\n- If an `id` is passed, any attributes not passed in will pull from the\n  existing subscription add-on\n- If a `code` is passed, any attributes not passed in will pull from the\n  current values of the plan add-on\n- Attributes passed in as part of the request will override either of the\n  above scenarios\n",
            "items": {
              "$ref": "#/components/schemas/SubscriptionAddOnUpdate"
            }
          },
          "collection_method": {
            "title": "Collection method",
            "type": "string",
            "default": "automatic",
            "enum": [
              "automatic",
              "manual"
            ]
          },
          "revenue_schedule_type": {
            "title": "Revenue schedule type",
            "type": "string",
            "enum": [
              "never",
              "evenly",
              "at_range_end",
              "at_range_start"
            ]
          },
          "po_number": {
            "title": "Purchase order number",
            "maxLength": 50,
            "type": "string",
            "description": "For manual invoicing, this identifies the PO number associated with the subscription."
          },
          "net_terms": {
            "title": "Net terms",
            "minimum": 0,
            "type": "integer",
            "description": "Integer representing the number of days after an invoice's creation that the invoice will become past due. If an invoice's net terms are set to '0', it is due 'On Receipt' and will become past due 24 hours after itâ€™s created. If an invoice is due net 30, it will become past due at 31 days exactly.",
            "default": 0
          },
          "transaction_type": {
            "type": "string",
            "description": "An optional type designation for the payment gateway transaction created by this request. Supports 'moto' value, which is the acronym for mail order and telephone transactions.",
            "enum": [
              "moto"
            ]
          }
        }
      },
      "SubscriptionChangePreview": {
        "type": "object",
        "properties": {
          "invoice_collection": {
            "$ref": "#/components/schemas/InvoiceCollection"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/SubscriptionChange"
          }
        ]
      },
      "SubscriptionChangeShippingCreate": {
        "title": "Shipping details that will be changed on a subscription",
        "type": "object",
        "properties": {
          "method_id": {
            "title": "Method ID",
            "maxLength": 13,
            "type": "string",
            "description": "The id of the shipping method used to deliver the subscription. To remove shipping set this to `null` and the `amount=0`. If `method_id` and `method_code` are both present, `method_id` will be used."
          },
          "method_code": {
            "title": "Method Code",
            "maxLength": 50,
            "type": "string",
            "description": "The code of the shipping method used to deliver the subscription. To remove shipping set this to `null` and the `amount=0`. If `method_id` and `method_code` are both present, `method_id` will be used."
          },
          "amount": {
            "title": "Assigns the subscription's shipping cost. If this is greater than zero then a `method_id` or `method_code` is required.",
            "type": "number",
            "format": "float"
          }
        },
        "description": "The shipping address can currently only be changed immediately, using SubscriptionUpdate."
      },
      "SubscriptionCreate": {
        "required": [
          "account",
          "currency",
          "plan_code"
        ],
        "type": "object",
        "properties": {
          "plan_code": {
            "title": "Plan code",
            "maxLength": 50,
            "type": "string",
            "description": "You must provide either a `plan_code` or `plan_id`. If both are provided the `plan_id` will be used."
          },
          "plan_id": {
            "title": "Plan ID",
            "maxLength": 13,
            "type": "string",
            "description": "You must provide either a `plan_code` or `plan_id`. If both are provided the `plan_id` will be used."
          },
          "account": {
            "$ref": "#/components/schemas/AccountCreate"
          },
          "shipping": {
            "$ref": "#/components/schemas/SubscriptionShippingCreate"
          },
          "collection_method": {
            "title": "Collection method",
            "type": "string",
            "default": "automatic",
            "enum": [
              "automatic",
              "manual"
            ]
          },
          "currency": {
            "title": "Currency",
            "maxLength": 3,
            "type": "string",
            "description": "3-letter ISO 4217 currency code."
          },
          "unit_amount": {
            "title": "Custom subscription pricing",
            "maximum": 100000,
            "minimum": 0,
            "type": "number",
            "description": "Override the unit amount of the subscription plan by setting this value. If not provided, the subscription will inherit the price from the subscription plan for the provided currency.",
            "format": "float"
          },
          "quantity": {
            "title": "Quantity",
            "minimum": 0,
            "type": "integer",
            "description": "Optionally override the default quantity of 1.",
            "default": 1
          },
          "add_ons": {
            "title": "Add-ons",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SubscriptionAddOnCreate"
            }
          },
          "coupon_code": {
            "title": "Redeem a coupon and discount the subscription",
            "type": "string",
            "description": "Optional coupon code to redeem on the account and discount the subscription. Please note, the subscription request will fail if the coupon is invalid."
          },
          "custom_fields": {
            "$ref": "#/components/schemas/CustomFields"
          },
          "trial_ends_at": {
            "title": "Trial ends at",
            "type": "string",
            "description": "If set, overrides the default trial behavior for the subscription. The date must be in the future.",
            "format": "date-time"
          },
          "starts_at": {
            "title": "Start date",
            "type": "string",
            "description": "If set, the subscription will begin in the future on this date. The subscription will apply the setup fee and trial period, unless the plan has no trial.",
            "format": "date-time"
          },
          "next_bill_date": {
            "title": "Next bill date",
            "type": "string",
            "description": "If present, this sets the date the subscription's next billing period will start (`current_period_ends_at`). This can be used to align the subscriptionâ€™s billing to a specific day of the month. The initial invoice will be prorated for the period between the subscription's activation date and the billing period end date. Subsequent periods will be based off the plan interval. For a subscription with a trial period, this will change when the trial expires.",
            "format": "date-time"
          },
          "total_billing_cycles": {
            "title": "Total billing cycles",
            "minimum": 1,
            "type": "integer",
            "description": "The number of cycles/billing periods in a term. When `remaining_billing_cycles=0`, if `auto_renew=true` the subscription will renew and a new term will begin, otherwise the subscription will expire."
          },
          "renewal_billing_cycles": {
            "title": "Renewal billing cycles",
            "type": "integer",
            "description": "If `auto_renew=true`, when a term completes, `total_billing_cycles` takes this value as the length of subsequent terms. Defaults to the plan's `total_billing_cycles`."
          },
          "auto_renew": {
            "title": "Auto renew",
            "type": "boolean",
            "description": "Whether the subscription renews at the end of its term.",
            "default": true
          },
          "revenue_schedule_type": {
            "title": "Revenue schedule type",
            "type": "string",
            "enum": [
              "never",
              "evenly",
              "at_range_end",
              "at_range_start"
            ]
          },
          "terms_and_conditions": {
            "title": "Terms and conditions",
            "type": "string",
            "description": "This will default to the Terms and Conditions text specified on the Invoice Settings page in your Recurly admin. Specify custom notes to add or override Terms and Conditions. Custom notes will stay with a subscription on all renewals."
          },
          "customer_notes": {
            "title": "Customer notes",
            "type": "string",
            "description": "This will default to the Customer Notes text specified on the Invoice Settings. Specify custom notes to add or override Customer Notes. Custom notes will stay with a subscription on all renewals."
          },
          "credit_customer_notes": {
            "title": "Credit customer notes",
            "type": "string",
            "description": "If there are pending credits on the account that will be invoiced during the subscription creation, these will be used as the Customer Notes on the credit invoice."
          },
          "po_number": {
            "title": "Purchase order number",
            "maxLength": 50,
            "type": "string",
            "description": "For manual invoicing, this identifies the PO number associated with the subscription."
          },
          "net_terms": {
            "title": "Net terms",
            "minimum": 0,
            "type": "integer",
            "description": "Integer representing the number of days after an invoice's creation that the invoice will become past due. If an invoice's net terms are set to '0', it is due 'On Receipt' and will become past due 24 hours after itâ€™s created. If an invoice is due net 30, it will become past due at 31 days exactly.",
            "default": 0
          },
          "transaction_type": {
            "type": "string",
            "description": "An optional type designation for the payment gateway transaction created by this request. Supports 'moto' value, which is the acronym for mail order and telephone transactions.",
            "enum": [
              "moto"
            ]
          }
        }
      },
      "SubscriptionPurchase": {
        "required": [
          "plan_code"
        ],
        "type": "object",
        "properties": {
          "plan_code": {
            "title": "Plan code",
            "type": "string"
          },
          "plan_id": {
            "title": "Plan ID",
            "maxLength": 13,
            "type": "string"
          },
          "unit_amount": {
            "title": "Custom subscription pricing",
            "maximum": 100000,
            "minimum": 0,
            "type": "number",
            "description": "Override the unit amount of the subscription plan by setting this value in cents. If not provided, the subscription will inherit the price from the subscription plan for the provided currency.",
            "format": "float"
          },
          "quantity": {
            "title": "Quantity",
            "minimum": 0,
            "type": "integer",
            "description": "Optionally override the default quantity of 1.",
            "default": 1
          },
          "add_ons": {
            "title": "Add-ons",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SubscriptionAddOnCreate"
            }
          },
          "custom_fields": {
            "$ref": "#/components/schemas/CustomFields"
          },
          "shipping": {
            "$ref": "#/components/schemas/SubscriptionShippingPurchase"
          },
          "trial_ends_at": {
            "title": "Trial ends at",
            "type": "string",
            "description": "If set, overrides the default trial behavior for the subscription. The date must be in the future.",
            "format": "date-time"
          },
          "next_bill_date": {
            "title": "Next bill date",
            "type": "string",
            "description": "If present, this sets the date the subscription's next billing period will start (`current_period_ends_at`). This can be used to align the subscriptionâ€™s billing to a specific day of the month. The initial invoice will be prorated for the period between the subscription's activation date and the billing period end date. Subsequent periods will be based off the plan interval. For a subscription with a trial period, this will change when the trial expires.",
            "format": "date-time"
          },
          "total_billing_cycles": {
            "title": "Total billing cycles",
            "minimum": 1,
            "type": "integer",
            "description": "The number of cycles/billing periods in a term. When `remaining_billing_cycles=0`, if `auto_renew=true` the subscription will renew and a new term will begin, otherwise the subscription will expire."
          },
          "renewal_billing_cycles": {
            "title": "Renewal billing cycles",
            "type": "integer",
            "description": "If `auto_renew=true`, when a term completes, `total_billing_cycles` takes this value as the length of subsequent terms. Defaults to the plan's `total_billing_cycles`."
          },
          "auto_renew": {
            "title": "Auto renew",
            "type": "boolean",
            "description": "Whether the subscription renews at the end of its term.",
            "default": true
          },
          "revenue_schedule_type": {
            "title": "Revenue schedule type",
            "type": "string",
            "enum": [
              "never",
              "evenly",
              "at_range_end",
              "at_range_start"
            ]
          }
        }
      },
      "SubscriptionUpdate": {
        "type": "object",
        "properties": {
          "collection_method": {
            "title": "Change collection method",
            "type": "string",
            "enum": [
              "automatic",
              "manual"
            ]
          },
          "custom_fields": {
            "$ref": "#/components/schemas/CustomFields"
          },
          "remaining_billing_cycles": {
            "title": "Remaining billing cycles",
            "type": "integer",
            "description": "The remaining billing cycles in the current term."
          },
          "renewal_billing_cycles": {
            "title": "Renewal billing cycles",
            "type": "integer",
            "description": "If `auto_renew=true`, when a term completes, `total_billing_cycles` takes this value as the length of subsequent terms. Defaults to the plan's `total_billing_cycles`."
          },
          "auto_renew": {
            "title": "Auto renew",
            "type": "boolean",
            "description": "Whether the subscription renews at the end of its term.",
            "default": true
          },
          "next_bill_date": {
            "title": "Next bill date",
            "type": "string",
            "description": "If present, this sets the date the subscription's next billing period will start (`current_period_ends_at`). This can be used to align the subscriptionâ€™s billing to a specific day of the month. For a subscription in a trial period, this will change when the trial expires. This parameter is useful for postponement of a subscription to change its billing date without proration.",
            "format": "date-time"
          },
          "revenue_schedule_type": {
            "title": "Revenue schedule type",
            "type": "string",
            "enum": [
              "never",
              "evenly",
              "at_range_end",
              "at_range_start"
            ]
          },
          "terms_and_conditions": {
            "title": "Terms and conditions",
            "type": "string",
            "description": "Specify custom notes to add or override Terms and Conditions. Custom notes will stay with a subscription on all renewals."
          },
          "customer_notes": {
            "title": "Customer notes",
            "type": "string",
            "description": "Specify custom notes to add or override Customer Notes. Custom notes will stay with a subscription on all renewals."
          },
          "po_number": {
            "title": "Purchase order number",
            "maxLength": 50,
            "type": "string",
            "description": "For manual invoicing, this identifies the PO number associated with the subscription."
          },
          "net_terms": {
            "title": "Terms that the subscription is due on",
            "minimum": 0,
            "type": "integer",
            "description": "Integer representing the number of days after an invoice's creation that the invoice will become past due. If an invoice's net terms are set to '0', it is due 'On Receipt' and will become past due 24 hours after itâ€™s created. If an invoice is due net 30, it will become past due at 31 days exactly.",
            "default": 0
          },
          "shipping": {
            "$ref": "#/components/schemas/SubscriptionShippingUpdate"
          }
        }
      },
      "SubscriptionPause": {
        "required": [
          "remaining_pause_cycles"
        ],
        "type": "object",
        "properties": {
          "remaining_pause_cycles": {
            "title": "Remaining pause cycles",
            "type": "integer",
            "description": "Number of billing cycles to pause the subscriptions."
          }
        }
      },
      "SubscriptionShipping": {
        "title": "Subscription shipping details",
        "type": "object",
        "properties": {
          "object": {
            "title": "Object type",
            "type": "string"
          },
          "address": {
            "$ref": "#/components/schemas/ShippingAddress"
          },
          "method": {
            "$ref": "#/components/schemas/ShippingMethodMini"
          },
          "amount": {
            "title": "Subscription's shipping cost",
            "type": "number",
            "format": "float"
          }
        }
      },
      "SubscriptionShippingCreate": {
        "title": "Subscription shipping details",
        "type": "object",
        "properties": {
          "address": {
            "$ref": "#/components/schemas/ShippingAddressCreate"
          },
          "address_id": {
            "title": "Shipping address ID",
            "maxLength": 13,
            "type": "string",
            "description": "Assign a shipping address from the account's existing shipping addresses. If `address_id` and `address` are both present, `address` will be used."
          },
          "method_id": {
            "title": "Service ID",
            "maxLength": 13,
            "type": "string",
            "description": "The id of the shipping method used to deliver the subscription. If `method_id` and `method_code` are both present, `method_id` will be used."
          },
          "method_code": {
            "title": "Service Code",
            "maxLength": 50,
            "type": "string",
            "description": "The code of the shipping method used to deliver the subscription. If `method_id` and `method_code` are both present, `method_id` will be used."
          },
          "amount": {
            "title": "Assigns the subscription's shipping cost. If this is greater than zero then a `method_id` or `method_code` is required.",
            "type": "number",
            "format": "float"
          }
        }
      },
      "SubscriptionShippingUpdate": {
        "title": "Subscription shipping details",
        "type": "object",
        "properties": {
          "object": {
            "title": "Object type",
            "type": "string"
          },
          "address": {
            "$ref": "#/components/schemas/ShippingAddressCreate"
          },
          "address_id": {
            "title": "Shipping Address ID",
            "maxLength": 13,
            "type": "string",
            "description": "Assign a shipping address from the account's existing shipping addresses."
          }
        }
      },
      "SubscriptionShippingPurchase": {
        "title": "Subscription shipping details",
        "type": "object",
        "properties": {
          "method_id": {
            "title": "Service ID",
            "maxLength": 13,
            "type": "string",
            "description": "The id of the shipping method used to deliver the subscription. If `method_id` and `method_code` are both present, `method_id` will be used."
          },
          "method_code": {
            "title": "Service Code",
            "maxLength": 50,
            "type": "string",
            "description": "The code of the shipping method used to deliver the subscription. If `method_id` and `method_code` are both present, `method_id` will be used."
          },
          "amount": {
            "title": "Assigns the subscription's shipping cost. If this is greater than zero then a `method_id` or `method_code` is required.",
            "type": "number",
            "format": "float"
          }
        }
      },
      "TaxInfo": {
        "title": "Tax info",
        "type": "object",
        "properties": {
          "type": {
            "title": "Type",
            "type": "string",
            "description": "Provides the tax type as \"vat\" for EU VAT, \"usst\" for U.S. Sales Tax, or the 2 letter country code for country level tax types like Canada, Australia, New Zealand, Israel, and all non-EU European countries."
          },
          "region": {
            "title": "Region",
            "type": "string",
            "description": "Provides the tax region applied on an invoice. For U.S. Sales Tax, this will be the 2 letter state code. For EU VAT this will be the 2 letter country code. For all country level tax types, this will display the regional tax, like VAT, GST, or PST."
          },
          "rate": {
            "title": "Rate",
            "type": "number",
            "format": "float"
          }
        }
      },
      "Transaction": {
        "type": "object",
        "properties": {
          "id": {
            "title": "Transaction ID",
            "maxLength": 13,
            "type": "string"
          },
          "object": {
            "title": "Object type",
            "type": "string"
          },
          "uuid": {
            "title": "Recurly UUID",
            "maxLength": 32,
            "type": "string",
            "description": "The UUID is useful for matching data with the CSV exports and building URLs into Recurly's UI."
          },
          "original_transaction_id": {
            "title": "Original Transaction ID",
            "maxLength": 13,
            "type": "string",
            "description": "If this transaction is a refund (`type=refund`), this will be the ID of the original transaction on the invoice being refunded."
          },
          "account": {
            "$ref": "#/components/schemas/AccountMini"
          },
          "invoice": {
            "$ref": "#/components/schemas/InvoiceMini"
          },
          "voided_by_invoice": {
            "$ref": "#/components/schemas/InvoiceMini"
          },
          "subscription_ids": {
            "title": "Subscription IDs",
            "type": "array",
            "description": "If the transaction is charging or refunding for one or more subscriptions, these are their IDs.",
            "items": {
              "title": "Subscription ID",
              "maxLength": 13,
              "type": "string"
            }
          },
          "type": {
            "title": "Transaction type",
            "type": "string",
            "description": "- `authorization` â€“ verifies billing information and places a hold on money in the customer's account.\n- `capture` â€“ captures funds held by an authorization and completes a purchase.\n- `purchase` â€“ combines the authorization and capture in one transaction.\n- `refund` â€“ returns all or a portion of the money collected in a previous transaction to the customer.\n- `verify` â€“ a $0 or $1 transaction used to verify billing information which is immediately voided.\n",
            "enum": [
              "authorization",
              "capture",
              "purchase",
              "refund",
              "verify"
            ]
          },
          "origin": {
            "title": "Origin of transaction",
            "type": "string",
            "description": "Describes how the transaction was triggered.",
            "enum": [
              "api",
              "hpp",
              "merchant",
              "recurly_admin",
              "recurlyjs",
              "recurring",
              "transparent",
              "force_collect",
              "refunded_externally",
              "chargeback"
            ]
          },
          "currency": {
            "title": "Currency",
            "maxLength": 3,
            "type": "string",
            "description": "3-letter ISO 4217 currency code."
          },
          "amount": {
            "title": "Amount",
            "type": "number",
            "description": "Total transaction amount sent to the payment gateway.",
            "format": "float"
          },
          "status": {
            "title": "Transaction status",
            "type": "string",
            "description": "The current transaction status. Note that the status may change, e.g. a `pending` transaction may become `declined` or `success` may later become `void`.",
            "enum": [
              "pending",
              "scheduled",
              "processing",
              "success",
              "void",
              "declined",
              "error",
              "chargeback"
            ]
          },
          "success": {
            "title": "Success?",
            "type": "boolean",
            "description": "Did this transaction complete successfully?"
          },
          "refunded": {
            "title": "Refunded?",
            "type": "boolean",
            "description": "Indicates if part or all of this transaction was refunded."
          },
          "billing_address": {
            "$ref": "#/components/schemas/Address"
          },
          "collection_method": {
            "type": "string",
            "description": "The method by which the payment was collected.",
            "enum": [
              "automatic",
              "manual"
            ]
          },
          "payment_method": {
            "$ref": "#/components/schemas/PaymentMethod"
          },
          "ip_address_v4": {
            "title": "IP address",
            "type": "string",
            "description": "IP address provided when the billing information was collected:\n\n- When the customer enters billing information into the Recurly.js or Hosted Payment Pages, Recurly records the IP address.\n- When the merchant enters billing information using the API, the merchant may provide an IP address.\n- When the merchant enters billing information using the UI, no IP address is recorded.\n"
          },
          "ip_address_country": {
            "title": "IP address's country",
            "type": "string"
          },
          "status_code": {
            "title": "Status code",
            "type": "string"
          },
          "status_message": {
            "title": "Status message",
            "type": "string",
            "description": "For declined (`success=false`) transactions, the message displayed to the merchant."
          },
          "customer_message": {
            "title": "Customer message",
            "type": "string",
            "description": "For declined (`success=false`) transactions, the message displayed to the customer."
          },
          "customer_message_locale": {
            "title": "Language code for the message",
            "type": "string"
          },
          "payment_gateway": {
            "$ref": "#/components/schemas/Transaction_payment_gateway"
          },
          "gateway_message": {
            "title": "Gateway message",
            "type": "string",
            "description": "Transaction message from the payment gateway."
          },
          "gateway_reference": {
            "title": "Gateway reference",
            "type": "string",
            "description": "Transaction reference number from the payment gateway."
          },
          "gateway_approval_code": {
            "title": "Transaction approval code from the payment gateway.",
            "type": "string"
          },
          "gateway_response_code": {
            "title": "For declined transactions (`success=false`), this field lists the gateway error code.",
            "type": "string"
          },
          "gateway_response_time": {
            "title": "Gateway response time",
            "type": "number",
            "description": "Time, in seconds, for gateway to process the transaction.",
            "format": "float"
          },
          "gateway_response_values": {
            "title": "Gateway response values",
            "type": "object",
            "description": "The values in this field will vary from gateway to gateway."
          },
          "cvv_check": {
            "title": "CVV check",
            "type": "string",
            "description": "When processed, result from checking the CVV/CVC value on the transaction.",
            "enum": [
              "D",
              "I",
              "M",
              "N",
              "P",
              "S",
              "U",
              "X"
            ]
          },
          "avs_check": {
            "title": "AVS check",
            "type": "string",
            "description": "When processed, result from checking the overall AVS on the transaction.",
            "enum": [
              "A",
              "B",
              "C",
              "D",
              "E",
              "F",
              "G",
              "H",
              "I",
              "J",
              "K",
              "L",
              "M",
              "N",
              "O",
              "P",
              "Q",
              "R",
              "S",
              "T",
              "U",
              "V",
              "W",
              "X",
              "Y",
              "Z"
            ]
          },
          "created_at": {
            "title": "Created at",
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "title": "Updated at",
            "type": "string",
            "format": "date-time"
          },
          "voided_at": {
            "title": "Voided at",
            "type": "string",
            "format": "date-time"
          },
          "collected_at": {
            "title": "Collected at, or if not collected yet, the time the transaction was created.",
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "ExternalTransaction": {
        "type": "object",
        "properties": {
          "payment_method": {
            "title": "Payment Method",
            "type": "string",
            "description": "Payment method used for the external transaction.",
            "enum": [
              "credit_card",
              "paypal",
              "amazon",
              "roku",
              "ach",
              "apple_pay",
              "sepadirectdebit",
              "eft",
              "wire_transfer",
              "money_order",
              "check",
              "other"
            ]
          },
          "description": {
            "title": "Description",
            "maxLength": 50,
            "type": "string",
            "description": "Used as the transaction's description."
          },
          "amount": {
            "title": "Amount",
            "type": "number",
            "description": "The total amount of the transcaction. Cannot excceed the invoice total.",
            "format": "float"
          },
          "collected_at": {
            "title": "Collected At",
            "type": "string",
            "description": "Datetime that the external payment was collected. Defaults to current datetime.",
            "format": "date-time"
          }
        }
      },
      "UniqueCouponCode": {
        "type": "object",
        "properties": {
          "id": {
            "title": "Unique Coupon Code ID",
            "type": "string",
            "readOnly": true
          },
          "object": {
            "title": "Object type",
            "type": "string",
            "readOnly": true
          },
          "code": {
            "title": "Coupon code",
            "type": "string",
            "description": "The code the customer enters to redeem the coupon."
          },
          "state": {
            "title": "State",
            "type": "string",
            "description": "Indicates if the unique coupon code is redeemable or why not.",
            "enum": [
              "redeemable",
              "maxed_out",
              "expired",
              "inactive"
            ]
          },
          "created_at": {
            "title": "Created at",
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "updated_at": {
            "title": "Updated at",
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "redeemed_at": {
            "title": "Redeemed at",
            "type": "string",
            "description": "The date and time the unique coupon code was redeemed.",
            "format": "date-time",
            "readOnly": true
          },
          "expired_at": {
            "title": "Expired at",
            "type": "string",
            "description": "The date and time the coupon was expired early or reached its `max_redemptions`.",
            "format": "date-time"
          }
        }
      },
      "UniqueCouponCodeList": {
        "type": "object",
        "properties": {
          "object": {
            "title": "Object type",
            "type": "string",
            "description": "Will always be List."
          },
          "has_more": {
            "type": "boolean",
            "description": "Indicates there are more results on subsequent pages."
          },
          "next": {
            "type": "string",
            "description": "Path to subsequent page of results."
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UniqueCouponCode"
            }
          }
        }
      },
      "User": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "object": {
            "title": "Object type",
            "type": "string",
            "readOnly": true
          },
          "email": {
            "type": "string",
            "format": "email"
          },
          "first_name": {
            "type": "string"
          },
          "last_name": {
            "type": "string"
          },
          "time_zone": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "deleted_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          }
        }
      },
      "PurchaseCreate": {
        "required": [
          "account",
          "currency"
        ],
        "type": "object",
        "properties": {
          "currency": {
            "title": "Currency",
            "maxLength": 3,
            "type": "string",
            "description": "3-letter ISO 4217 currency code."
          },
          "account": {
            "$ref": "#/components/schemas/AccountPurchase"
          },
          "collection_method": {
            "title": "Collection method",
            "type": "string",
            "description": "Must be set to manual in order to preview a purchase for an Account that does not have payment information associated with the Billing Info.",
            "default": "automatic",
            "enum": [
              "automatic",
              "manual"
            ]
          },
          "po_number": {
            "title": "Purchase order number",
            "maxLength": 50,
            "type": "string",
            "description": "For manual invoicing, this identifies the PO number associated with the subscription."
          },
          "net_terms": {
            "title": "Net terms",
            "minimum": 0,
            "type": "integer",
            "description": "Integer representing the number of days after an invoice's creation that the invoice will become past due. If an invoice's net terms are set to '0', it is due 'On Receipt' and will become past due 24 hours after itâ€™s created. If an invoice is due net 30, it will become past due at 31 days exactly.",
            "default": 0
          },
          "terms_and_conditions": {
            "title": "Terms and conditions",
            "type": "string",
            "description": "Terms and conditions to be put on the purchase invoice."
          },
          "customer_notes": {
            "title": "Customer notes",
            "type": "string"
          },
          "vat_reverse_charge_notes": {
            "title": "VAT reverse charge notes",
            "type": "string",
            "description": "VAT reverse charge notes for cross border European tax settlement."
          },
          "credit_customer_notes": {
            "title": "Credit customer notes",
            "type": "string",
            "description": "Notes to be put on the credit invoice resulting from credits in the purchase, if any."
          },
          "gateway_code": {
            "title": "Gateway Code",
            "maxLength": 13,
            "type": "string",
            "description": "The default payment gateway identifier to be used for the purchase transaction.  This will also be applied as the default for any subscriptions included in the purchase request."
          },
          "shipping": {
            "$ref": "#/components/schemas/PurchaseCreate_shipping"
          },
          "line_items": {
            "title": "Line items",
            "type": "array",
            "description": "A list of one time charges or credits to be created with the purchase.",
            "items": {
              "$ref": "#/components/schemas/LineItemCreate"
            }
          },
          "subscriptions": {
            "title": "Subscriptions",
            "type": "array",
            "description": "A list of subscriptions to be created with the purchase.",
            "items": {
              "$ref": "#/components/schemas/SubscriptionPurchase"
            }
          },
          "coupon_codes": {
            "title": "Coupon codes",
            "type": "array",
            "description": "A list of coupon_codes to be redeemed on the subscription or account during the purchase.",
            "items": {
              "type": "string"
            }
          },
          "gift_card_redemption_code": {
            "title": "Gift card redemption code",
            "type": "string",
            "description": "A gift card redemption code to be redeemed on the purchase invoice."
          },
          "transaction_type": {
            "type": "string",
            "description": "An optional type designation for the payment gateway transaction created by this request. Supports 'moto' value, which is the acronym for mail order and telephone transactions.",
            "enum": [
              "moto"
            ]
          }
        },
        "description": "A purchase is only a request data type and is not persistent in Recurly, an InvoiceCollection will be the returned type."
      },
      "PaymentMethod": {
        "properties": {
          "object": {
            "type": "string",
            "enum": [
              "credit_card",
              "paypal",
              "amazon",
              "roku",
              "bank_account_info",
              "apple_pay",
              "sepadirectdebit",
              "eft",
              "wire_transfer",
              "money_order",
              "check",
              "amazon_billing_agreement",
              "paypal_billing_agreement",
              "gateway_token",
              "iban_bank_account",
              "other"
            ]
          },
          "card_type": {
            "type": "string",
            "description": "Visa, MasterCard, American Express, Discover, JCB, etc.",
            "enum": [
              "American Express",
              "Dankort",
              "Diners Club",
              "Discover",
              "Forbrugsforeningen",
              "JCB",
              "Laser",
              "Maestro",
              "MasterCard",
              "Test Card",
              "Union Pay",
              "Unknown",
              "Visa"
            ]
          },
          "first_six": {
            "maxLength": 6,
            "type": "string",
            "description": "Credit card number's first six digits."
          },
          "last_four": {
            "maxLength": 4,
            "type": "string",
            "description": "Credit card number's last four digits. Will refer to bank account if payment method is ACH."
          },
          "last_two": {
            "maxLength": 2,
            "type": "string",
            "description": "The IBAN bank account's last two digits."
          },
          "exp_month": {
            "maxLength": 2,
            "type": "integer",
            "description": "Expiration month."
          },
          "exp_year": {
            "maxLength": 4,
            "type": "integer",
            "description": "Expiration year."
          },
          "gateway_token": {
            "maxLength": 50,
            "type": "string",
            "description": "A token used in place of a credit card in order to perform transactions."
          },
          "gateway_code": {
            "maxLength": 13,
            "type": "string",
            "description": "An identifier for a specific payment gateway."
          },
          "billing_agreement_id": {
            "type": "string",
            "description": "Billing Agreement identifier. Only present for Amazon or Paypal payment methods."
          },
          "name_on_account": {
            "type": "string",
            "description": "The name associated with the bank account."
          },
          "account_type": {
            "type": "string",
            "description": "The bank account type. Only present for ACH payment methods.",
            "enum": [
              "checking",
              "savings"
            ]
          },
          "routing_number": {
            "type": "string",
            "description": "The bank account's routing number. Only present for ACH payment methods."
          },
          "routing_number_bank": {
            "type": "string",
            "description": "The bank name of this routing number."
          }
        }
      },
      "Error": {
        "type": "object",
        "properties": {
          "type": {
            "title": "Type",
            "type": "string",
            "enum": [
              "bad_request",
              "internal_server_error",
              "immutable_subscription",
              "invalid_api_key",
              "invalid_api_version",
              "invalid_content_type",
              "invalid_permissions",
              "invalid_token",
              "not_found",
              "simultaneous_request",
              "transaction",
              "unauthorized",
              "unavailable_in_api_version",
              "unknown_api_version",
              "validation",
              "missing_feature",
              "rate_limited"
            ]
          },
          "message": {
            "title": "Message",
            "type": "string"
          },
          "params": {
            "title": "Parameter specific errors",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Error_params"
            }
          }
        }
      },
      "ErrorMayHaveTransaction": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Error"
          },
          {
            "type": "object",
            "properties": {
              "transaction_error": {
                "$ref": "#/components/schemas/Transaction error details"
              }
            }
          }
        ]
      },
      "Fraud information": {
        "title": "Fraud information",
        "type": "object",
        "properties": {
          "score": {
            "title": "Kount score",
            "maximum": 99,
            "minimum": 1,
            "type": "integer"
          },
          "decision": {
            "title": "Kount decision",
            "maxLength": 10,
            "type": "string",
            "enum": [
              "approve",
              "review",
              "decline",
              "escalate"
            ]
          },
          "risk_rules_triggered": {
            "title": "Kount rules",
            "type": "object"
          }
        },
        "description": "Most recent fraud result.",
        "readOnly": true
      },
      "BillingInfo_updated_by": {
        "type": "object",
        "properties": {
          "ip": {
            "maxLength": 20,
            "type": "string",
            "description": "Customer's IP address when updating their billing information."
          },
          "country": {
            "maxLength": 2,
            "type": "string",
            "description": "Country of IP address, if known by Recurly."
          }
        },
        "readOnly": true
      },
      "CouponDiscount_trial": {
        "type": "object",
        "properties": {
          "unit": {
            "title": "Trial unit",
            "type": "string",
            "description": "Temporal unit of the free trial",
            "enum": [
              "day",
              "week",
              "month"
            ]
          },
          "length": {
            "title": "Trial length",
            "type": "integer",
            "description": "Trial length measured in the units specified by the sibling `unit` property"
          }
        },
        "description": "This is only present when `type=free_trial`."
      },
      "InvoiceRefund_external_refund": {
        "required": [
          "payment_method"
        ],
        "type": "object",
        "properties": {
          "payment_method": {
            "title": "Payment Method",
            "type": "string",
            "description": "Payment method used for external refund transaction.",
            "enum": [
              "credit_card",
              "paypal",
              "amazon",
              "roku",
              "ach",
              "apple_pay",
              "sepadirectdebit",
              "eft",
              "wire_transfer",
              "money_order",
              "check",
              "other"
            ]
          },
          "description": {
            "title": "Description",
            "maxLength": 50,
            "type": "string",
            "description": "Used as the refund transactions' description."
          },
          "refunded_at": {
            "title": "Refunded At",
            "type": "string",
            "description": "Date the external refund payment was made. Defaults to the current date-time.",
            "format": "date-time"
          }
        },
        "description": "Indicates that the refund was settled outside of Recurly, and a manual transaction should be created to track it in Recurly.\n\nRequired when:\n- refunding a manually collected charge invoice, and `refund_method` is not `all_credit`\n- refunding a credit invoice that refunded manually collecting invoices\n- refunding a credit invoice for a partial amount\n\nThis field can only be included when the Credit Invoices feature is enabled.\n"
      },
      "Transaction_payment_gateway": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "object": {
            "title": "Object type",
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "PurchaseCreate_shipping": {
        "type": "object",
        "properties": {
          "address_id": {
            "title": "Shipping address ID",
            "maxLength": 13,
            "type": "string",
            "description": "Assign a shipping address from the account's existing shipping addresses. If this and `shipping_address` are both present, `shipping_address` will take precedence."
          },
          "address": {
            "$ref": "#/components/schemas/ShippingAddressCreate"
          },
          "fees": {
            "title": "Shipping fees",
            "type": "array",
            "description": "A list of shipping fees to be created as charges with the purchase.",
            "items": {
              "$ref": "#/components/schemas/ShippingFeeCreate"
            }
          }
        }
      },
      "Error_params": {
        "type": "object",
        "properties": {
          "param": {
            "type": "string"
          }
        }
      },
      "Transaction error details": {
        "title": "Transaction error details",
        "type": "object",
        "properties": {
          "object": {
            "title": "Object type",
            "type": "string"
          },
          "transaction_id": {
            "title": "Transaction ID",
            "maxLength": 13,
            "type": "string"
          },
          "category": {
            "title": "Category",
            "type": "string",
            "enum": [
              "3d_secure_required",
              "amazon",
              "api_error",
              "approved",
              "communication",
              "configuration",
              "duplicate",
              "fraud",
              "hard",
              "invalid",
              "not_enabled",
              "not_supported",
              "recurly",
              "referral",
              "skles",
              "soft",
              "unknown"
            ]
          },
          "code": {
            "title": "Code",
            "type": "string",
            "enum": [
              "ach_cancel",
              "ach_chargeback",
              "ach_credit_return",
              "ach_exception",
              "ach_return",
              "ach_transactions_not_supported",
              "ach_validation_exception",
              "amazon_amount_exceeded",
              "amazon_invalid_authorization_status",
              "amazon_invalid_close_attempt",
              "amazon_invalid_create_order_reference",
              "amazon_invalid_order_status",
              "amazon_not_authorized",
              "amazon_order_not_modifiable",
              "amazon_transaction_count_exceeded",
              "api_error",
              "approved",
              "approved_fraud_review",
              "authorization_already_captured",
              "authorization_amount_depleted",
              "authorization_expired",
              "batch_processing_error",
              "billing_agreement_already_accepted",
              "billing_agreement_not_accepted",
              "call_issuer",
              "call_issuer_update_cardholder_data",
              "cannot_refund_unsettled_transactions",
              "card_not_activated",
              "card_type_not_accepted",
              "cardholder_requested_stop",
              "contact_gateway",
              "currency_not_supported",
              "customer_canceled_transaction",
              "cvv_required",
              "declined",
              "declined_card_number",
              "declined_exception",
              "declined_expiration_date",
              "declined_missing_data",
              "declined_saveable",
              "declined_security_code",
              "deposit_referenced_chargeback",
              "duplicate_transaction",
              "exceeds_daily_limit",
              "expired_card",
              "finbot_unavailable",
              "fraud_address",
              "fraud_address_recurly",
              "fraud_advanced_verification",
              "fraud_gateway",
              "fraud_generic",
              "fraud_ip_address",
              "fraud_risk_check",
              "fraud_security_code",
              "fraud_stolen_card",
              "fraud_too_many_attempts",
              "fraud_velocity",
              "gateway_error",
              "gateway_rate_limited",
              "gateway_timeout",
              "gateway_token_not_found",
              "gateway_unavailable",
              "insufficient_funds",
              "invalid_account_number",
              "invalid_amount",
              "invalid_card_number",
              "invalid_data",
              "invalid_email",
              "invalid_gateway_configuration",
              "invalid_issuer",
              "invalid_login",
              "invalid_merchant_type",
              "invalid_transaction",
              "issuer_unavailable",
              "merch_max_transaction_limit_exceeded",
              "moneybot_unavailable",
              "no_billing_information",
              "no_gateway",
              "no_gateway_found_for_transaction_amount",
              "partial_approval",
              "partial_credits_not_supported",
              "payment_cannot_void_authorization",
              "payment_not_accepted",
              "paypal_account_issue",
              "paypal_cannot_pay_self",
              "paypal_declined_use_alternate",
              "paypal_expired_reference_id",
              "paypal_hard_decline",
              "paypal_invalid_billing_agreement",
              "paypal_primary_declined",
              "processor_unavailable",
              "recurly_error",
              "recurly_failed_to_get_token",
              "recurly_token_mismatch",
              "recurly_token_not_found",
              "reference_transactions_not_enabled",
              "restricted_card",
              "restricted_card_chargeback",
              "simultaneous",
              "ssl_error",
              "temporary_hold",
              "three_d_secure_authentication",
              "three_d_secure_not_supported",
              "too_many_attempts",
              "total_credit_exceeds_capture",
              "transaction_already_refunded",
              "transaction_already_voided",
              "transaction_cannot_be_authorized",
              "transaction_cannot_be_refunded",
              "transaction_cannot_be_refunded_currently",
              "transaction_cannot_be_voided",
              "transaction_failed_to_settle",
              "transaction_not_found",
              "transaction_settled",
              "transaction_stale_at_gateway",
              "try_again",
              "unknown",
              "vaultly_service_unavailable",
              "zero_dollar_auth_not_supported"
            ]
          },
          "message": {
            "title": "Customer message",
            "type": "string"
          },
          "merchant_advice": {
            "title": "Merchant message",
            "type": "string"
          },
          "three_d_secure_action_token_id": {
            "title": "3-D Secure action token id",
            "maxLength": 22,
            "type": "string",
            "description": "Returned when 3-D Secure authentication is required for a transaction. Pass this value to Recurly.js so it can continue the challenge flow."
          }
        },
        "description": "This is only included on errors with `type=transaction`."
      }
    },
    "parameters": {
      "site_id": {
        "name": "site_id",
        "in": "path",
        "description": "Site ID or subdomain. For ID no prefix is used e.g. `e28zov4fw0v2`. For subdomain use prefix `subdomain-`, e.g. `subdomain-recurly`.",
        "required": true,
        "style": "simple",
        "explode": false,
        "schema": {
          "type": "string"
        }
      },
      "account_id": {
        "name": "account_id",
        "in": "path",
        "description": "Account ID or code. For ID no prefix is used e.g. `e28zov4fw0v2`. For code use prefix `code-`, e.g. `code-bob`.",
        "required": true,
        "style": "simple",
        "explode": false,
        "schema": {
          "type": "string"
        }
      },
      "add_on_id": {
        "name": "add_on_id",
        "in": "path",
        "description": "Add-on ID or code. For ID no prefix is used e.g. `e28zov4fw0v2`. For code use prefix `code-`, e.g. `code-gold`.",
        "required": true,
        "style": "simple",
        "explode": false,
        "schema": {
          "type": "string"
        }
      },
      "coupon_id": {
        "name": "coupon_id",
        "in": "path",
        "description": "Coupon ID or code. For ID no prefix is used e.g. `e28zov4fw0v2`. For code use prefix `code-`, e.g. `code-10off`.",
        "required": true,
        "style": "simple",
        "explode": false,
        "schema": {
          "type": "string"
        }
      },
      "credit_payment_id": {
        "name": "credit_payment_id",
        "in": "path",
        "description": "Credit Payment ID or UUID. For ID no prefix is used e.g. `e28zov4fw0v2`. For UUID use prefix `uuid-`, e.g. `uuid-123457890`.",
        "required": true,
        "style": "simple",
        "explode": false,
        "schema": {
          "type": "string"
        }
      },
      "custom_field_definition_id": {
        "name": "custom_field_definition_id",
        "in": "path",
        "description": "Custom Field Definition ID",
        "required": true,
        "style": "simple",
        "explode": false,
        "schema": {
          "type": "string"
        }
      },
      "item_id": {
        "name": "item_id",
        "in": "path",
        "description": "Item ID or code. For ID no prefix is used e.g. `e28zov4fw0v2`. For code use prefix `code-`, e.g. `code-red`.",
        "required": true,
        "style": "simple",
        "explode": false,
        "schema": {
          "type": "string"
        }
      },
      "invoice_id": {
        "name": "invoice_id",
        "in": "path",
        "description": "Invoice ID or number. For ID no prefix is used e.g. `e28zov4fw0v2`. For number use prefix `number-`, e.g. `number-1000`.",
        "required": true,
        "style": "simple",
        "explode": false,
        "schema": {
          "type": "string"
        }
      },
      "line_item_id": {
        "name": "line_item_id",
        "in": "path",
        "description": "Line Item ID.",
        "required": true,
        "style": "simple",
        "explode": false,
        "schema": {
          "type": "string"
        }
      },
      "plan_id": {
        "name": "plan_id",
        "in": "path",
        "description": "Plan ID or code. For ID no prefix is used e.g. `e28zov4fw0v2`. For code use prefix `code-`, e.g. `code-gold`.",
        "required": true,
        "style": "simple",
        "explode": false,
        "schema": {
          "type": "string"
        }
      },
      "shipping_address_id": {
        "name": "shipping_address_id",
        "in": "path",
        "description": "Shipping Address ID.",
        "required": true,
        "style": "simple",
        "explode": false,
        "schema": {
          "type": "string"
        }
      },
      "shipping_method_id": {
        "name": "shipping_method_id",
        "in": "path",
        "description": "Shipping Method ID or code. For ID no prefix is used e.g. `e28zov4fw0v2`. For code use prefix `code-`, e.g. `code-usps_2-day`.",
        "required": true,
        "style": "simple",
        "explode": false,
        "schema": {
          "type": "string"
        }
      },
      "subscription_id": {
        "name": "subscription_id",
        "in": "path",
        "description": "Subscription ID or UUID. For ID no prefix is used e.g. `e28zov4fw0v2`. For UUID use prefix `uuid-`, e.g. `uuid-123457890`.",
        "required": true,
        "style": "simple",
        "explode": false,
        "schema": {
          "type": "string"
        }
      },
      "transaction_id": {
        "name": "transaction_id",
        "in": "path",
        "description": "Transaction ID or UUID. For ID no prefix is used e.g. `e28zov4fw0v2`. For UUID use prefix `uuid-`, e.g. `uuid-123457890`.",
        "required": true,
        "style": "simple",
        "explode": false,
        "schema": {
          "type": "string"
        }
      },
      "unique_coupon_code_id": {
        "name": "unique_coupon_code_id",
        "in": "path",
        "description": "Unique Coupon Code ID or code. For ID no prefix is used e.g. `e28zov4fw0v2`. For code use prefix `code-`, e.g. `code-abc-8dh2-def`.",
        "required": true,
        "style": "simple",
        "explode": false,
        "schema": {
          "type": "string"
        }
      },
      "ids": {
        "name": "ids",
        "in": "query",
        "description": "Filter results by their IDs. Up to 200 IDs can be passed at once using\ncommas as separators, e.g. `ids=h1at4d57xlmy,gyqgg0d3v9n1,jrsm5b4yefg6`.\n\n**Important notes:**\n\n* The `ids` parameter cannot be used with any other ordering or filtering\n  parameters (`limit`, `order`, `sort`, `begin_time`, `end_time`, etc)\n* Invalid or unknown IDs will be ignored, so you should check that the\n  results correspond to your request.\n* Records are returned in an arbitrary order. Since results are all\n  returned at once you can sort the records yourself.\n",
        "required": false,
        "style": "form",
        "explode": false,
        "schema": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "limit": {
        "name": "limit",
        "in": "query",
        "description": "Limit number of records 1-200.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "maximum": 200,
          "minimum": 1,
          "type": "integer",
          "default": 20
        }
      },
      "order": {
        "name": "order",
        "in": "query",
        "description": "Sort order.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "type": "string",
          "default": "desc",
          "enum": [
            "asc",
            "desc"
          ]
        }
      },
      "sort_dates": {
        "name": "sort",
        "in": "query",
        "description": "Sort field. You *really* only want to sort by `updated_at` in ascending\norder. In descending order updated records will move behind the cursor and could\nprevent some records from being returned.\n",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "type": "string",
          "default": "created_at",
          "enum": [
            "created_at",
            "updated_at"
          ]
        }
      },
      "filter_state": {
        "name": "state",
        "in": "query",
        "description": "Filter by state.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "type": "string",
          "enum": [
            "active",
            "inactive"
          ]
        }
      },
      "filter_subscription_state": {
        "name": "state",
        "in": "query",
        "description": "Filter by state.\n\n- When `state=active`, `state=canceled`, `state=expired`, or `state=future`, subscriptions with states that match the query and only those subscriptions will be returned.\n- When `state=in_trial`, only subscriptions that have a trial_started_at date earlier than now and a trial_ends_at date later than now will be returned.\n- When `state=live`, only subscriptions that are in an active, canceled, or future state or are in trial will be returned.\n",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "type": "string",
          "enum": [
            "active",
            "canceled",
            "expired",
            "future",
            "in_trial",
            "live"
          ]
        }
      },
      "filter_begin_time": {
        "name": "begin_time",
        "in": "query",
        "description": "Filter by begin_time when `sort=created_at` or `sort=updated_at`.\n**Note:** this value is an ISO8601 timestamp. A partial timestamp that does not include a time zone will default to UTC.\n",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "type": "string",
          "format": "date-time"
        }
      },
      "filter_end_time": {
        "name": "end_time",
        "in": "query",
        "description": "Filter by end_time when `sort=created_at` or `sort=updated_at`.\n**Note:** this value is an ISO8601 timestamp. A partial timestamp that does not include a time zone will default to UTC.\n",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "type": "string",
          "format": "date-time"
        }
      },
      "filter_account_email": {
        "name": "email",
        "in": "query",
        "description": "Filter for accounts with this exact email address. A blank value will return accounts with both `null` and `\"\"` email addresses. Note that multiple accounts can share one email address.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "type": "string"
        }
      },
      "filter_account_subscriber": {
        "name": "subscriber",
        "in": "query",
        "description": "Filter for accounts with or without a subscription in the `active`,\n`canceled`, or `future` state.\n",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "type": "boolean"
        }
      },
      "filter_account_past_due": {
        "name": "past_due",
        "in": "query",
        "description": "Filter for accounts with an invoice in the `past_due` state.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "type": "string",
          "enum": [
            "true"
          ]
        }
      },
      "filter_line_item_original": {
        "name": "original",
        "in": "query",
        "description": "Filter by original field.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "type": "string",
          "enum": [
            "true"
          ]
        }
      },
      "filter_line_item_state": {
        "name": "state",
        "in": "query",
        "description": "Filter by state field.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "type": "string",
          "enum": [
            "invoiced",
            "pending"
          ]
        }
      },
      "filter_line_item_type": {
        "name": "type",
        "in": "query",
        "description": "Filter by type field.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "type": "string",
          "enum": [
            "charge",
            "credit"
          ]
        }
      },
      "filter_transaction_type": {
        "name": "type",
        "in": "query",
        "description": "Filter by type field. The value `payment` will return both `purchase` and `capture` transactions.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "type": "string",
          "enum": [
            "verify",
            "authorization",
            "capture",
            "purchase",
            "refund",
            "payment"
          ]
        }
      },
      "filter_transaction_success": {
        "name": "success",
        "in": "query",
        "description": "Filter by success field.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "type": "string",
          "enum": [
            "true"
          ]
        }
      },
      "filter_invoice_type": {
        "name": "type",
        "in": "query",
        "description": "Filter by type when:\n- `type=charge`, only charge invoices will be returned.\n- `type=credit`, only credit invoices will be returned.\n- `type=non-legacy`, only charge and credit invoices will be returned.\n- `type=legacy`, only legacy invoices will be returned.\n",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "type": "string",
          "enum": [
            "charge",
            "credit",
            "non-legacy",
            "legacy"
          ]
        }
      }
    },
    "securitySchemes": {
      "api_key": {
        "type": "http",
        "description": "Enter the API key as the username and set the password to an empty string. You can locate and manage your API keys from the [API Credentials](https://app.recurly.com/go/developer/api_keys) page.",
        "scheme": "basic"
      }
    }
  },
  "x-tagGroups": [
    {
      "name": "Customers",
      "tags": [
        "account",
        "note",
        "account_acquisition",
        "billing_info",
        "subscription",
        "subscription_change",
        "shipping_address",
        "purchase"
      ]
    },
    {
      "name": "Products and Promotions",
      "tags": [
        "item",
        "plan",
        "add-on",
        "coupon",
        "coupon_redemption",
        "unique_coupon_code"
      ]
    },
    {
      "name": "Invoices and Payments",
      "tags": [
        "invoice",
        "line_item",
        "credit_payment",
        "transaction"
      ]
    },
    {
      "name": "Configuration",
      "tags": [
        "site",
        "custom_field_definition",
        "shipping_method"
      ]
    }
  ]
}
