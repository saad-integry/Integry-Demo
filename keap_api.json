{
  "openapi": "3.0.0",
  "info": {
    "version": "1.70.0.181438-hf-202001081626",
    "title": "Infusionsoft REST API",
    "termsOfService": "https://keys.developer.infusionsoft.com/apps/tos",
    "contact": {
      "name": "Infusionsoft",
      "url": "https://developer.infusionsoft.com/get-support/"
    }
  },
  "tags": [
    {
      "name": "Product",
      "description": "Products-Endpoint"
    },
    {
      "name": "User Info",
      "description": "UserInfo-Endpoint"
    },
    {
      "name": "Appointment",
      "description": "Appointments-Endpoint"
    },
    {
      "name": "Locale",
      "description": "Locale-Endpoint"
    },
    {
      "name": "REST Hooks",
      "description": "Rest-Hook-Endpoint"
    },
    {
      "name": "Account Info",
      "description": "Account Info-Endpoint"
    },
    {
      "name": "Campaign",
      "description": "Campaigns-Endpoint"
    },
    {
      "name": "Tags",
      "description": "Tag-Company-Endpoint"
    },
    {
      "name": "Setting",
      "description": "Setting-Endpoint"
    },
    {
      "name": "File",
      "description": "File-Endpoint"
    },
    {
      "name": "Note",
      "description": "Notes-Endpoint"
    },
    {
      "name": "Contact",
      "description": "Contacts-Endpoint"
    },
    {
      "name": "Email",
      "description": "Emails-Endpoint"
    },
    {
      "name": "Affiliate",
      "description": "Affiliates-Endpoint"
    },
    {
      "name": "Merchant",
      "description": "Merchant-Endpoint"
    },
    {
      "name": "Task",
      "description": "Tasks-Endpoint"
    },
    {
      "name": "Company",
      "description": "Companies-Endpoint"
    },
    {
      "name": "Users",
      "description": "Users-Endpoint"
    },
    {
      "name": "Email Address",
      "description": "Email-Addresses-Endpoint"
    },
    {
      "name": "E-Commerce",
      "description": "E-Commerce-Endpoint"
    },
    {
      "name": "Opportunity",
      "description": "Opportunities-Endpoint"
    }
  ],
  "paths": {
    "/account/profile": {
      "get": {
        "tags": [
          "Account Info"
        ],
        "summary": "Retrieve account profile",
        "description": "Retrieves profile/company info for an account.",
        "operationId": "getAccountProfileUsingGET",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Account_Profile"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Account Info"
        ],
        "summary": "Updates an account profile",
        "description": "Updates profile/company info for an account.",
        "operationId": "updateAccountInfoUsingPUT",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Account_Profile"
              }
            }
          },
          "description": "accountInfo",
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Account_Profile"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/affiliates/commissions": {
      "get": {
        "tags": [
          "Affiliate"
        ],
        "summary": "Retrieve Commissions",
        "description": "Retrieve a list of Commissions based on Affiliate or Date Range",
        "operationId": "searchCommissionsUsingGET",
        "parameters": [
          {
            "name": "since",
            "in": "query",
            "description": "Date to start searching from ex. `2017-01-01T22:17:59.039Z`",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "until",
            "in": "query",
            "description": "Date to search to ex. `2017-01-01T22:17:59.039Z`",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Sets a total of items to return",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Sets a beginning range of items to return",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "affiliateId",
            "in": "query",
            "description": "Affiliate to retrieve commissions for",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AffiliateCommissionList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/affiliates/model": {
      "get": {
        "tags": [
          "Affiliate"
        ],
        "summary": "Retrieve Affiliate Model",
        "description": "Get the custom fields for the Affiliate object",
        "operationId": "retrieveAffiliateModelUsingGET",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ObjectModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/appointments": {
      "get": {
        "tags": [
          "Appointment"
        ],
        "summary": "List Appointments",
        "description": "Retrieves all appointments for the authenticated user",
        "operationId": "listAppointmentsUsingGET",
        "parameters": [
          {
            "name": "since",
            "in": "query",
            "description": "Date to start searching from ex. `2017-01-01T22:17:59.039Z`",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "until",
            "in": "query",
            "description": "Date to search to ex. `2017-01-01T22:17:59.039Z`",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Sets a total of items to return",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Sets a beginning range of items to return",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "contact_id",
            "in": "query",
            "description": "Optionally find appointments with a contact",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppointmentList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Appointment"
        ],
        "summary": "Create an Appointment",
        "description": "Creates a new appointment as the authenticated user",
        "operationId": "createAppointmentUsingPOST",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Appointment"
              }
            }
          },
          "description": "appointment",
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Appointment"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/appointments/model": {
      "get": {
        "tags": [
          "Appointment"
        ],
        "summary": "Retrieve Appointment Model",
        "description": "Get the custom fields for the Appointment object",
        "operationId": "retrieveAppointmentModelUsingGET",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ObjectModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/appointments/model/customFields": {
      "post": {
        "tags": [
          "Appointment"
        ],
        "summary": "Create a Custom Field",
        "description": "Adds a custom field of the specified type and options to the Appointment object.",
        "operationId": "createAppointmentCustomFieldUsingPOST",
        "requestBody": {
          "$ref": "#/components/requestBodies/CreateRestCustomField"
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomFieldMetaData"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/appointments/{appointmentId}": {
      "get": {
        "tags": [
          "Appointment"
        ],
        "summary": "Retrieve an Appointment",
        "description": "Retrieves a specific appointment with respect to user permissions. The authenticated user will need the \"can view all records\" permission for Task/Appt/Notes",
        "operationId": "getAppointmentUsingGET",
        "parameters": [
          {
            "name": "appointmentId",
            "in": "path",
            "description": "appointmentId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Appointment"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Appointment"
        ],
        "summary": "Replace an Appointment",
        "description": "Replaces all values of a given appointment",
        "operationId": "updateAppointmentUsingPUT",
        "parameters": [
          {
            "name": "appointmentId",
            "in": "path",
            "description": "appointmentId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/Appointment"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Appointment"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Appointment"
        ],
        "summary": "Delete an Appointment",
        "description": "Deletes the specified appointment",
        "operationId": "deleteAppointmentUsingDELETE",
        "parameters": [
          {
            "name": "appointmentId",
            "in": "path",
            "description": "appointmentId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Appointment"
        ],
        "summary": "Update an Appointment",
        "description": "Updates the provided values of a given appointment",
        "operationId": "updatePropertiesOnAppointmentUsingPATCH",
        "parameters": [
          {
            "name": "appointmentId",
            "in": "path",
            "description": "appointmentId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/Appointment"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Appointment"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/campaigns": {
      "get": {
        "tags": [
          "Campaign"
        ],
        "summary": "List Campaigns",
        "description": "Retrieves all campaigns for the authenticated user",
        "operationId": "listCampaignsUsingGET",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "Sets a total of items to return",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Sets a beginning range of items to return",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "search_text",
            "in": "query",
            "description": "Optional text to search",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "order",
            "in": "query",
            "description": "Attribute to order items by",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "name",
                "published_date",
                "id",
                "completed_contact_count",
                "active_contact_count",
                "date_created"
              ]
            }
          },
          {
            "name": "order_direction",
            "in": "query",
            "description": "How to order the data i.e. ascending (A-Z) or descending (Z-A)",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "ascending",
                "descending"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CampaignList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/campaigns/goals/{integration}/{callName}": {
      "post": {
        "tags": [
          "Campaign"
        ],
        "summary": "Achieve API Goal",
        "description": "Achieves API goal for campaigns with matching integration, callName for a given contactId",
        "operationId": "createAchieveApiGoalEventUsingPOST",
        "parameters": [
          {
            "name": "integration",
            "in": "path",
            "description": "integration",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "callName",
            "in": "path",
            "description": "callName",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AchieveApiGoalEvent"
              }
            }
          },
          "description": "goalEvent",
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GoalEventResultDTO"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/campaigns/{campaignId}": {
      "get": {
        "tags": [
          "Campaign"
        ],
        "summary": "Retrieve a Campaign",
        "description": "Retrieves a single campaign",
        "operationId": "getCampaignUsingGET",
        "parameters": [
          {
            "name": "campaignId",
            "in": "path",
            "description": "campaignId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "optional_properties",
            "in": "query",
            "description": "Comma-delimited list of Campaign properties to include in the response. (The fields `goals` and `sequences` aren't included, by default.)",
            "required": false,
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Campaign"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/campaigns/{campaignId}/sequences/{sequenceId}/contacts": {
      "post": {
        "tags": [
          "Campaign"
        ],
        "summary": "Add Multiple to Campaign Sequence",
        "description": "Adds a list of contacts to a campaign sequence",
        "operationId": "addContactsToCampaignSequenceUsingPOST",
        "parameters": [
          {
            "name": "campaignId",
            "in": "path",
            "description": "campaignId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sequenceId",
            "in": "path",
            "description": "sequenceId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/SetOfIds"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Campaign"
        ],
        "summary": "Remove Multiple from Campaign Sequence",
        "description": "Removes a list of contacts from a campaign sequence",
        "operationId": "removeContactsFromCampaignSequenceUsingDELETE",
        "parameters": [
          {
            "name": "campaignId",
            "in": "path",
            "description": "campaignId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sequenceId",
            "in": "path",
            "description": "sequenceId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/SetOfIds"
        },
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/campaigns/{campaignId}/sequences/{sequenceId}/contacts/{contactId}": {
      "post": {
        "tags": [
          "Campaign"
        ],
        "summary": "Add to Campaign Sequence",
        "description": "Adds a single contact to a campaign sequence",
        "operationId": "addContactToCampaignSequenceUsingPOST",
        "parameters": [
          {
            "name": "campaignId",
            "in": "path",
            "description": "campaignId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sequenceId",
            "in": "path",
            "description": "sequenceId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "contactId",
            "in": "path",
            "description": "contactId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Campaign"
        ],
        "summary": "Remove from Campaign Sequence",
        "description": "Removes a single contact from a campaign sequence",
        "operationId": "removeContactFromCampaignSequenceUsingDELETE",
        "parameters": [
          {
            "name": "campaignId",
            "in": "path",
            "description": "campaignId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sequenceId",
            "in": "path",
            "description": "sequenceId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "contactId",
            "in": "path",
            "description": "contactId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/companies": {
      "get": {
        "tags": [
          "Company"
        ],
        "summary": "List Companies",
        "description": "Retrieves a list of all companies",
        "operationId": "listCompaniesUsingGET",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "Sets a total of items to return",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Sets a beginning range of items to return",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "company_name",
            "in": "query",
            "description": "Optional company name to query on",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "order",
            "in": "query",
            "description": "Attribute to order items by",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "id",
                "date_created",
                "name"
              ]
            }
          },
          {
            "name": "order_direction",
            "in": "query",
            "description": "How to order the data i.e. ascending (A-Z) or descending (Z-A)",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "ascending",
                "descending"
              ]
            }
          },
          {
            "name": "optional_properties",
            "in": "query",
            "description": "Comma-delimited list of Company properties to include in the response. (Fields such as `notes`, `fax_number` and `custom_fields` aren't included, by default.)",
            "required": false,
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CompanyList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Company"
        ],
        "summary": "Create a Company",
        "description": "Creates a new company as the authenticated user. NB: Company must contain at least the company name. The `country_code` is required if `region` is specified.\n\nYou may opt-in or mark a Company as _Marketable_ by including the following field in the request JSON with an opt-in reason. (This field is also shown in the complete request body sample.) The reason you provide here will help with compliance. Example reasons: \"Customer opted-in through webform\", \"Company gave explicit permission.\"\n\n```json\n\"opt_in_reason\": \"your reason for opt-in\"\n```",
        "operationId": "createCompanyUsingPOST",
        "requestBody": {
          "$ref": "#/components/requestBodies/CreateOrPatchCompany"
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Company"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/companies/model": {
      "get": {
        "tags": [
          "Company"
        ],
        "summary": "Retrieve Company Model",
        "description": "Get the custom fields and optional properties for the Company object",
        "operationId": "retrieveCompanyModelUsingGET",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ObjectModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/company/{companyId}": {
      "patch": {
        "tags": [
          "Company"
        ],
        "summary": "Update a Company",
        "description": "Updates a company with only the values provided in the request.\n\nYou may opt-in or mark a Company as _Marketable_ by including the following field in the request JSON with an opt-in reason. (This field is also shown in the complete request body sample.) The reason you provide here will help with compliance. Example reasons: \"Customer opted-in through webform\", \"Company gave explicit permission.\"\n\n```json\n\"opt_in_reason\": \"your reason for opt-in\"\n```",
        "operationId": "updatePropertiesOnContactUsingPATCH",
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "description": "companyId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/CreateOrPatchCompany"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Company"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/contacts": {
      "get": {
        "tags": [
          "Contact"
        ],
        "summary": "List Contacts",
        "description": "Retrieves a list of all contacts",
        "operationId": "listContactsUsingGET",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "Sets a total of items to return",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Sets a beginning range of items to return",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "email",
            "in": "query",
            "description": "Optional email address to query on",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "given_name",
            "in": "query",
            "description": "Optional first name or forename to query on",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "family_name",
            "in": "query",
            "description": "Optional last name or surname to query on",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "order",
            "in": "query",
            "description": "Attribute to order items by",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "id",
                "date_created",
                "name",
                "email"
              ]
            }
          },
          {
            "name": "order_direction",
            "in": "query",
            "description": "How to order the data i.e. ascending (A-Z) or descending (Z-A)",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "ascending",
                "descending"
              ]
            }
          },
          {
            "name": "since",
            "in": "query",
            "description": "Date to start searching from on LastUpdated ex. `2017-01-01T22:17:59.039Z`",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "until",
            "in": "query",
            "description": "Date to search to on LastUpdated ex. `2017-01-01T22:17:59.039Z`",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Contact"
        ],
        "summary": "Create a Contact",
        "description": "Creates a new contact as the authenticated user. NB: Contact must contain at least one item in `email_addresses` or `phone_numbers` and `country_code` is required if `region` is specified.\n\nPlease see the body schema for updates to the postal code field.\n\nYou may opt-in or mark a Contact as _Marketable_ by including the following field in the request JSON with an opt-in reason. (This field is also shown in the complete request body sample.) The reason you provide here will help with compliance. Example reasons: \"Customer opted-in through webform\", \"Contact gave explicit permission.\"\n\n```json\n\"opt_in_reason\": \"your reason for opt-in\"\n```",
        "operationId": "createContactUsingPOST",
        "requestBody": {
          "$ref": "#/components/requestBodies/CreateOrPatchContact"
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FullContact"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Contact"
        ],
        "summary": "Create or Update a Contact",
        "description": "Creates a new contact or updates a contact as the authenticated user. NB: New Contacts must contain at least one item in `email_addresses` or `phone_numbers` and `country_code` is required if `region` is specified. Existing Contacts are updated with only the values provided in the request. Accepts a `duplicate_option` which performs duplicate checking by one of the following options: `Email`, `EmailAndName`, if a match is found using the option provided, the existing contact will be updated. If an existing contact was not found using the `duplicate_option` provided, a new contact record will be created.\n\nYou may opt-in or mark a Contact as _Marketable_ by including the following field in the request JSON with an opt-in reason. (This field is also shown in the complete request body sample.) The reason you provide here will help with compliance. Example reasons: \"Customer opted-in through webform\", \"Contact gave explicit permission.\"\n\n```json\n\"opt_in_reason\": \"your reason for opt-in\"\n```",
        "operationId": "createOrUpdateContactUsingPUT",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertContact"
              }
            }
          },
          "description": "contact"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FullContact"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/contacts/model": {
      "get": {
        "tags": [
          "Contact"
        ],
        "summary": "Retrieve Contact Model",
        "description": "Get the custom fields and optional properties for the Contact object",
        "operationId": "retrieveContactModelUsingGET",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ObjectModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/contacts/model/customFields": {
      "post": {
        "tags": [
          "Contact"
        ],
        "summary": "Create a Custom Field",
        "description": "Adds a custom field of the specified type and options to the Contact object.",
        "operationId": "createCustomFieldUsingPOST",
        "requestBody": {
          "$ref": "#/components/requestBodies/CreateRestCustomField"
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomFieldMetaData"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/contacts/{contactId}": {
      "delete": {
        "tags": [
          "Contact"
        ],
        "summary": "Delete a Contact",
        "description": "Deletes the specified contact. \n\nIf a request header named `GDPR-Redact` is included, the contact will instead be redacted according to [GDPR guidlines](https://gdpr-info.eu/). Redacting a contact will remove all personally identifiable information and cannot be undone.",
        "operationId": "deleteContactUsingDELETE",
        "parameters": [
          {
            "name": "contactId",
            "in": "path",
            "description": "contactId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Contact"
        ],
        "summary": "Update a Contact",
        "description": "Updates a contact with only the values provided in the request.\n\nYou may opt-in or mark a Contact as _Marketable_ by including the following field in the request JSON with an opt-in reason. (This field is also shown in the complete request body sample.) The reason you provide here will help with compliance. Example reasons: \"Customer opted-in through webform\", \"Contact gave explicit permission.\"\n\n```json\n\"opt_in_reason\": \"your reason for opt-in\"\n```",
        "operationId": "updatePropertiesOnContactUsingPATCH_1",
        "parameters": [
          {
            "name": "contactId",
            "in": "path",
            "description": "contactId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "update_mask",
            "in": "query",
            "description": "An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped.",
            "required": false,
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "enum": [
                "addresses",
                "anniversary",
                "birthday",
                "company",
                "contact_type",
                "custom_fields",
                "email_addresses",
                "family_name",
                "fax_numbers",
                "given_name",
                "job_title",
                "lead_source_id",
                "middle_name",
                "notes",
                "opt_in_reason",
                "origin",
                "owner_id",
                "phone_numbers",
                "preferred_locale",
                "preferred_name",
                "prefix",
                "social_accounts",
                "source_type",
                "spouse_name",
                "suffix",
                "time_zone",
                "website"
              ]
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/CreateOrPatchContact"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FullContact"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/contacts/{contactId}/creditCards": {
      "get": {
        "tags": [
          "Contact"
        ],
        "summary": "Retrieve Credit Cards",
        "description": "List all Credit Cards on a contact",
        "operationId": "listCreditCardsUsingGET",
        "parameters": [
          {
            "name": "contactId",
            "in": "path",
            "description": "contactId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ContactCreditCard"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Contact"
        ],
        "summary": "Create a Credit Card",
        "description": "Creates a new credit card associated to a contact",
        "operationId": "createCreditCardUsingPOST",
        "parameters": [
          {
            "name": "contactId",
            "in": "path",
            "description": "contactId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreditCard"
              }
            }
          },
          "description": "creditCard"
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreditCardAdded"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/contacts/{contactId}/emails": {
      "get": {
        "tags": [
          "Contact"
        ],
        "summary": "List Emails",
        "description": "List Emails that have been sent to a Contact",
        "operationId": "listEmailsForContactUsingGET",
        "parameters": [
          {
            "name": "contactId",
            "in": "path",
            "description": "contactId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Sets a total of items to return",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Sets a beginning range of items to return",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "email",
            "in": "query",
            "description": "Optional email address to query on",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmailSentQueryResultList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Contact"
        ],
        "summary": "Create an Email Record",
        "description": "Create a record of an email sent to a contact",
        "operationId": "createEmailForContactUsingPOST",
        "parameters": [
          {
            "name": "contactId",
            "in": "path",
            "description": "contactId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/EmailSentCreate"
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmailSentCreate"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/contacts/{contactId}/tags": {
      "get": {
        "tags": [
          "Contact"
        ],
        "summary": "List Applied Tags",
        "description": "Retrieves a list of tags applied to a given contact",
        "operationId": "listAppliedTagsUsingGET",
        "parameters": [
          {
            "name": "contactId",
            "in": "path",
            "description": "contactId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Sets a total of items to return",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Sets a beginning range of items to return",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactTagList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Contact"
        ],
        "summary": "Apply Tags",
        "description": "Apply a list of tags to a given contact record",
        "operationId": "applyTagsToContactIdUsingPOST",
        "parameters": [
          {
            "name": "contactId",
            "in": "path",
            "description": "contactId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TagId"
              }
            }
          },
          "description": "tagIds",
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Entry_long_string_"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Contact"
        ],
        "summary": "Remove Applied Tags",
        "description": "Removes a list of tags from the given contact",
        "operationId": "removeTagsFromContactUsingDELETE",
        "parameters": [
          {
            "name": "contactId",
            "in": "path",
            "description": "contactId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "ids",
            "in": "query",
            "description": "ids",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/contacts/{contactId}/tags/{tagId}": {
      "delete": {
        "tags": [
          "Contact"
        ],
        "summary": "Remove Applied Tag",
        "description": "Removes a tag from the given contact",
        "operationId": "removeTagsFromContactUsingDELETE_1",
        "parameters": [
          {
            "name": "contactId",
            "in": "path",
            "description": "contactId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "tagId",
            "in": "path",
            "description": "tagId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/contacts/{id}": {
      "get": {
        "tags": [
          "Contact"
        ],
        "summary": "Retrieve a Contact",
        "description": "Retrieves a single contact",
        "operationId": "getContactUsingGET",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "optional_properties",
            "in": "query",
            "description": "Comma-delimited list of Contact properties to include in the response. (Some fields such as `lead_source_id`, `custom_fields`, and `job_title` aren't included, by default.)",
            "required": false,
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FullContact"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/emailAddresses/{email}": {
      "put": {
        "tags": [
          "Email Address"
        ],
        "summary": "Replace an Email Address",
        "description": "Replaces all of the values of a given email address",
        "operationId": "replaceEmailAddressUsingPUT",
        "parameters": [
          {
            "name": "email",
            "in": "path",
            "description": "email",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateEmailAddress"
              }
            }
          },
          "description": "update",
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestEmailAddress"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/emails": {
      "get": {
        "tags": [
          "Email"
        ],
        "summary": "List Emails",
        "description": "Retrieve a list of emails that have been sent\n\nKeap is currently investigating an issue with degraded performance\nof this endpoint with very large (millions of records) record sets",
        "operationId": "listEmailsUsingGET",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "Sets a total of items to return",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Sets a beginning range of items to return",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "contact_id",
            "in": "query",
            "description": "Optional Contact Id to find Emails for",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "email",
            "in": "query",
            "description": "Optional email address to query on",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "since_sent_date",
            "in": "query",
            "description": "Optional date to query on, emails sent since the provided date, must be present if untilDate is provided",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "until_sent_date",
            "in": "query",
            "description": "Optional date to query on, email sent until the provided date",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ordered",
            "in": "query",
            "description": "Optional boolean to turn off ORDER BY in SQL query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmailSentQueryResultList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Email"
        ],
        "summary": "Create an Email Record",
        "description": "Create a record of an email sent to a contact",
        "operationId": "createEmailUsingPOST",
        "requestBody": {
          "$ref": "#/components/requestBodies/EmailSentCreate"
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmailSentCreate"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/emails/queue": {
      "post": {
        "tags": [
          "Email"
        ],
        "summary": "Send an Email",
        "description": "Send an Email to a list of Contacts",
        "operationId": "sendEmailUsingPOST",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EmailSendRequest"
              }
            }
          },
          "description": "emailSendRequest"
        },
        "responses": {
          "202": {
            "description": "Accepted"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/emails/sync": {
      "post": {
        "tags": [
          "Email"
        ],
        "summary": "Create a set of Email Records",
        "description": "Create a set of records of emails sent to contacts, maximum 1000 per transaction.",
        "operationId": "createEmailsUsingPOST",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EmailSentCreateList"
              }
            }
          },
          "description": "Email records to persist, with content."
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmailSentCreateList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/emails/unsync": {
      "post": {
        "tags": [
          "Email"
        ],
        "summary": "Un-sync a batch of Email Records",
        "description": "Un-syncs a batch of email records",
        "operationId": "deleteEmailsUsingPOST",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetOfIds"
              }
            }
          },
          "description": "emailIds",
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/emails/{id}": {
      "get": {
        "tags": [
          "Email"
        ],
        "summary": "Retrieve an Email",
        "description": "Retrieves a single email that has been sent",
        "operationId": "getEmailUsingGET",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmailSentQueryResultWithContent"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Email"
        ],
        "summary": "Update an Email Record",
        "description": "Update a record of an email sent to a contact",
        "operationId": "updateEmailUsingPUT",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/EmailSentCreate"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmailSentCreate"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "deprecated": true
      },
      "delete": {
        "tags": [
          "Email"
        ],
        "summary": "Delete an Email Record",
        "description": "Delete a specific email record",
        "operationId": "deleteEmailUsingDELETE",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/files": {
      "get": {
        "tags": [
          "File"
        ],
        "summary": "List Files",
        "description": "Retrieves a list of all files",
        "operationId": "listFilesUsingGET",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "Sets a total of items to return",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Sets a beginning range of items to return",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "viewable",
            "in": "query",
            "description": "Include public or private files in response (PUBLIC or PRIVATE), defaults to BOTH.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "PUBLIC",
                "PRIVATE",
                "BOTH"
              ]
            }
          },
          {
            "name": "permission",
            "in": "query",
            "description": "Filter based on the permission of files (USER or COMPANY), defaults to BOTH.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "USER",
                "COMPANY",
                "BOTH"
              ]
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Filter based on the type of file.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "Application",
                "Image",
                "Fax",
                "Attachment",
                "Ticket",
                "Contact",
                "DigitalProduct",
                "Import",
                "Hidden",
                "WebForm",
                "StyledCart",
                "ReSampledImage",
                "TemplateThumbnail",
                "Funnel",
                "LogoThumbnail"
              ]
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "Filter files based on name, with '*' preceding or following to indicate LIKE queries.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "contact_id",
            "in": "query",
            "description": "Filter based on Contact Id, if user has permission to see Contact files.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "File"
        ],
        "summary": "Upload File",
        "description": "Upload a base64 encoded file. `contact_id` is required only when `file_association` is `CONTACT`.",
        "operationId": "createFileUsingPOST",
        "requestBody": {
          "$ref": "#/components/requestBodies/FileUpload"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileInformation"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/files/{fileId}": {
      "get": {
        "tags": [
          "File"
        ],
        "summary": "Retrieve File",
        "description": "Retrieves metadata about a specific file. Optionally returns the base64 encoded file data.",
        "operationId": "getFileUsingGET",
        "parameters": [
          {
            "name": "fileId",
            "in": "path",
            "description": "fileId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "optional_properties",
            "in": "query",
            "description": "Comma-delimited list of File properties to include in the response. (Some fields such as `file_data` aren't included, by default.)",
            "required": false,
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileInformation"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "File"
        ],
        "summary": "Replace File",
        "description": "Upload a base64 encoded file to replace an existing one. `contact_id` is required only when `file_association` is `CONTACT`.",
        "operationId": "updateFileUsingPUT",
        "parameters": [
          {
            "name": "fileId",
            "in": "path",
            "description": "fileId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/FileUpload"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileInformation"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "File"
        ],
        "summary": "Delete File",
        "description": "Deletes the specified file",
        "operationId": "deleteFileUsingDELETE",
        "parameters": [
          {
            "name": "fileId",
            "in": "path",
            "description": "fileId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/hooks": {
      "get": {
        "tags": [
          "REST Hooks"
        ],
        "summary": "List Stored Hook Subscriptions",
        "description": "Lists your hook subscriptions.",
        "operationId": "list_stored_hook_subscriptions",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RestHook"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "REST Hooks"
        ],
        "summary": "Create a Hook Subscription",
        "description": "To receive hooks, you'll first need to subscribe to events one at a time *and* individually verify each subscription.\n\nThis operation is used to create hook subscriptions. During this process, Infusionsoft will attempt to verify your subscription. Continue reading to learn how that works.\n\nTo verify or reactivate a hook subscription, Infusionsoft will make a `POST` request with a temporary secret to the `hookUrl` you provided during creation. The secret is passed as the value of a header named `X-Hook-Secret`. Your response to that `POST` *must* have a status code of `200` and return the same `X-Hook-Secret` header and value pair. Once you've done that, you'll begin receiving hooks. Don't worry if verification fails; you can always [request another verification attempt](#!/REST_Hooks/verify_a_hook_subscription).\n\nNB: You will not receive events until the subscription is verified.\n\nIf the verification process seems confusing, head over to [RESTHooks.org](http://resthooks.org/docs/security/) for more on the concept.",
        "operationId": "create_a_hook_subscription",
        "requestBody": {
          "$ref": "#/components/requestBodies/RestHookRequest"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestHook"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/hooks/event_keys": {
      "get": {
        "tags": [
          "REST Hooks"
        ],
        "summary": "List Hook Event Types",
        "description": "### _What are REST Hooks?_\n\n_REST Hooks itself is not a specification, it is a collection of patterns that treat webhooks like subscriptions. These subscriptions are manipulated via a REST API just like any other resource._\n\n_With most modern REST APIs, polling is the only way to detect changes. But it doesn't have to be. On average, 98.5% of polls are wasted. There is a better way. REST Hooks enable real-time communication and eliminate polling._ -- [RESTHooks.org](http://RESTHooks.org)\n\nInfusionsoft offers a growing set of REST Hooks to keep you notified of changes in your data. To get started, use [List Hook Event Types](#!/REST_Hooks/list_hook_event_types) to discover event types. Event types are identified using _noun.verb dot syntax_, e.g.: `contact.add` or `invoice.delete`.\n\nAfter you’ve read this documentation, you might be interested in the [REST Hook Event and Retry policies](https://developer.infusionsoft.com/rest-hook-documentation/).\n\nNB: REST Hooks are **not** triggered by legacy action sets.\n\nOnce you've chosen the events you're interested in, subscribe to them via [Create a Hook Subscription](#!/REST_Hooks/create_a_hook_subscription).",
        "operationId": "list_hook_event_types",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/hooks/{key}": {
      "get": {
        "tags": [
          "REST Hooks"
        ],
        "summary": "Retrieve a Hook Subscription",
        "description": "Retrieves an existing hook subscription and its status.\n\nIf your hook subscription becomes inactive, you may request an activation attempt via [Verify a Hook Subscription](#!/REST_Hooks/verify_a_hook_subscription).",
        "operationId": "retrieve_a_hook_subscription",
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "description": "key",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestHook"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "REST Hooks"
        ],
        "summary": "Update a Hook Subscription",
        "description": "Modify an existing hook subscription using the provided values.",
        "operationId": "update_a_hook_subscription",
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "description": "key",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/RestHookRequest"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestHook"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "REST Hooks"
        ],
        "summary": "Delete a Hook Subscription",
        "description": "Stop receiving hooks by deleting an existing hook subscription.",
        "operationId": "delete_a_hook_subscription",
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "description": "key",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/hooks/{key}/delayedVerify": {
      "post": {
        "tags": [
          "REST Hooks"
        ],
        "summary": "Verify a Hook Subscription, Delayed",
        "description": "This operation is used to verify or reactivate a hook subscription out-of-band using RESTHooks.org's [Delayed Confirmation](http://resthooks.org/docs/security/) pattern.\n\nUse this verification method if you're not able to use the Immediate Confirmation provided through [Create a Hook Subscription](#!/REST_Hooks/create_a_hook_subscription) or [Verify a Hook Subscription](#!/REST_Hooks/verify_a_hook_subscription). This operation allows you to confirm a subscription by manually sending us the `X-Hook-Secret` you received.\n\nNB: **The `X-Hook-Secret` _must_ be passed as a _header_.**\n\nDon't worry if verification fails; you can always [request another verification attempt](#!/REST_Hooks/verify_a_hook_subscription).\n\nNB: You will not receive events until the subscription is verified.\n\nIf the verification process seems confusing, head over to [RESTHooks.org](http://resthooks.org/docs/security/) for more on the concept.",
        "operationId": "verify_a_hook_subscription_delayed",
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "description": "key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Hook-Secret",
            "in": "header",
            "description": "X-Hook-Secret",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestHook"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/hooks/{key}/verify": {
      "post": {
        "tags": [
          "REST Hooks"
        ],
        "summary": "Verify a Hook Subscription",
        "description": "This operation is used to verify or reactivate a hook subscription using RESTHooks.org's [Immediate Confirmation](http://resthooks.org/docs/security/) pattern.\n\nTo verify or reactivate a hook subscription, Infusionsoft will make a `POST` request with a temporary secret to the `hookUrl` you provided during creation. The secret is passed as the value of a header named `X-Hook-Secret`. Your response to that `POST` *must* have a status code of `200` and return the same `X-Hook-Secret` header and value pair. Once you've done that, you'll begin receiving hooks. Don't worry if verification fails; you can always [request another verification attempt](#!/REST_Hooks/verify_a_hook_subscription).\n\nNB: You will not receive events until the subscription is verified.\n\nIf the verification process seems confusing, head over to [RESTHooks.org](http://resthooks.org/docs/security/) for more on the concept.",
        "operationId": "verify_a_hook_subscription",
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "description": "key",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestHook"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/locales/countries": {
      "get": {
        "tags": [
          "Locale"
        ],
        "summary": "List Countries",
        "operationId": "listCountriesUsingGET",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CountriesByCode"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/locales/countries/{countryCode}/provinces": {
      "get": {
        "tags": [
          "Locale"
        ],
        "summary": "List a Country's Provinces",
        "operationId": "listCountriesUsingGET_1",
        "parameters": [
          {
            "name": "countryCode",
            "in": "path",
            "description": "countryCode",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProvincesByCode"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/merchants": {
      "get": {
        "tags": [
          "Merchant"
        ],
        "summary": "List Merchants",
        "description": "Retrieves a list of all merchant accounts",
        "operationId": "getMerchantAccountsUsingGET",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestMerchantAccountResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/notes": {
      "get": {
        "tags": [
          "Note"
        ],
        "summary": "List Notes",
        "description": "Retrieves a list of all notes",
        "operationId": "listNotesUsingGET",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "Sets a total of items to return",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Sets a beginning range of items to return",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "user_id",
            "in": "query",
            "description": "Filter based on the user id assigned to the note.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "contact_id",
            "in": "query",
            "description": "Filter based on the contact id assigned to the note.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NoteList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Note"
        ],
        "summary": "Create a Note",
        "description": "Creates a new note as the authenticated user. Either a \"title\" or \"body\" is required",
        "operationId": "createNoteUsingPOST",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RequestNote"
              }
            }
          },
          "description": "createNote",
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Note"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/notes/model": {
      "get": {
        "tags": [
          "Note"
        ],
        "summary": "Retrieve Note Model",
        "description": "Get the custom fields for the Note object",
        "operationId": "retrieveNoteModelUsingGET",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ObjectModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/notes/model/customFields": {
      "post": {
        "tags": [
          "Note"
        ],
        "summary": "Create a Custom Field",
        "description": "Adds a custom field of the specified type and options to the Note object.",
        "operationId": "createNoteCustomFieldUsingPOST",
        "requestBody": {
          "$ref": "#/components/requestBodies/CreateRestCustomField"
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomFieldMetaData"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/notes/{noteId}": {
      "get": {
        "tags": [
          "Note"
        ],
        "summary": "Retrieve a Note",
        "description": "Retrieves a single note",
        "operationId": "getNoteUsingGET",
        "parameters": [
          {
            "name": "noteId",
            "in": "path",
            "description": "noteId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Note"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Note"
        ],
        "summary": "Replace a Note",
        "description": "Replaces all values of a given note",
        "operationId": "updateNoteUsingPUT",
        "parameters": [
          {
            "name": "note",
            "in": "path",
            "description": "note",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RequestNote"
              }
            }
          },
          "description": "requestNote",
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Note"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Note"
        ],
        "summary": "Delete a Note",
        "description": "Deletes a note",
        "operationId": "deleteNoteUsingDELETE",
        "parameters": [
          {
            "name": "noteId",
            "in": "path",
            "description": "noteId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Note"
        ],
        "summary": "Update a Note",
        "description": "Updates a note with only the values provided in the request",
        "operationId": "updatePropertiesOnNoteUsingPATCH",
        "parameters": [
          {
            "name": "noteId",
            "in": "path",
            "description": "noteId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateNote"
              }
            }
          },
          "description": "note"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Note"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/oauth/connect/userinfo": {
      "get": {
        "tags": [
          "User Info"
        ],
        "summary": "Retrieve User Info",
        "description": "Retrieves information for the current authenticated end-user, as outlined by the [OpenID Connect specification](http://openid.net/specs/openid-connect-core-1_0.html#UserInfo).",
        "operationId": "getUserInfoUsingGET",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserInfoDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/opportunities": {
      "get": {
        "tags": [
          "Opportunity"
        ],
        "summary": "List Opportunities",
        "description": "Retrieves a list of all opportunities.\n\nPlease note: the sample response erroneously shows properties, such as _stage reasons_, that are unavailable through the list endpoint. Such properties are only available through the retrieve operation. Future versions of the Opportunity resource will correct the oversight.",
        "operationId": "listOpportunitiesUsingGET",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "Sets a total of items to return",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Sets a beginning range of items to return",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "user_id",
            "in": "query",
            "description": "Returns opportunities for the provided user id",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "stage_id",
            "in": "query",
            "description": "Returns opportunities for the provided stage id",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "search_term",
            "in": "query",
            "description": "Returns opportunities that match any of the contact's `given_name`, `family_name`, `company_name`, and `email_addresses` (searches `EMAIL1` only) fields as well as `opportunity_title`",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "order",
            "in": "query",
            "description": "Attribute to order items by",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "next_action",
                "opportunity_name",
                "contact_name",
                "date_created"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpportunityList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Opportunity"
        ],
        "summary": "Create an Opportunity",
        "description": "Creates a new opportunity as the authenticated user. NB: Opportunity must contain values for `opportunity_title`, `contact`, and `stage`.",
        "operationId": "createOpportunityUsingPOST",
        "requestBody": {
          "$ref": "#/components/requestBodies/Opportunity"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Opportunity"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Opportunity"
        ],
        "summary": "Replace an Opportunity",
        "description": "Replaces all values of a given opportunity",
        "operationId": "updateOpportunityUsingPUT",
        "requestBody": {
          "$ref": "#/components/requestBodies/Opportunity"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Opportunity"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/opportunities/model": {
      "get": {
        "tags": [
          "Opportunity"
        ],
        "summary": "Retrieve Opportunity Model",
        "description": "Get the custom fields for the Opportunity object",
        "operationId": "retrieveOpportunityModelUsingGET",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ObjectModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/opportunities/{opportunityId}": {
      "get": {
        "tags": [
          "Opportunity"
        ],
        "summary": "Retrieve an Opportunity",
        "description": "Retrives a single opportunity",
        "operationId": "getOpportunityUsingGET",
        "parameters": [
          {
            "name": "opportunityId",
            "in": "path",
            "description": "opportunityId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "optional_properties",
            "in": "query",
            "description": "Comma-delimited list of Opportunity properties to include in the response. (Some fields such as `custom_fields` aren't included, by default.)",
            "required": false,
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Opportunity"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Opportunity"
        ],
        "summary": "Update an Opportunity",
        "description": "Updates an opportunity with only the values provided in the request.",
        "operationId": "updatePropertiesOnOpportunityUsingPATCH",
        "parameters": [
          {
            "name": "opportunityId",
            "in": "path",
            "description": "opportunityId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/Opportunity"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Opportunity"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/opportunity/stage_pipeline": {
      "get": {
        "tags": [
          "Opportunity"
        ],
        "summary": "List Opportunity Stage Pipeline",
        "description": "Retrieves a list of all opportunity stages with pipeline details",
        "operationId": "listOpportunityStagePipelinesUsingGET",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SalesPipeline"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/orders": {
      "get": {
        "tags": [
          "E-Commerce"
        ],
        "summary": "List Orders",
        "description": "Retrieves a list of all orders using the specified search criteria. Each order may or may not have items.",
        "operationId": "listOrdersUsingGET",
        "parameters": [
          {
            "name": "since",
            "in": "query",
            "description": "Date to start searching from ex. `2017-01-01T22:17:59.039Z`",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "until",
            "in": "query",
            "description": "Date to search to ex. `2017-01-01T22:17:59.039Z`",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Sets a total of items to return",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Sets a beginning range of items to return",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "paid",
            "in": "query",
            "description": "Sets paid status of items to return",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "order",
            "in": "query",
            "description": "Attribute to order items by",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "contact_id",
            "in": "query",
            "description": "Returns orders for the provided contact id",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "product_id",
            "in": "query",
            "description": "Returns orders containing the provided product id",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "E-Commerce"
        ],
        "summary": "Create an Order",
        "description": "Create a one time order with order items.",
        "operationId": "createOrderUsingPOST",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateOrder"
              }
            }
          },
          "description": "createOrder",
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/orders/model": {
      "get": {
        "tags": [
          "E-Commerce"
        ],
        "summary": "Retrieve Custom Order Model",
        "description": "Get the custom fields for the Order object",
        "operationId": "retrieveOrderModelUsingGET",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ObjectModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/orders/{orderId}": {
      "get": {
        "tags": [
          "E-Commerce"
        ],
        "summary": "Retrieve an Order",
        "description": "Retrieves a single order. The order may or may not have items.",
        "operationId": "getOrderUsingGET",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "orderId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "E-Commerce"
        ],
        "summary": "Delete an Order",
        "description": "Delete an order that does not have a payment",
        "operationId": "deleteOrderUsingDELETE",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "orderId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/orders/{orderId}/items": {
      "post": {
        "tags": [
          "E-Commerce"
        ],
        "summary": "Create an Order Item",
        "description": "Creates an order item on an existing order.",
        "operationId": "createOrderItemsOnOrderUsingPOST",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "orderId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateOrderItem"
              }
            }
          },
          "description": "createOrderItem",
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderItem"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/orders/{orderId}/items/{orderItemId}": {
      "delete": {
        "tags": [
          "E-Commerce"
        ],
        "summary": "Delete an Order Item",
        "description": "Delete an order Item on specified Order",
        "operationId": "deleteOrderOrderItemUsingDELETE",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "orderId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "orderItemId",
            "in": "path",
            "description": "orderItemId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/orders/{orderId}/paymentPlan": {
      "put": {
        "tags": [
          "E-Commerce"
        ],
        "summary": "Replace an Order Pay Plan",
        "description": "Replaces the order's payment plan with the given values.",
        "operationId": "replacePaymentPlanUsingPUT",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "orderId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PaymentPlan"
              }
            }
          },
          "description": "paymentPlan",
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentPlan"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/orders/{orderId}/payments": {
      "get": {
        "tags": [
          "E-Commerce"
        ],
        "summary": "loadOrderPayments",
        "operationId": "loadOrderPaymentsUsingGET",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "orderId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/InvoicePayment"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "E-Commerce"
        ],
        "summary": "Create a Payment",
        "description": "Creates a payment record that can charge a credit card. Alternatively, adds a record of historical or external payment of cash or credit card.",
        "operationId": "createPaymentOnOrderUsingPOST",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "orderId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePayment"
              }
            }
          },
          "description": "createPayment"
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentResult"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/orders/{orderId}/transactions": {
      "get": {
        "tags": [
          "E-Commerce"
        ],
        "summary": "Retrieve Order Transactions",
        "description": "Retrieves a list of all transactions on a given order using the specified search criteria",
        "operationId": "listTransactionsForOrderUsingGET",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "orderId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "since",
            "in": "query",
            "description": "Date to start searching from ex. `2017-01-01T22:17:59.039Z`",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "until",
            "in": "query",
            "description": "Date to search to ex. `2017-01-01T22:17:59.039Z`",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Sets a total of items to return",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Sets a beginning range of items to return",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "contact_id",
            "in": "query",
            "description": "Returns transactions for the provided contact id",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/products": {
      "get": {
        "tags": [
          "Product"
        ],
        "summary": "List Products",
        "description": "Retrieves a list of all products",
        "operationId": "listProductsUsingGET",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "Sets a total of items to return",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Sets a beginning range of items to return",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "active",
            "in": "query",
            "description": "Sets status of items to return",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Product"
        ],
        "summary": "Create a Product",
        "description": "Creates a new product",
        "operationId": "createProductUsingPOST",
        "requestBody": {
          "$ref": "#/components/requestBodies/CreateProduct"
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Product"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/products/sync": {
      "get": {
        "tags": [
          "Product"
        ],
        "summary": "Retrieve Synced Products",
        "description": "The Sync endpoint returns a set of products that have been updated or created since the last result set was retrieved, minus any products that have been deleted.",
        "operationId": "listProductsFromSyncTokenUsingGET",
        "parameters": [
          {
            "name": "sync_token",
            "in": "query",
            "description": "sync_token",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Sets a total of items to return",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Sets a beginning range of items to return",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductStatusList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/products/{productId}": {
      "get": {
        "tags": [
          "Product"
        ],
        "summary": "Retrieve a Product",
        "operationId": "retrieveProductUsingGET",
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "description": "productId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Product"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Product"
        ],
        "summary": "Delete a Product",
        "description": "Deletes a product and its subscriptions",
        "operationId": "deleteProductUsingDELETE",
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "description": "productId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Product"
        ],
        "summary": "Update a Product",
        "description": "Updates a Product with only the values provided in the request.",
        "operationId": "updateProductUsingPATCH",
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "description": "productId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/CreateProduct"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Product"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/products/{productId}/image": {
      "post": {
        "tags": [
          "Product"
        ],
        "summary": "Upload a product image",
        "description": "Max payload 3 megabytes, the `file_data` is base64 encoded.",
        "operationId": "createProductImageUsingPOST",
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "description": "productId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateProductImage"
              }
            }
          },
          "description": "restProductImage",
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Product"
        ],
        "summary": "Delete a product image",
        "operationId": "deleteProductImageUsingDELETE",
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "description": "productId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/products/{productId}/subscriptions": {
      "post": {
        "tags": [
          "Product"
        ],
        "summary": "Create a Product Subscription",
        "description": "Creates a new product subscription",
        "operationId": "createProductSubscriptionUsingPOST",
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "description": "productId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateProductSubscription"
              }
            }
          },
          "description": "createProductSubscription",
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductSubscription"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/products/{productId}/subscriptions/{subscriptionId}": {
      "get": {
        "tags": [
          "Product"
        ],
        "summary": "Retrieve a Product Subscription",
        "operationId": "retrieveProductSubscriptionUsingGET",
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "description": "productId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "subscriptionId",
            "in": "path",
            "description": "subscriptionId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductSubscription"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Product"
        ],
        "summary": "Delete a Product Subscription",
        "description": "Deletes a product subscription",
        "operationId": "deleteProductSubscriptionUsingDELETE",
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "description": "productId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "subscriptionId",
            "in": "path",
            "description": "subscriptionId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/setting/application/enabled": {
      "get": {
        "tags": [
          "Setting"
        ],
        "summary": "Retrieve application status",
        "description": "Retrieves whether the application is enabled",
        "operationId": "getApplicationEnabledUsingGET",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Setting"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/setting/contact/optionTypes": {
      "get": {
        "tags": [
          "Setting"
        ],
        "summary": "List Contact types",
        "description": "Lists the Contact types in a comma-separated list",
        "operationId": "getContactOptionTypesUsingGET",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Setting"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/subscriptions": {
      "get": {
        "tags": [
          "E-Commerce"
        ],
        "summary": "List Subscriptions",
        "description": "Retrieves a list of all subcriptions using the specified search criteria.",
        "operationId": "listSubscriptionsUsingGET",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "Sets a total of items to return",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Sets a beginning range of items to return",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "contact_id",
            "in": "query",
            "description": "Returns subscriptions for the provided contact id",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriptionList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "E-Commerce"
        ],
        "summary": "Create Subscription",
        "description": "Creates a subscription with the specified product and product subscription id.",
        "operationId": "createSubscriptionUsingPOST",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSubscription"
              }
            }
          },
          "description": "createSubscription",
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Subscription"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/subscriptions/model": {
      "get": {
        "tags": [
          "E-Commerce"
        ],
        "summary": "Retrieve Subscription Model",
        "description": "Get the custom fields for the Subscription object",
        "operationId": "retrieveSubscriptionModelUsingGET",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ObjectModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/tags": {
      "get": {
        "tags": [
          "Tags"
        ],
        "summary": "List Tags",
        "description": "Retrieve a list of tags defined in the application",
        "operationId": "listTagsUsingGET",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "Sets a total of items to return",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Sets a beginning range of items to return",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "category",
            "in": "query",
            "description": "Category Id of tags to filter by",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "Filter for tags with a specific name",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Tags"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Tags"
        ],
        "summary": "Create Tag",
        "description": "Create a new tag",
        "operationId": "createTagUsingPOST",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTag"
              }
            }
          },
          "description": "tag",
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Tag"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/tags/categories": {
      "post": {
        "tags": [
          "Tags"
        ],
        "summary": "Create Tag Category",
        "description": "Create a new tag category",
        "operationId": "createTagCategoryUsingPOST",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTagCategory"
              }
            }
          },
          "description": "tagCategory",
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TagCategory"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/tags/{id}": {
      "get": {
        "tags": [
          "Tags"
        ],
        "summary": "Retrieve a Tag",
        "description": "Retrieves a single tag",
        "operationId": "getTagUsingGET",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Tag"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/tags/{tagId}/companies": {
      "get": {
        "tags": [
          "Tags"
        ],
        "summary": "List Tagged Companies",
        "description": "Retrieves a list of companies that have the given tag applied",
        "operationId": "listCompaniesForTagIdUsingGET",
        "parameters": [
          {
            "name": "tagId",
            "in": "path",
            "description": "tagId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Sets a total of items to return",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Sets a beginning range of items to return",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaggedCompanyList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/tags/{tagId}/contacts": {
      "get": {
        "tags": [
          "Tags"
        ],
        "summary": "List Tagged Contacts",
        "description": "Retrieves a list of contacts that have the given tag applied",
        "operationId": "listContactsForTagIdUsingGET",
        "parameters": [
          {
            "name": "tagId",
            "in": "path",
            "description": "tagId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Sets a total of items to return",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Sets a beginning range of items to return",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaggedContactList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Tags"
        ],
        "summary": "Apply Tag to Contacts",
        "description": "Apply a tag to a list of contacts",
        "operationId": "applyTagToContactIdsUsingPOST",
        "parameters": [
          {
            "name": "tagId",
            "in": "path",
            "description": "tagId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/SetOfIds"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Entry_long_string_"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Tags"
        ],
        "summary": "Remove Tag from Contacts",
        "description": "Remove a tag from a list of contacts",
        "operationId": "removeTagFromContactIdsUsingDELETE",
        "parameters": [
          {
            "name": "tagId",
            "in": "path",
            "description": "tagId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "ids",
            "in": "query",
            "description": "ids",
            "required": true,
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/tags/{tagId}/contacts/{contactId}": {
      "delete": {
        "tags": [
          "Tags"
        ],
        "summary": "Remove Tag from Contact",
        "description": "Remove a tag from a Contact",
        "operationId": "removeTagFromContactIdUsingDELETE",
        "parameters": [
          {
            "name": "tagId",
            "in": "path",
            "description": "tagId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "contactId",
            "in": "path",
            "description": "contactId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/tasks": {
      "get": {
        "tags": [
          "Task"
        ],
        "summary": "List Tasks",
        "description": "Retrieves a list of all tasks using the specified search criteria",
        "operationId": "listTasksUsingGET",
        "parameters": [
          {
            "name": "contact_id",
            "in": "query",
            "description": "contact_id",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "has_due_date",
            "in": "query",
            "description": "has_due_date",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "user_id",
            "in": "query",
            "description": "user_id",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "since",
            "in": "query",
            "description": "Date to start searching from ex. `2017-01-01T22:17:59.039Z`",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "until",
            "in": "query",
            "description": "Date to search to ex. `2017-01-01T22:17:59.039Z`",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "completed",
            "in": "query",
            "description": "Sets completed status of items to return",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Sets a total of items to return",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Sets a beginning range of items to return",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "order",
            "in": "query",
            "description": "Attribute to order items by",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Task"
        ],
        "summary": "Create a Task",
        "description": "Creates a new task as the authenticated user. NB: Contact must contain at least one item in the fields `title` and `due_date`. All other attributes are optional",
        "operationId": "createTaskUsingPOST",
        "requestBody": {
          "$ref": "#/components/requestBodies/Task"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Task"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/tasks/model": {
      "get": {
        "tags": [
          "Task"
        ],
        "summary": "Retrieve Task Model",
        "description": "Get the custom fields for the Task object",
        "operationId": "retrieveTaskModelUsingGET",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ObjectModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/tasks/model/customFields": {
      "post": {
        "tags": [
          "Task"
        ],
        "summary": "Create a Custom Field",
        "description": "Adds a custom field of the specified type and options to the Task object.",
        "operationId": "createTaskCustomFieldUsingPOST",
        "requestBody": {
          "$ref": "#/components/requestBodies/CreateRestCustomField"
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomFieldMetaData"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/tasks/search": {
      "get": {
        "tags": [
          "Task"
        ],
        "summary": "Search Tasks",
        "description": "Retrieves Tasks belonging to the authenticated user using the specified search criteria",
        "operationId": "listTasksForCurrentUserUsingGET",
        "parameters": [
          {
            "name": "contact_id",
            "in": "query",
            "description": "Returns tasks for the provided contact id",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "has_due_date",
            "in": "query",
            "description": "Returns tasks that have an 'action date' when set to true",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "user_id",
            "in": "query",
            "description": "Returns tasks for the provided user id",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "since",
            "in": "query",
            "description": "Date to start searching from ex. `2017-01-01T22:17:59.039Z`",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "until",
            "in": "query",
            "description": "Date to search to ex. `2017-01-01T22:17:59.039Z`",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "completed",
            "in": "query",
            "description": "Sets completed status of items to return",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Sets a total of items to return",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Sets a beginning range of items to return",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "order",
            "in": "query",
            "description": "Attribute to order items by",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/tasks/{taskId}": {
      "get": {
        "tags": [
          "Task"
        ],
        "summary": "Retrieve a Task",
        "description": "Retrieves a single task",
        "operationId": "getTaskUsingGET",
        "parameters": [
          {
            "name": "taskId",
            "in": "path",
            "description": "taskId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Task"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Task"
        ],
        "summary": "Replace a Task",
        "description": "Replaces a task with the values provided in the request",
        "operationId": "updateTaskUsingPUT",
        "parameters": [
          {
            "name": "taskId",
            "in": "path",
            "description": "taskId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/Task"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Task"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Task"
        ],
        "summary": "Delete a Task",
        "description": "Permanently deletes a task",
        "operationId": "deleteTaskUsingDELETE",
        "parameters": [
          {
            "name": "taskId",
            "in": "path",
            "description": "taskId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Task"
        ],
        "summary": "Update a Task",
        "description": "Updates a task with only the values provided in the request",
        "operationId": "updatePropertiesOnTaskUsingPATCH",
        "parameters": [
          {
            "name": "taskId",
            "in": "path",
            "description": "taskId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/Task"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Task"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/transactions": {
      "get": {
        "tags": [
          "E-Commerce"
        ],
        "summary": "List Transactions",
        "description": "Retrieves a list transactions for a given contact",
        "operationId": "listTransactionsUsingGET",
        "parameters": [
          {
            "name": "since",
            "in": "query",
            "description": "Date to start searching from ex. `2017-01-01T22:17:59.039Z`",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "until",
            "in": "query",
            "description": "Date to search to ex. `2017-01-01T22:17:59.039Z`",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Sets a total of items to return",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Sets a beginning range of items to return",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "contact_id",
            "in": "query",
            "description": "Returns transactions for the provided contact id",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/transactions/{transactionId}": {
      "get": {
        "tags": [
          "E-Commerce"
        ],
        "summary": "Retrieve a Transaction",
        "description": "Retrieves a single transaction",
        "operationId": "getTransactionUsingGET",
        "parameters": [
          {
            "name": "transactionId",
            "in": "path",
            "description": "transactionId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Transaction"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/users": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "List Users",
        "description": "Retrieves a list of all users",
        "operationId": "listUsersUsingGET",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "Sets a total of items to return",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Sets a beginning range of items to return",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "include_inactive",
            "in": "query",
            "description": "Include users that are Inactive in results, defaults to TRUE",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "include_partners",
            "in": "query",
            "description": "Include partner users in results, defaults to TRUE",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Users"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Create a User",
        "description": "Creates a new user record. NB: Users will be invited to the application and remain in the \"Invited\" status until the user accepts the invite. \"Inactive\" users will not take up a user license.",
        "operationId": "createUserUsingPOST",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUser"
              }
            }
          },
          "description": "user"
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestUser"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    }
  },
  "servers": [
    {
      "url": "https://api.infusionsoft.com/crm/rest/v1"
    }
  ],
  "components": {
    "requestBodies": {
      "Appointment": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Appointment"
            }
          }
        },
        "description": "appointmentDTO",
        "required": true
      },
      "Opportunity": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Opportunity"
            }
          }
        },
        "description": "opportunity"
      },
      "CreateRestCustomField": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/CreateRestCustomField"
            }
          }
        },
        "description": "customField",
        "required": true
      },
      "RestHookRequest": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/RestHookRequest"
            }
          }
        },
        "description": "restHookRequest",
        "required": true
      },
      "SetOfIds": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/SetOfIds"
            }
          }
        },
        "description": "ids",
        "required": true
      },
      "CreateOrPatchContact": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/CreateOrPatchContact"
            }
          }
        },
        "description": "contact"
      },
      "CreateOrPatchCompany": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/CreateOrPatchCompany"
            }
          }
        },
        "description": "company"
      },
      "EmailSentCreate": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/EmailSentCreate"
            }
          }
        },
        "description": "Email records to persist, with content."
      },
      "FileUpload": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/FileUpload"
            }
          }
        },
        "description": "fileUpload"
      },
      "CreateProduct": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/CreateProduct"
            }
          }
        },
        "description": "createProduct",
        "required": true
      },
      "Task": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Task"
            }
          }
        },
        "description": "task",
        "required": true
      }
    },
    "securitySchemes": {
      "oauth2": {
        "type": "oauth2",
        "flows": {
          "authorizationCode": {
            "authorizationUrl": "https://accounts.infusionsoft.com/app/oauth/authorize",
            "tokenUrl": "https://api.infusionsoft.com/token",
            "scopes": {}
          }
        }
      }
    },
    "schemas": {
      "Appointment": {
        "type": "object",
        "required": [
          "end_date",
          "start_date",
          "title"
        ],
        "properties": {
          "contact_id": {
            "type": "integer",
            "format": "int64",
            "description": "Required for pop-up reminders"
          },
          "description": {
            "type": "string"
          },
          "end_date": {
            "type": "string"
          },
          "location": {
            "type": "string"
          },
          "remind_time": {
            "type": "integer",
            "format": "int32",
            "description": "Value in minutes before start_date to show pop-up reminder.  Acceptable values are [5,10,15,30,60,120,240,480,1440,2880]"
          },
          "start_date": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "user": {
            "type": "integer",
            "format": "int64",
            "description": "Required only for pop-up reminders"
          }
        }
      },
      "SalesPipeline": {
        "type": "object",
        "properties": {
          "end_stage": {
            "type": "boolean"
          },
          "is_default": {
            "type": "boolean"
          },
          "stage_count": {
            "type": "integer",
            "format": "int32"
          },
          "stage_id": {
            "type": "integer",
            "format": "int64"
          },
          "stage_name": {
            "type": "string"
          },
          "stage_order": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "Address": {
        "type": "object",
        "properties": {
          "country_code": {
            "type": "string"
          },
          "line1": {
            "type": "string"
          },
          "line2": {
            "type": "string"
          },
          "locality": {
            "type": "string"
          },
          "region": {
            "type": "string"
          },
          "zip_code": {
            "type": "string"
          },
          "zip_four": {
            "type": "string"
          }
        }
      },
      "ShippingInformation": {
        "type": "object",
        "properties": {
          "city": {
            "type": "string"
          },
          "company": {
            "type": "string"
          },
          "country": {
            "type": "string"
          },
          "first_name": {
            "type": "string"
          },
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "last_name": {
            "type": "string"
          },
          "middle_name": {
            "type": "string"
          },
          "phone": {
            "type": "string"
          },
          "state": {
            "type": "string"
          },
          "street1": {
            "type": "string"
          },
          "street2": {
            "type": "string"
          },
          "zip": {
            "type": "string"
          }
        }
      },
      "CreateOrPatchCompany": {
        "type": "object",
        "required": [
          "company_name"
        ],
        "properties": {
          "address": {
            "$ref": "#/components/schemas/CompanyAddress"
          },
          "company_name": {
            "type": "string"
          },
          "custom_fields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomFieldValue"
            }
          },
          "email_address": {
            "type": "string"
          },
          "fax_number": {
            "$ref": "#/components/schemas/CompanyFaxNumber"
          },
          "notes": {
            "type": "string"
          },
          "opt_in_reason": {
            "type": "string"
          },
          "phone_number": {
            "$ref": "#/components/schemas/CompanyPhoneNumber"
          },
          "website": {
            "type": "string"
          }
        }
      },
      "Product": {
        "type": "object",
        "required": [
          "id",
          "product_name"
        ],
        "properties": {
          "active": {
            "type": "boolean"
          },
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "product_desc": {
            "type": "string"
          },
          "product_name": {
            "type": "string"
          },
          "product_price": {
            "type": "number",
            "format": "double"
          },
          "product_short_desc": {
            "type": "string"
          },
          "sku": {
            "type": "string"
          },
          "subscription_only": {
            "type": "boolean"
          },
          "subscription_plans": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductSubscription"
            }
          },
          "url": {
            "type": "string"
          }
        }
      },
      "Users": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "format": "int32"
          },
          "next": {
            "type": "string"
          },
          "previous": {
            "type": "string"
          },
          "users": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RestUser"
            }
          }
        }
      },
      "Item": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "type": "string"
          },
          "next_item_id": {
            "type": "integer",
            "format": "int64"
          },
          "previous_item_id": {
            "type": "integer",
            "format": "int64"
          },
          "type": {
            "type": "string",
            "enum": [
              "NULL",
              "Start",
              "Wait",
              "DelayTimer",
              "ContactTimer",
              "DateTimer",
              "Email",
              "BardEmail",
              "EmailConfirm",
              "Voice",
              "Fax",
              "Letter",
              "SMS",
              "Tag",
              "Opportunity",
              "Note",
              "Task",
              "CompleteTasks",
              "Appointment",
              "AssignOwner",
              "FieldValue",
              "Fulfillment",
              "CreateOrder",
              "Deal",
              "Http",
              "CustomerHub",
              "ActionSet"
            ]
          }
        }
      },
      "EmailSentQueryResultWithContent": {
        "type": "object",
        "properties": {
          "clicked_date": {
            "type": "string",
            "format": "date-time"
          },
          "contact_id": {
            "type": "integer",
            "format": "int64"
          },
          "headers": {
            "type": "string"
          },
          "html_content": {
            "type": "string",
            "description": "Base64 encoded HTML"
          },
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "opened_date": {
            "type": "string",
            "format": "date-time"
          },
          "original_provider": {
            "type": "string",
            "enum": [
              "UNKNOWN",
              "INFUSIONSOFT",
              "MICROSOFT",
              "GOOGLE"
            ]
          },
          "original_provider_id": {
            "type": "string"
          },
          "plain_content": {
            "type": "string",
            "description": "Base64 encoded plain text"
          },
          "received_date": {
            "type": "string",
            "format": "date-time"
          },
          "sent_date": {
            "type": "string",
            "format": "date-time"
          },
          "sent_from_address": {
            "type": "string"
          },
          "sent_from_reply_address": {
            "type": "string"
          },
          "sent_to_address": {
            "type": "string"
          },
          "sent_to_bcc_addresses": {
            "type": "string"
          },
          "sent_to_cc_addresses": {
            "type": "string"
          },
          "subject": {
            "type": "string"
          }
        }
      },
      "Goal": {
        "type": "object",
        "properties": {
          "historical_contact_counts": {
            "$ref": "#/components/schemas/HistoricalCounts"
          },
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "type": "string"
          },
          "next_sequence_ids": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            }
          },
          "previous_sequence_ids": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            }
          },
          "type": {
            "type": "string",
            "enum": [
              "WebForm",
              "LandingPage",
              "Survey",
              "LinkClick",
              "EmailOpened",
              "Score",
              "Purchase",
              "FailedPurchase",
              "Quote",
              "WebsiteTrigger",
              "InternalForm",
              "SmartForm",
              "Task",
              "StageMove",
              "Note",
              "Tag",
              "PipelineStageMove",
              "GroSocial",
              "TwitterForm",
              "API",
              "WordPress",
              "NewLandingPage"
            ]
          }
        }
      },
      "FaxNumber": {
        "type": "object",
        "required": [
          "field"
        ],
        "properties": {
          "field": {
            "type": "string",
            "enum": [
              "FAX1",
              "FAX2"
            ]
          },
          "number": {
            "type": "string"
          },
          "type": {
            "type": "string"
          }
        }
      },
      "Subscription": {
        "type": "object",
        "properties": {
          "active": {
            "type": "boolean"
          },
          "allow_tax": {
            "type": "boolean"
          },
          "auto_charge": {
            "type": "boolean"
          },
          "billing_amount": {
            "type": "number",
            "format": "double"
          },
          "billing_cycle": {
            "type": "string",
            "enum": [
              "YEAR",
              "MONTH",
              "WEEK",
              "DAY"
            ]
          },
          "billing_frequency": {
            "type": "integer",
            "format": "int32"
          },
          "contact_id": {
            "type": "integer",
            "format": "int64"
          },
          "credit_card_id": {
            "type": "integer",
            "format": "int64"
          },
          "end_date": {
            "type": "string",
            "format": "date"
          },
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "next_bill_date": {
            "type": "string",
            "format": "date"
          },
          "payment_gateway_id": {
            "type": "integer",
            "format": "int64"
          },
          "product_id": {
            "type": "integer",
            "format": "int64"
          },
          "quantity": {
            "type": "integer",
            "format": "int64"
          },
          "sale_affiliate_id": {
            "type": "integer",
            "format": "int64"
          },
          "start_date": {
            "type": "string",
            "format": "date"
          },
          "subscription_plan_id": {
            "type": "integer",
            "format": "int64"
          },
          "use_default_payment_gateway": {
            "type": "boolean"
          }
        }
      },
      "Tags": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "format": "int32"
          },
          "next": {
            "type": "string"
          },
          "previous": {
            "type": "string"
          },
          "tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Tag"
            }
          }
        }
      },
      "ContactAddress": {
        "type": "object",
        "required": [
          "field"
        ],
        "properties": {
          "country_code": {
            "type": "string"
          },
          "field": {
            "type": "string",
            "enum": [
              "BILLING",
              "SHIPPING",
              "OTHER"
            ]
          },
          "line1": {
            "type": "string"
          },
          "line2": {
            "type": "string"
          },
          "locality": {
            "type": "string"
          },
          "postal_code": {
            "type": "string",
            "description": "Field used to store postal codes containing a combination of letters and numbers ex. 'EC1A', 'S1 2HE', '75000'"
          },
          "region": {
            "type": "string"
          },
          "zip_code": {
            "type": "string",
            "description": "Mainly used in the United States, this is typically numeric. ex. '85001', '90002' Note: this is to be used instead of 'postal_code', not in addition to."
          },
          "zip_four": {
            "type": "string",
            "description": "Last four of a full zip code ex. '8244', '4320'. This field is supplemental to the zip_code field, otherwise will be ignored."
          }
        }
      },
      "CreateOrderItem": {
        "type": "object",
        "required": [
          "product_id",
          "quantity"
        ],
        "properties": {
          "description": {
            "type": "string"
          },
          "price": {
            "type": "string",
            "description": "Overridable price of the product, if not specified, the default will be used. Must be greater than or equal to 0."
          },
          "product_id": {
            "type": "integer",
            "format": "int64",
            "description": "The id of the product to be added to the order."
          },
          "quantity": {
            "type": "integer",
            "format": "int32",
            "description": "Quantity must be greater than or equal to 1"
          }
        }
      },
      "CreateProduct": {
        "type": "object",
        "required": [
          "product_name"
        ],
        "properties": {
          "active": {
            "type": "boolean"
          },
          "product_desc": {
            "type": "string"
          },
          "product_name": {
            "type": "string"
          },
          "product_price": {
            "type": "number",
            "format": "double"
          },
          "product_short_desc": {
            "type": "string"
          },
          "sku": {
            "type": "string"
          },
          "subscription_only": {
            "type": "boolean"
          }
        }
      },
      "RestPartialContact": {
        "type": "object",
        "properties": {
          "addresses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContactAddress"
            }
          },
          "anniversary": {
            "type": "string",
            "format": "date-time"
          },
          "birthday": {
            "type": "string",
            "format": "date-time"
          },
          "company": {
            "$ref": "#/components/schemas/CompanyReference"
          },
          "contact_type": {
            "type": "string"
          },
          "custom_fields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomFieldValue"
            }
          },
          "date_created": {
            "type": "string",
            "format": "date-time"
          },
          "email_addresses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EmailAddress"
            }
          },
          "email_opted_in": {
            "type": "boolean"
          },
          "email_status": {
            "type": "string",
            "enum": [
              "UnengagedMarketable",
              "SingleOptIn",
              "DoubleOptin",
              "Confirmed",
              "UnengagedNonMarketable",
              "NonMarketable",
              "Lockdown",
              "Bounce",
              "HardBounce",
              "Manual",
              "Admin",
              "System",
              "ListUnsubscribe",
              "Feedback",
              "Spam",
              "Invalid",
              "Deactivated"
            ]
          },
          "family_name": {
            "type": "string"
          },
          "fax_numbers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FaxNumber"
            }
          },
          "given_name": {
            "type": "string"
          },
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "job_title": {
            "type": "string"
          },
          "last_updated": {
            "type": "string",
            "format": "date-time"
          },
          "lead_source_id": {
            "type": "integer",
            "format": "int64"
          },
          "middle_name": {
            "type": "string"
          },
          "owner_id": {
            "type": "integer",
            "format": "int64"
          },
          "phone_numbers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PhoneNumber"
            }
          },
          "preferred_locale": {
            "type": "string",
            "example": "en_US"
          },
          "preferred_name": {
            "type": "string"
          },
          "prefix": {
            "type": "string"
          },
          "social_accounts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SocialAccount"
            }
          },
          "source_type": {
            "type": "string",
            "enum": [
              "WEBFORM",
              "LANDINGPAGE",
              "IMPORT",
              "MANUAL",
              "API",
              "OTHER",
              "UNKNOWN"
            ]
          },
          "spouse_name": {
            "type": "string"
          },
          "suffix": {
            "type": "string"
          },
          "time_zone": {
            "type": "string"
          },
          "website": {
            "type": "string"
          }
        }
      },
      "EmailAddress": {
        "type": "object",
        "required": [
          "field"
        ],
        "properties": {
          "email": {
            "type": "string"
          },
          "field": {
            "type": "string",
            "enum": [
              "EMAIL1",
              "EMAIL2",
              "EMAIL3"
            ]
          }
        }
      },
      "CompanyPhoneNumber": {
        "type": "object",
        "properties": {
          "extension": {
            "type": "string"
          },
          "number": {
            "type": "string"
          },
          "type": {
            "type": "string"
          }
        }
      },
      "CreditCardAdded": {
        "type": "object",
        "properties": {
          "address": {
            "$ref": "#/components/schemas/ContactAddress"
          },
          "card_type": {
            "type": "string"
          },
          "contact_id": {
            "type": "integer",
            "format": "int64"
          },
          "email_address": {
            "type": "string"
          },
          "expiration_month": {
            "type": "string"
          },
          "expiration_year": {
            "type": "string"
          },
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "maestro_issue_number": {
            "type": "string"
          },
          "maestro_start_date_month": {
            "type": "string"
          },
          "maestro_start_date_year": {
            "type": "string"
          },
          "name_on_card": {
            "type": "string"
          },
          "validation_message": {
            "type": "string"
          },
          "validation_status": {
            "type": "string"
          }
        }
      },
      "Note": {
        "type": "object",
        "properties": {
          "body": {
            "type": "string"
          },
          "contact_id": {
            "type": "integer",
            "format": "int64"
          },
          "date_created": {
            "type": "string",
            "format": "date-time"
          },
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "last_updated": {
            "type": "string",
            "format": "date-time"
          },
          "last_updated_by": {
            "$ref": "#/components/schemas/NoteUser"
          },
          "title": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "Appointment",
              "Call",
              "Email",
              "Fax",
              "Letter",
              "Other"
            ]
          },
          "user_id": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "TaggedContact": {
        "type": "object",
        "properties": {
          "contact": {
            "$ref": "#/components/schemas/BasicContact"
          },
          "date_applied": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "TaggedCompanyList": {
        "type": "object",
        "properties": {
          "companies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TaggedCompany"
            }
          },
          "count": {
            "type": "integer",
            "format": "int32"
          },
          "next": {
            "type": "string"
          },
          "previous": {
            "type": "string"
          }
        }
      },
      "ContactTagList": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "format": "int32"
          },
          "next": {
            "type": "string"
          },
          "previous": {
            "type": "string"
          },
          "tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContactTag"
            }
          }
        }
      },
      "EmailSentCreateError": {
        "type": "object",
        "properties": {
          "email": {
            "$ref": "#/components/schemas/EmailSentCreate"
          },
          "error_message": {
            "type": "string"
          }
        }
      },
      "ContactOrigin": {
        "type": "object",
        "required": [
          "date",
          "ip_address"
        ],
        "properties": {
          "date": {
            "type": "string",
            "format": "date-time"
          },
          "ip_address": {
            "type": "string"
          }
        }
      },
      "CreateTagCategory": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "description": {
            "type": "string",
            "description": "The category description"
          },
          "name": {
            "type": "string",
            "description": "The category name"
          }
        }
      },
      "ProductStatusList": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "format": "int32"
          },
          "next": {
            "type": "string"
          },
          "previous": {
            "type": "string"
          },
          "product_statuses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductStatus"
            }
          },
          "sync_token": {
            "type": "string"
          }
        }
      },
      "ObjectModel": {
        "type": "object",
        "properties": {
          "custom_fields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomFieldMetaData"
            }
          },
          "optional_properties": {
            "type": "array",
            "description": "These fields are not transmitted by default on this model, but can be requested by specifying them in a comma-separated list in the optional_properties query parameter.",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "AddressInformation": {
        "type": "object",
        "properties": {
          "company": {
            "type": "string"
          },
          "country_code": {
            "type": "string"
          },
          "first_name": {
            "type": "string"
          },
          "last_name": {
            "type": "string"
          },
          "line1": {
            "type": "string"
          },
          "line2": {
            "type": "string"
          },
          "locality": {
            "type": "string"
          },
          "middle_name": {
            "type": "string"
          },
          "phone": {
            "type": "string"
          },
          "region": {
            "type": "string"
          },
          "zip_code": {
            "type": "string"
          },
          "zip_four": {
            "type": "string"
          }
        }
      },
      "UpdateEmailAddress": {
        "type": "object",
        "required": [
          "opted_in",
          "reason"
        ],
        "properties": {
          "opted_in": {
            "type": "boolean"
          },
          "reason": {
            "type": "string"
          }
        }
      },
      "SimpleOpportunityStage": {
        "type": "object",
        "required": [
          "id"
        ],
        "properties": {
          "details": {
            "$ref": "#/components/schemas/StageDetails"
          },
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "type": "string"
          },
          "reasons": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "StackTraceElement": {
        "type": "object",
        "properties": {
          "className": {
            "type": "string"
          },
          "fileName": {
            "type": "string"
          },
          "lineNumber": {
            "type": "integer",
            "format": "int32"
          },
          "methodName": {
            "type": "string"
          },
          "nativeMethod": {
            "type": "boolean"
          }
        }
      },
      "SequencePath": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Item"
            }
          }
        }
      },
      "UpdateNote": {
        "type": "object",
        "properties": {
          "body": {
            "type": "string"
          },
          "contact_id": {
            "type": "integer",
            "format": "int64"
          },
          "title": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "Appointment",
              "Call",
              "Email",
              "Fax",
              "Letter",
              "Other"
            ]
          },
          "user_id": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "ContactTag": {
        "type": "object",
        "properties": {
          "date_applied": {
            "type": "string",
            "format": "date-time"
          },
          "tag": {
            "$ref": "#/components/schemas/SimpleTag"
          }
        }
      },
      "Merchant": {
        "type": "object",
        "properties": {
          "account_name": {
            "type": "string"
          },
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "is_test": {
            "type": "boolean"
          },
          "type": {
            "type": "string"
          }
        }
      },
      "ContactCreditCard": {
        "type": "object",
        "properties": {
          "card_number": {
            "type": "string"
          },
          "card_type": {
            "type": "string"
          },
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "validation_status": {
            "type": "string"
          }
        }
      },
      "CreateProductImage": {
        "type": "object",
        "required": [
          "file_data",
          "file_name"
        ],
        "properties": {
          "checksum": {
            "type": "string",
            "description": "SHA256 checksum of image in Hex."
          },
          "file_data": {
            "type": "string",
            "description": "The image data, base64 encoded."
          },
          "file_name": {
            "type": "string",
            "description": "The name of the file with extension, must match file data.  Acceptable file types:  [.png, .gif, .jpg, .jpeg]."
          }
        }
      },
      "CampaignLandingPageNodeDTO": {
        "type": "object",
        "properties": {
          "formId": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "landingPageId": {
            "type": "string"
          },
          "leadBucketIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "name": {
            "type": "string"
          },
          "properties": {
            "type": "object"
          },
          "ready": {
            "type": "boolean"
          },
          "type": {
            "type": "string",
            "enum": [
              "WebForm",
              "LandingPage",
              "Survey",
              "LinkClick",
              "EmailOpened",
              "Score",
              "Purchase",
              "FailedPurchase",
              "Quote",
              "WebsiteTrigger",
              "InternalForm",
              "SmartForm",
              "Task",
              "StageMove",
              "Note",
              "Tag",
              "PipelineStageMove",
              "GroSocial",
              "TwitterForm",
              "API",
              "WordPress",
              "NewLandingPage"
            ]
          }
        }
      },
      "RequestCompanyReference": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "HistoricalCounts": {
        "type": "object",
        "properties": {
          "24_hours": {
            "type": "integer",
            "format": "int32"
          },
          "30_days": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "InvoicePayment": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "number"
          },
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "invoice_id": {
            "type": "integer",
            "format": "int64"
          },
          "last_updated": {
            "type": "string",
            "format": "date-time"
          },
          "note": {
            "type": "string"
          },
          "pay_date": {
            "type": "string",
            "format": "date-time"
          },
          "pay_status": {
            "type": "string"
          },
          "payment_id": {
            "type": "integer",
            "format": "int64"
          },
          "refund_invoice_payment_id": {
            "type": "integer",
            "format": "int64"
          },
          "skip_commission": {
            "type": "boolean"
          }
        }
      },
      "ProvincesByCode": {
        "type": "object",
        "required": [
          "provinces"
        ],
        "properties": {
          "provinces": {
            "type": "object",
            "description": "A key-value pair of province code and province name.",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "RestUser": {
        "type": "object",
        "required": [
          "id"
        ],
        "properties": {
          "address": {
            "$ref": "#/components/schemas/Address"
          },
          "company_name": {
            "type": "string"
          },
          "created_by": {
            "type": "integer",
            "format": "int64"
          },
          "date_created": {
            "type": "string",
            "format": "date-time"
          },
          "email_address": {
            "type": "string"
          },
          "family_name": {
            "type": "string"
          },
          "fax_numbers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FaxNumber"
            }
          },
          "given_name": {
            "type": "string"
          },
          "global_user_id": {
            "type": "integer",
            "format": "int64"
          },
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "infusionsoft_id": {
            "type": "string"
          },
          "job_title": {
            "type": "string"
          },
          "last_updated": {
            "type": "string",
            "format": "date-time"
          },
          "last_updated_by": {
            "type": "integer",
            "format": "int64"
          },
          "middle_name": {
            "type": "string"
          },
          "partner": {
            "type": "boolean"
          },
          "phone_numbers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PhoneNumber"
            }
          },
          "preferred_name": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "Active",
              "Invited",
              "Inactive"
            ]
          },
          "time_zone": {
            "type": "string"
          },
          "website": {
            "type": "string"
          }
        }
      },
      "CampaignNodeDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "properties": {
            "type": "object"
          },
          "ready": {
            "type": "boolean"
          },
          "type": {
            "type": "string",
            "enum": [
              "WebForm",
              "LandingPage",
              "Survey",
              "LinkClick",
              "EmailOpened",
              "Score",
              "Purchase",
              "FailedPurchase",
              "Quote",
              "WebsiteTrigger",
              "InternalForm",
              "SmartForm",
              "Task",
              "StageMove",
              "Note",
              "Tag",
              "PipelineStageMove",
              "GroSocial",
              "TwitterForm",
              "API",
              "WordPress",
              "NewLandingPage"
            ]
          }
        }
      },
      "AffiliateCommissionList": {
        "type": "object",
        "properties": {
          "commissions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AffiliateCommission"
            }
          },
          "count": {
            "type": "integer",
            "format": "int32"
          },
          "next": {
            "type": "string"
          },
          "previous": {
            "type": "string"
          }
        }
      },
      "ProductStatus": {
        "type": "object",
        "properties": {
          "product": {
            "$ref": "#/components/schemas/Product_"
          },
          "status": {
            "type": "string",
            "enum": [
              "CREATED",
              "UPDATED",
              "DELETED"
            ]
          }
        }
      },
      "CreateUser": {
        "type": "object",
        "required": [
          "email",
          "given_name"
        ],
        "properties": {
          "admin": {
            "type": "boolean"
          },
          "email": {
            "type": "string"
          },
          "given_name": {
            "type": "string"
          },
          "partner": {
            "type": "boolean"
          }
        }
      },
      "CreateRestCustomFieldOption": {
        "type": "object",
        "properties": {
          "label": {
            "type": "string"
          },
          "options": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateRestCustomFieldOption"
            }
          }
        }
      },
      "ContactList": {
        "type": "object",
        "properties": {
          "contacts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RestPartialContact"
            }
          },
          "count": {
            "type": "integer",
            "format": "int32"
          },
          "next": {
            "type": "string"
          },
          "previous": {
            "type": "string"
          }
        }
      },
      "AchieveApiGoalEvent": {
        "type": "object",
        "required": [
          "contact_id"
        ],
        "properties": {
          "contact_id": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "SetOfIds": {
        "type": "object",
        "required": [
          "ids"
        ],
        "properties": {
          "ids": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            }
          }
        }
      },
      "EmailSentCreate": {
        "type": "object",
        "required": [
          "sent_to_address"
        ],
        "properties": {
          "clicked_date": {
            "type": "string",
            "format": "date-time"
          },
          "contact_id": {
            "type": "integer",
            "format": "int64"
          },
          "headers": {
            "type": "string"
          },
          "html_content": {
            "type": "string",
            "description": "Base64 encoded HTML"
          },
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "opened_date": {
            "type": "string",
            "format": "date-time"
          },
          "original_provider": {
            "type": "string",
            "description": "Provider that sent the email case insensitive, must be in list [GOOGLE, INFUSIONSOFT].  If omitted gets mapped to UNKNOWN.",
            "enum": [
              "UNKNOWN",
              "INFUSIONSOFT",
              "MICROSOFT",
              "GOOGLE"
            ]
          },
          "original_provider_id": {
            "type": "string",
            "description": "Provider id that sent the email, must be unique when combined with provider.  If omitted a UUID without dashes is autogenerated for the record."
          },
          "plain_content": {
            "type": "string",
            "description": "Base64 encoded text"
          },
          "provider_source_id": {
            "type": "string",
            "description": "The email address of the synced email account that generated this message."
          },
          "received_date": {
            "type": "string",
            "format": "date-time"
          },
          "sent_date": {
            "type": "string",
            "format": "date-time"
          },
          "sent_from_address": {
            "type": "string"
          },
          "sent_from_reply_address": {
            "type": "string"
          },
          "sent_to_address": {
            "type": "string"
          },
          "sent_to_bcc_addresses": {
            "type": "string"
          },
          "sent_to_cc_addresses": {
            "type": "string"
          },
          "subject": {
            "type": "string"
          }
        }
      },
      "ProductList": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "format": "int32"
          },
          "next": {
            "type": "string"
          },
          "previous": {
            "type": "string"
          },
          "products": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Product_"
            }
          },
          "sync_token": {
            "type": "string"
          }
        }
      },
      "Product_": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "product_desc": {
            "type": "string"
          },
          "product_name": {
            "type": "string"
          },
          "product_options": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductOption"
            }
          },
          "product_price": {
            "type": "number",
            "format": "double"
          },
          "product_short_desc": {
            "type": "string"
          },
          "sku": {
            "type": "string"
          },
          "status": {
            "type": "integer",
            "format": "int32"
          },
          "sub_category_id": {
            "type": "integer",
            "format": "int64"
          },
          "subscription_only": {
            "type": "boolean"
          },
          "subscription_plans": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SubscriptionPlan_"
            }
          },
          "url": {
            "type": "string"
          }
        }
      },
      "Relationship": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "linked_contact_id": {
            "type": "integer",
            "format": "int64"
          },
          "relationship_type_id": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "OrderItem": {
        "type": "object",
        "properties": {
          "cost": {
            "type": "number",
            "format": "double"
          },
          "description": {
            "type": "string"
          },
          "discount": {
            "type": "number",
            "format": "double"
          },
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "type": "string"
          },
          "notes": {
            "type": "string"
          },
          "price": {
            "type": "number",
            "format": "double"
          },
          "product": {
            "$ref": "#/components/schemas/Product_"
          },
          "quantity": {
            "type": "integer",
            "format": "int32"
          },
          "type": {
            "type": "string"
          }
        }
      },
      "PhoneNumber": {
        "type": "object",
        "required": [
          "field"
        ],
        "properties": {
          "extension": {
            "type": "string"
          },
          "field": {
            "type": "string",
            "enum": [
              "PHONE1",
              "PHONE2",
              "PHONE3",
              "PHONE4",
              "PHONE5"
            ]
          },
          "number": {
            "type": "string"
          },
          "type": {
            "type": "string"
          }
        }
      },
      "SubscriptionList": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "format": "int32"
          },
          "next": {
            "type": "string"
          },
          "previous": {
            "type": "string"
          },
          "subscriptions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Subscription"
            }
          }
        }
      },
      "EmailSendRequestAttachment": {
        "type": "object",
        "properties": {
          "file_data": {
            "type": "string",
            "description": "The content of the attachment, encoded in Base64"
          },
          "file_name": {
            "type": "string",
            "description": "The filename of the attached file, including extension"
          }
        }
      },
      "CountriesByCode": {
        "type": "object",
        "required": [
          "countries"
        ],
        "properties": {
          "countries": {
            "type": "object",
            "description": "A key-value pair of country code and country name.",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "Tag": {
        "type": "object",
        "required": [
          "id",
          "name"
        ],
        "properties": {
          "category": {
            "$ref": "#/components/schemas/TagCategory"
          },
          "description": {
            "type": "string",
            "description": "The tag description"
          },
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "The id for the tag"
          },
          "name": {
            "type": "string",
            "description": "The tag name"
          }
        }
      },
      "CustomFieldMetaData": {
        "type": "object",
        "properties": {
          "field_type": {
            "type": "string",
            "enum": [
              "Currency",
              "Date",
              "DateTime",
              "DayOfWeek",
              "Drilldown",
              "Email",
              "Month",
              "ListBox",
              "Name",
              "WholeNumber",
              "DecimalNumber",
              "Percent",
              "PhoneNumber",
              "Radio",
              "Dropdown",
              "SocialSecurityNumber",
              "State",
              "Text",
              "TextArea",
              "User",
              "UserListBox",
              "Website",
              "Year",
              "YesNo"
            ]
          },
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "label": {
            "type": "string"
          },
          "options": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomFieldOption"
            }
          },
          "record_type": {
            "type": "string",
            "enum": [
              "CONTACT",
              "REFERRAL_PARTNER",
              "OPPORTUNITY",
              "TASK_NOTE_APPOINTMENT",
              "COMPANY",
              "ORDER",
              "SUBSCRIPTION"
            ]
          }
        }
      },
      "CustomFieldValue": {
        "type": "object",
        "properties": {
          "content": {
            "type": "object"
          },
          "id": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "Company": {
        "type": "object",
        "properties": {
          "address": {
            "$ref": "#/components/schemas/CompanyAddress"
          },
          "company_name": {
            "type": "string"
          },
          "custom_fields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomFieldValue"
            }
          },
          "email_address": {
            "type": "string"
          },
          "email_opted_in": {
            "type": "boolean"
          },
          "email_status": {
            "type": "string",
            "enum": [
              "UnengagedMarketable",
              "SingleOptIn",
              "DoubleOptin",
              "Confirmed",
              "UnengagedNonMarketable",
              "NonMarketable",
              "Lockdown",
              "Bounce",
              "HardBounce",
              "Manual",
              "Admin",
              "System",
              "ListUnsubscribe",
              "Feedback",
              "Spam",
              "Invalid",
              "Deactivated"
            ]
          },
          "fax_number": {
            "$ref": "#/components/schemas/CompanyFaxNumber"
          },
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "notes": {
            "type": "string"
          },
          "phone_number": {
            "$ref": "#/components/schemas/CompanyPhoneNumber"
          },
          "website": {
            "type": "string"
          }
        }
      },
      "Task": {
        "type": "object",
        "properties": {
          "completed": {
            "type": "boolean"
          },
          "completion_date": {
            "type": "string"
          },
          "contact": {
            "$ref": "#/components/schemas/BasicContact"
          },
          "creation_date": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "due_date": {
            "type": "string"
          },
          "modification_date": {
            "type": "string"
          },
          "priority": {
            "type": "integer",
            "format": "int32"
          },
          "remind_time": {
            "type": "integer",
            "format": "int32",
            "description": "Value in minutes before start_date to show pop-up reminder.  Acceptable values are [5,10,15,30,60,120,240,480,1440,2880]"
          },
          "title": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "user_id": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "CompanyList": {
        "type": "object",
        "properties": {
          "companies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Company"
            }
          },
          "count": {
            "type": "integer",
            "format": "int32"
          },
          "next": {
            "type": "string"
          },
          "previous": {
            "type": "string"
          }
        }
      },
      "CheckListItemDetails": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string"
          },
          "done_date": {
            "type": "string",
            "format": "date-time"
          },
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "instance_id": {
            "type": "integer",
            "format": "int64"
          },
          "item_order": {
            "type": "integer",
            "format": "int32"
          },
          "required": {
            "type": "boolean"
          }
        }
      },
      "TaskList": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "format": "int32"
          },
          "next": {
            "type": "string"
          },
          "previous": {
            "type": "string"
          },
          "sync_token": {
            "type": "string"
          },
          "tasks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Task"
            }
          }
        }
      },
      "CreateOrder": {
        "type": "object",
        "required": [
          "contact_id",
          "order_date",
          "order_items",
          "order_title",
          "order_type"
        ],
        "properties": {
          "contact_id": {
            "type": "integer",
            "format": "int64"
          },
          "lead_affiliate_id": {
            "type": "integer",
            "format": "int64"
          },
          "order_date": {
            "type": "string",
            "format": "date-time"
          },
          "order_items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateOrderItem"
            }
          },
          "order_title": {
            "type": "string"
          },
          "order_type": {
            "type": "string",
            "enum": [
              "Offline",
              "Online"
            ]
          },
          "promo_codes": {
            "type": "array",
            "description": "Uses multiple strings as promo codes. The corresponding discount will be applied to the order.",
            "items": {
              "type": "string"
            }
          },
          "sales_affiliate_id": {
            "type": "integer",
            "format": "int64"
          },
          "shipping_address": {
            "$ref": "#/components/schemas/AddressInformation"
          }
        }
      },
      "SubscriptionPlan_": {
        "type": "object",
        "properties": {
          "active": {
            "type": "boolean"
          },
          "cycle": {
            "type": "integer",
            "format": "int32"
          },
          "frequency": {
            "type": "integer",
            "format": "int32"
          },
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "number_of_cycles": {
            "type": "integer",
            "format": "int32"
          },
          "plan_price": {
            "type": "number",
            "format": "double"
          },
          "subscription_plan_index": {
            "type": "integer",
            "format": "int32"
          },
          "subscription_plan_name": {
            "type": "string"
          },
          "url": {
            "type": "string"
          }
        }
      },
      "CreateRestCustomField": {
        "type": "object",
        "required": [
          "field_type",
          "label"
        ],
        "properties": {
          "field_type": {
            "type": "string",
            "enum": [
              "Currency",
              "Date",
              "DateTime",
              "DayOfWeek",
              "Drilldown",
              "Email",
              "Month",
              "ListBox",
              "Name",
              "WholeNumber",
              "DecimalNumber",
              "Percent",
              "PhoneNumber",
              "Radio",
              "Dropdown",
              "SocialSecurityNumber",
              "State",
              "Text",
              "TextArea",
              "User",
              "UserListBox",
              "Website",
              "Year",
              "YesNo"
            ]
          },
          "group_id": {
            "type": "integer",
            "format": "int64",
            "description": "An optional tab group to place the field under in the interface.  If not specified, will default to the 'Custom Fields' tab."
          },
          "label": {
            "type": "string"
          },
          "options": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateRestCustomFieldOption"
            }
          },
          "user_group_id": {
            "type": "integer",
            "format": "int64",
            "description": "An optional user group to choose from when selecting values for User or UserListBox fields."
          }
        }
      },
      "CreateSubscription": {
        "type": "object",
        "required": [
          "contact_id"
        ],
        "properties": {
          "allow_duplicate": {
            "type": "boolean",
            "example": false,
            "description": "If true, it will disable the check to see if there is already an identical subscription for the contact. Default is false."
          },
          "allow_tax": {
            "type": "boolean",
            "example": false,
            "description": "Only works if the product the product subscription is for is taxable. Default is false."
          },
          "auto_charge": {
            "type": "boolean",
            "example": false,
            "description": "Defaults to true."
          },
          "billing_amount": {
            "type": "number",
            "format": "double",
            "description": "Must be 0 or greater. Default is the price in the product subscription."
          },
          "contact_id": {
            "type": "integer",
            "format": "int64"
          },
          "credit_card_id": {
            "type": "integer",
            "format": "int64",
            "description": "Default is the contact's most recently used card, if auto charge is true. Default is 0 otherwise."
          },
          "first_bill_date": {
            "type": "string",
            "format": "date",
            "description": "The first day the subscription will bill, in EST. Must not be in the past. Default is today."
          },
          "payment_gateway_id": {
            "type": "integer",
            "format": "int64",
            "description": "Default is the app's default merchant."
          },
          "quantity": {
            "type": "integer",
            "format": "int32",
            "description": "Must be greater than 0. Default is 1."
          },
          "sale_affiliate_id": {
            "type": "integer",
            "format": "int64"
          },
          "subscription_plan_id": {
            "type": "integer",
            "format": "int64",
            "description": "Id of the product subscription."
          }
        }
      },
      "RestEmailAddress": {
        "type": "object",
        "required": [
          "email",
          "opted_in",
          "status"
        ],
        "properties": {
          "email": {
            "type": "string"
          },
          "opted_in": {
            "type": "boolean"
          },
          "status": {
            "type": "string",
            "enum": [
              "Unengaged Marketable",
              "Unconfirmed",
              "Confirmed (Legacy)",
              "Confirmed",
              "Unengaged NonMarketable",
              "Non-marketable",
              "Lockdown",
              "Soft Bounce",
              "Hard Bounce",
              "Opt-Out",
              "Opt-Out: Admin",
              "Opt-Out: System",
              "List Unsubscribe",
              "Provided Feedback",
              "Reported Spam",
              "Invalid Email",
              "Deactivated/Delinquent Mailbox"
            ]
          }
        }
      },
      "OpportunityContact": {
        "type": "object",
        "required": [
          "id"
        ],
        "properties": {
          "company_name": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "first_name": {
            "type": "string"
          },
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "job_title": {
            "type": "string"
          },
          "last_name": {
            "type": "string"
          },
          "phone_number": {
            "type": "string"
          }
        }
      },
      "OrderContactDetails": {
        "type": "object",
        "properties": {
          "company_name": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "first_name": {
            "type": "string"
          },
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "job_title": {
            "type": "string"
          },
          "last_name": {
            "type": "string"
          }
        }
      },
      "CategoryReference": {
        "type": "object",
        "required": [
          "id"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "The id for the tag category"
          }
        }
      },
      "RestHook": {
        "type": "object",
        "properties": {
          "eventKey": {
            "type": "string"
          },
          "hookUrl": {
            "type": "string"
          },
          "key": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "Unverified",
              "Verified",
              "Inactive"
            ]
          }
        }
      },
      "ProductOptionValue": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "index": {
            "type": "integer",
            "format": "int64"
          },
          "is_default": {
            "type": "boolean"
          },
          "label": {
            "type": "string"
          },
          "price_adjustment": {
            "type": "number",
            "format": "double"
          },
          "sku": {
            "type": "string"
          }
        }
      },
      "FullContact": {
        "type": "object",
        "properties": {
          "addresses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContactAddress"
            }
          },
          "anniversary": {
            "type": "string",
            "format": "date-time"
          },
          "birthday": {
            "type": "string",
            "format": "date-time"
          },
          "company": {
            "$ref": "#/components/schemas/CompanyReference"
          },
          "contact_type": {
            "type": "string"
          },
          "custom_fields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomFieldValue"
            }
          },
          "date_created": {
            "type": "string",
            "format": "date-time"
          },
          "email_addresses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EmailAddress"
            }
          },
          "email_opted_in": {
            "type": "boolean"
          },
          "email_status": {
            "type": "string",
            "enum": [
              "UnengagedMarketable",
              "SingleOptIn",
              "DoubleOptin",
              "Confirmed",
              "UnengagedNonMarketable",
              "NonMarketable",
              "Lockdown",
              "Bounce",
              "HardBounce",
              "Manual",
              "Admin",
              "System",
              "ListUnsubscribe",
              "Feedback",
              "Spam",
              "Invalid",
              "Deactivated"
            ]
          },
          "family_name": {
            "type": "string"
          },
          "fax_numbers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FaxNumber"
            }
          },
          "given_name": {
            "type": "string"
          },
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "job_title": {
            "type": "string"
          },
          "last_updated": {
            "type": "string",
            "format": "date-time"
          },
          "lead_source_id": {
            "type": "integer",
            "format": "int64"
          },
          "middle_name": {
            "type": "string"
          },
          "opt_in_reason": {
            "type": "string"
          },
          "origin": {
            "$ref": "#/components/schemas/ContactOrigin"
          },
          "owner_id": {
            "type": "integer",
            "format": "int64"
          },
          "phone_numbers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PhoneNumber"
            }
          },
          "preferred_locale": {
            "type": "string",
            "example": "en_US"
          },
          "preferred_name": {
            "type": "string"
          },
          "prefix": {
            "type": "string"
          },
          "relationships": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Relationship"
            }
          },
          "social_accounts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SocialAccount"
            }
          },
          "source_type": {
            "type": "string",
            "enum": [
              "WEBFORM",
              "LANDINGPAGE",
              "IMPORT",
              "MANUAL",
              "API",
              "OTHER",
              "UNKNOWN"
            ]
          },
          "spouse_name": {
            "type": "string"
          },
          "suffix": {
            "type": "string"
          },
          "tag_ids": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            }
          },
          "time_zone": {
            "type": "string"
          },
          "website": {
            "type": "string"
          }
        }
      },
      "CreateContactOrigin": {
        "type": "object",
        "required": [
          "ip_address"
        ],
        "properties": {
          "ip_address": {
            "type": "string"
          }
        }
      },
      "CreateOrPatchContact": {
        "type": "object",
        "properties": {
          "addresses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContactAddress"
            }
          },
          "anniversary": {
            "type": "string",
            "format": "date-time"
          },
          "birthday": {
            "type": "string",
            "format": "date-time"
          },
          "company": {
            "$ref": "#/components/schemas/RequestCompanyReference"
          },
          "contact_type": {
            "type": "string"
          },
          "custom_fields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomFieldValue"
            }
          },
          "email_addresses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EmailAddress"
            }
          },
          "family_name": {
            "type": "string"
          },
          "fax_numbers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FaxNumber"
            }
          },
          "given_name": {
            "type": "string"
          },
          "job_title": {
            "type": "string"
          },
          "lead_source_id": {
            "type": "integer",
            "format": "int64"
          },
          "middle_name": {
            "type": "string"
          },
          "opt_in_reason": {
            "type": "string"
          },
          "origin": {
            "$ref": "#/components/schemas/CreateContactOrigin"
          },
          "owner_id": {
            "type": "integer",
            "format": "int64"
          },
          "phone_numbers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PhoneNumber"
            }
          },
          "preferred_locale": {
            "type": "string",
            "example": "en_US"
          },
          "preferred_name": {
            "type": "string"
          },
          "prefix": {
            "type": "string"
          },
          "social_accounts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SocialAccount"
            }
          },
          "source_type": {
            "type": "string",
            "enum": [
              "WEBFORM",
              "LANDINGPAGE",
              "IMPORT",
              "MANUAL",
              "API",
              "OTHER",
              "UNKNOWN"
            ]
          },
          "spouse_name": {
            "type": "string"
          },
          "suffix": {
            "type": "string"
          },
          "time_zone": {
            "type": "string"
          },
          "website": {
            "type": "string"
          }
        }
      },
      "OpportunityList": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "format": "int32"
          },
          "next": {
            "type": "string"
          },
          "opportunities": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Opportunity"
            }
          },
          "previous": {
            "type": "string"
          }
        }
      },
      "Order": {
        "type": "object",
        "properties": {
          "allow_payment": {
            "type": "boolean"
          },
          "allow_paypal": {
            "type": "boolean"
          },
          "contact": {
            "$ref": "#/components/schemas/OrderContactDetails"
          },
          "creation_date": {
            "type": "string"
          },
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "lead_affiliate_id": {
            "type": "integer",
            "format": "int64"
          },
          "modification_date": {
            "type": "string"
          },
          "notes": {
            "type": "string"
          },
          "order_date": {
            "type": "string"
          },
          "order_items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrderItem"
            }
          },
          "payment_plan": {
            "$ref": "#/components/schemas/PaymentPlan"
          },
          "recurring": {
            "type": "boolean"
          },
          "refund_total": {
            "type": "number",
            "format": "double"
          },
          "sales_affiliate_id": {
            "type": "integer",
            "format": "int64"
          },
          "shipping_information": {
            "$ref": "#/components/schemas/AddressInformation"
          },
          "status": {
            "type": "string"
          },
          "terms": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "total": {
            "type": "number",
            "format": "double"
          },
          "total_due": {
            "type": "number",
            "format": "double"
          },
          "total_paid": {
            "type": "number",
            "format": "double"
          }
        }
      },
      "GoalEventResultDTO": {
        "type": "object",
        "properties": {
          "campaign_id": {
            "type": "integer",
            "format": "int64"
          },
          "goal_id": {
            "type": "integer",
            "format": "int64"
          },
          "message": {
            "type": "string"
          },
          "success": {
            "type": "boolean"
          }
        }
      },
      "FileList": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "format": "int32"
          },
          "files": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FileDescriptor"
            }
          },
          "next": {
            "type": "string"
          },
          "previous": {
            "type": "string"
          }
        }
      },
      "Setting": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string"
          }
        }
      },
      "AffiliateCommission": {
        "type": "object",
        "properties": {
          "amount_earned": {
            "type": "number",
            "format": "float"
          },
          "contact_first_name": {
            "type": "string"
          },
          "contact_id": {
            "type": "integer",
            "format": "int64"
          },
          "contact_last_name": {
            "type": "string"
          },
          "date_earned": {
            "type": "string",
            "format": "date-time"
          },
          "description": {
            "type": "string"
          },
          "invoice_id": {
            "type": "integer",
            "format": "int64"
          },
          "product_name": {
            "type": "string"
          },
          "sales_affiliate_id": {
            "type": "integer",
            "format": "int64"
          },
          "sold_by_first_name": {
            "type": "string"
          },
          "sold_by_last_name": {
            "type": "string"
          }
        }
      },
      "Sequence": {
        "type": "object",
        "properties": {
          "active_contact_count": {
            "type": "integer",
            "format": "int32"
          },
          "active_contact_count_completed": {
            "type": "integer",
            "format": "int32"
          },
          "historical_contact_count": {
            "$ref": "#/components/schemas/HistoricalCounts"
          },
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "type": "string"
          },
          "paths": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SequencePath"
            }
          }
        }
      },
      "TransactionList": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "format": "int32"
          },
          "next": {
            "type": "string"
          },
          "previous": {
            "type": "string"
          },
          "transactions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Transaction"
            }
          }
        }
      },
      "UpsertContact": {
        "type": "object",
        "properties": {
          "addresses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContactAddress"
            }
          },
          "anniversary": {
            "type": "string",
            "format": "date-time"
          },
          "birthday": {
            "type": "string",
            "format": "date-time"
          },
          "company": {
            "$ref": "#/components/schemas/RequestCompanyReference"
          },
          "contact_type": {
            "type": "string"
          },
          "custom_fields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomFieldValue"
            }
          },
          "duplicate_option": {
            "type": "string",
            "enum": [
              "Email",
              "EmailAndName"
            ]
          },
          "email_addresses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EmailAddress"
            }
          },
          "family_name": {
            "type": "string"
          },
          "fax_numbers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FaxNumber"
            }
          },
          "given_name": {
            "type": "string"
          },
          "job_title": {
            "type": "string"
          },
          "lead_source_id": {
            "type": "integer",
            "format": "int64"
          },
          "middle_name": {
            "type": "string"
          },
          "opt_in_reason": {
            "type": "string"
          },
          "origin": {
            "$ref": "#/components/schemas/CreateContactOrigin"
          },
          "owner_id": {
            "type": "integer",
            "format": "int64"
          },
          "phone_numbers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PhoneNumber"
            }
          },
          "preferred_locale": {
            "type": "string",
            "example": "en_US"
          },
          "preferred_name": {
            "type": "string"
          },
          "prefix": {
            "type": "string"
          },
          "social_accounts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SocialAccount"
            }
          },
          "source_type": {
            "type": "string",
            "enum": [
              "WEBFORM",
              "LANDINGPAGE",
              "IMPORT",
              "MANUAL",
              "API",
              "OTHER",
              "UNKNOWN"
            ]
          },
          "spouse_name": {
            "type": "string"
          },
          "suffix": {
            "type": "string"
          },
          "time_zone": {
            "type": "string"
          },
          "website": {
            "type": "string"
          }
        }
      },
      "EmailSendRequest": {
        "type": "object",
        "required": [
          "contacts",
          "subject",
          "user_id"
        ],
        "properties": {
          "address_field": {
            "type": "string",
            "description": "Email field of each Contact record to address the email to, such as 'Email', 'EmailAddress2', 'EmailAddress3' or '_CustomFieldName', defaulting to the contact's primary email"
          },
          "attachments": {
            "type": "array",
            "description": "Attachments to be sent with each copy of the email, maximum of 10 with size of 1MB each",
            "items": {
              "$ref": "#/components/schemas/EmailSendRequestAttachment"
            }
          },
          "contacts": {
            "type": "array",
            "description": "An array of Contact Ids to receive the email",
            "items": {
              "type": "integer",
              "format": "int64"
            }
          },
          "html_content": {
            "type": "string",
            "description": "The HTML-formatted content of the email, encoded in Base64"
          },
          "plain_content": {
            "type": "string",
            "description": "The plain-text content of the email, encoded in Base64"
          },
          "subject": {
            "type": "string",
            "description": "The subject line of the email"
          },
          "user_id": {
            "type": "integer",
            "format": "int64",
            "description": "The infusionsoft user to send the email on behalf of"
          }
        }
      },
      "Campaign": {
        "type": "object",
        "properties": {
          "active_contact_count": {
            "type": "integer",
            "format": "int32"
          },
          "completed_contact_count": {
            "type": "integer",
            "format": "int32"
          },
          "created_by_global_id": {
            "type": "integer",
            "format": "int64"
          },
          "date_created": {
            "type": "string",
            "format": "date-time"
          },
          "error_message": {
            "type": "string"
          },
          "goals": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Goal"
            }
          },
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "locked": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "published_date": {
            "type": "string",
            "format": "date-time"
          },
          "published_status": {
            "type": "boolean"
          },
          "published_time_zone": {
            "type": "string"
          },
          "sequences": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Sequence"
            }
          },
          "time_zone": {
            "type": "string"
          }
        }
      },
      "Transaction": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "number",
            "format": "double"
          },
          "collection_method": {
            "type": "string"
          },
          "contact_id": {
            "type": "integer",
            "format": "int64"
          },
          "currency": {
            "type": "string"
          },
          "errors": {
            "type": "string"
          },
          "gateway": {
            "type": "string"
          },
          "gateway_account_name": {
            "type": "string"
          },
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "order_ids": {
            "type": "string"
          },
          "orders": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Order"
            }
          },
          "status": {
            "type": "string"
          },
          "test": {
            "type": "boolean"
          },
          "transaction_date": {
            "type": "string"
          },
          "type": {
            "type": "string"
          }
        }
      },
      "BasicContact": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string"
          },
          "first_name": {
            "type": "string"
          },
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "last_name": {
            "type": "string"
          }
        }
      },
      "PaymentPlan": {
        "type": "object",
        "required": [
          "days_between_payments",
          "number_of_payments",
          "plan_start_date"
        ],
        "properties": {
          "auto_charge": {
            "type": "boolean"
          },
          "credit_card_id": {
            "type": "integer",
            "format": "int64"
          },
          "days_between_payments": {
            "type": "integer",
            "format": "int32"
          },
          "initial_payment_amount": {
            "type": "number",
            "format": "double"
          },
          "initial_payment_date": {
            "type": "string",
            "format": "date"
          },
          "number_of_payments": {
            "type": "integer",
            "format": "int32"
          },
          "payment_gateway": {
            "$ref": "#/components/schemas/PaymentGateway"
          },
          "plan_start_date": {
            "type": "string",
            "format": "date"
          }
        }
      },
      "Throwable": {
        "type": "object",
        "properties": {
          "cause": {
            "$ref": "#/components/schemas/Throwable"
          },
          "localizedMessage": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "stackTrace": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StackTraceElement"
            }
          },
          "suppressed": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Throwable"
            }
          }
        }
      },
      "UserInfoDTO": {
        "type": "object",
        "required": [
          "email",
          "family_name",
          "given_name",
          "global_user_id",
          "infusionsoft_id",
          "sub"
        ],
        "properties": {
          "email": {
            "type": "string"
          },
          "family_name": {
            "type": "string"
          },
          "given_name": {
            "type": "string"
          },
          "global_user_id": {
            "type": "integer",
            "format": "int64"
          },
          "infusionsoft_id": {
            "type": "string"
          },
          "middle_name": {
            "type": "string"
          },
          "preferred_name": {
            "type": "string"
          },
          "sub": {
            "type": "string"
          }
        }
      },
      "SimpleTag": {
        "type": "object",
        "properties": {
          "category": {
            "type": "string"
          },
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "CreateTag": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "category": {
            "$ref": "#/components/schemas/CategoryReference"
          },
          "description": {
            "type": "string",
            "description": "The tag description"
          },
          "name": {
            "type": "string",
            "description": "The tag name"
          }
        }
      },
      "SimpleUser": {
        "type": "object",
        "properties": {
          "first_name": {
            "type": "string"
          },
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "last_name": {
            "type": "string"
          }
        }
      },
      "TaggedContactList": {
        "type": "object",
        "properties": {
          "contacts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TaggedContact"
            }
          },
          "count": {
            "type": "integer",
            "format": "int32"
          },
          "next": {
            "type": "string"
          },
          "previous": {
            "type": "string"
          }
        }
      },
      "CompanyReference": {
        "type": "object",
        "properties": {
          "company_name": {
            "type": "string"
          },
          "id": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "NoteList": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "format": "int32"
          },
          "next": {
            "type": "string"
          },
          "notes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Note"
            }
          },
          "previous": {
            "type": "string"
          }
        }
      },
      "PaymentResult": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "invoice_id": {
            "type": "integer",
            "format": "int64"
          },
          "payment_amount": {
            "type": "number",
            "format": "double"
          },
          "payment_status": {
            "type": "string"
          },
          "transaction_id": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "RestHookRequest": {
        "type": "object",
        "properties": {
          "eventKey": {
            "type": "string"
          },
          "hookUrl": {
            "type": "string"
          }
        }
      },
      "EmailSentCreateList": {
        "type": "object",
        "properties": {
          "emails": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EmailSentCreate"
            }
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EmailSentCreateError"
            }
          }
        }
      },
      "CompanyAddress": {
        "type": "object",
        "properties": {
          "country_code": {
            "type": "string"
          },
          "line1": {
            "type": "string"
          },
          "line2": {
            "type": "string"
          },
          "locality": {
            "type": "string"
          },
          "region": {
            "type": "string"
          },
          "zip_code": {
            "type": "string"
          },
          "zip_four": {
            "type": "string"
          }
        }
      },
      "CreateProductSubscription": {
        "type": "object",
        "required": [
          "cycle_type",
          "plan_price"
        ],
        "properties": {
          "active": {
            "type": "boolean"
          },
          "cycle_type": {
            "type": "string",
            "enum": [
              "YEAR",
              "MONTH",
              "WEEK",
              "DAY"
            ]
          },
          "frequency": {
            "type": "integer",
            "format": "int32"
          },
          "number_of_cycles": {
            "type": "integer",
            "format": "int32"
          },
          "plan_price": {
            "type": "number",
            "format": "double"
          },
          "subscription_plan_index": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "CustomFieldOption": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "label": {
            "type": "string"
          },
          "options": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomFieldOption"
            }
          }
        }
      },
      "PaymentGateway": {
        "type": "object",
        "properties": {
          "merchant_account_id": {
            "type": "integer",
            "format": "int64"
          },
          "use_default": {
            "type": "boolean"
          }
        }
      },
      "Opportunity": {
        "type": "object",
        "required": [
          "contact",
          "opportunity_title",
          "stage"
        ],
        "properties": {
          "affiliate_id": {
            "type": "integer",
            "format": "int64"
          },
          "contact": {
            "$ref": "#/components/schemas/OpportunityContact"
          },
          "custom_fields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomFieldValue"
            }
          },
          "date_created": {
            "type": "string",
            "format": "date-time"
          },
          "estimated_close_date": {
            "type": "string",
            "format": "date-time"
          },
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "include_in_forecast": {
            "type": "integer",
            "format": "int32"
          },
          "last_updated": {
            "type": "string",
            "format": "date-time"
          },
          "next_action_date": {
            "type": "string",
            "format": "date-time"
          },
          "next_action_notes": {
            "type": "string"
          },
          "opportunity_notes": {
            "type": "string"
          },
          "opportunity_title": {
            "type": "string"
          },
          "projected_revenue_high": {
            "type": "number",
            "format": "double"
          },
          "projected_revenue_low": {
            "type": "number",
            "format": "double"
          },
          "stage": {
            "$ref": "#/components/schemas/SimpleOpportunityStage"
          },
          "user": {
            "$ref": "#/components/schemas/SimpleUser"
          }
        }
      },
      "AppointmentList": {
        "type": "object",
        "properties": {
          "appointments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Appointment"
            }
          },
          "count": {
            "type": "integer",
            "format": "int32"
          },
          "next": {
            "type": "string"
          },
          "previous": {
            "type": "string"
          },
          "sync_token": {
            "type": "string"
          }
        }
      },
      "TagCategory": {
        "type": "object",
        "required": [
          "id",
          "name"
        ],
        "properties": {
          "description": {
            "type": "string",
            "description": "The category description"
          },
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "The id for the tag category"
          },
          "name": {
            "type": "string",
            "description": "The category name"
          }
        }
      },
      "FileUpload": {
        "type": "object",
        "required": [
          "contact_id",
          "file_association",
          "file_data",
          "file_name",
          "is_public"
        ],
        "properties": {
          "file_name": {
            "type": "string"
          },
          "file_data": {
            "type": "string"
          },
          "contact_id": {
            "type": "integer",
            "format": "int64"
          },
          "is_public": {
            "type": "boolean"
          },
          "file_association": {
            "type": "string",
            "enum": [
              "CONTACT",
              "USER",
              "COMPANY"
            ]
          }
        }
      },
      "ProductOption": {
        "type": "object",
        "properties": {
          "allow_spaces": {
            "type": "boolean"
          },
          "can_contain_character": {
            "type": "boolean"
          },
          "can_contain_number": {
            "type": "boolean"
          },
          "can_end_with_character": {
            "type": "boolean"
          },
          "can_end_with_number": {
            "type": "boolean"
          },
          "can_start_with_character": {
            "type": "boolean"
          },
          "can_start_with_number": {
            "type": "boolean"
          },
          "display_index": {
            "type": "integer",
            "format": "int32"
          },
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "label": {
            "type": "string"
          },
          "max_chars": {
            "type": "integer",
            "format": "int32"
          },
          "min_chars": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          },
          "required": {
            "type": "boolean"
          },
          "text_message": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "FixedList",
              "Variable"
            ]
          },
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductOptionValue"
            }
          }
        }
      },
      "TaggedCompany": {
        "type": "object",
        "properties": {
          "company": {
            "$ref": "#/components/schemas/BasicCompany"
          },
          "date_applied": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "FileInformation": {
        "type": "object",
        "properties": {
          "file_data": {
            "type": "string"
          },
          "file_descriptor": {
            "$ref": "#/components/schemas/FileDescriptor"
          }
        }
      },
      "NoteUser": {
        "type": "object",
        "properties": {
          "family_name": {
            "type": "string"
          },
          "given_name": {
            "type": "string"
          },
          "user_id": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "CompanyFaxNumber": {
        "type": "object",
        "properties": {
          "number": {
            "type": "string"
          },
          "type": {
            "type": "string"
          }
        }
      },
      "CreatePayment": {
        "type": "object",
        "properties": {
          "apply_to_commissions": {
            "type": "boolean"
          },
          "charge_now": {
            "type": "boolean"
          },
          "credit_card_id": {
            "type": "integer",
            "format": "int64"
          },
          "date": {
            "type": "string",
            "format": "date-time",
            "description": "Used when charge_now:false or inserting historical data. ex `2017-01-01T22:17:59.039Z`"
          },
          "notes": {
            "type": "string"
          },
          "payment_amount": {
            "type": "string"
          },
          "payment_gateway_id": {
            "type": "string"
          },
          "payment_method_type": {
            "type": "string",
            "enum": [
              "CREDIT_CARD",
              "CASH",
              "CHECK"
            ]
          }
        }
      },
      "SimpleProduct": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string"
          },
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "type": "string"
          },
          "shippable": {
            "type": "boolean"
          },
          "sku": {
            "type": "string"
          },
          "taxable": {
            "type": "boolean"
          }
        }
      },
      "ProductSubscription": {
        "type": "object",
        "required": [
          "cycle_type",
          "id",
          "plan_price"
        ],
        "properties": {
          "active": {
            "type": "boolean"
          },
          "cycle_type": {
            "type": "string",
            "enum": [
              "YEAR",
              "MONTH",
              "WEEK",
              "DAY"
            ]
          },
          "frequency": {
            "type": "integer",
            "format": "int32"
          },
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "number_of_cycles": {
            "type": "integer",
            "format": "int32"
          },
          "plan_price": {
            "type": "number",
            "format": "double"
          },
          "subscription_plan_index": {
            "type": "integer",
            "format": "int32"
          },
          "subscription_plan_name": {
            "type": "string"
          },
          "url": {
            "type": "string"
          }
        }
      },
      "Error": {
        "type": "object",
        "properties": {
          "cause": {
            "$ref": "#/components/schemas/Throwable"
          },
          "localizedMessage": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "stackTrace": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StackTraceElement"
            }
          },
          "suppressed": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Throwable"
            }
          }
        }
      },
      "SocialAccount": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "Facebook",
              "Twitter",
              "LinkedIn"
            ]
          }
        }
      },
      "EmailSentQueryResultList": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "format": "int32"
          },
          "emails": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EmailSentQueryResult"
            }
          },
          "next": {
            "type": "string"
          },
          "previous": {
            "type": "string"
          }
        }
      },
      "CreditCard": {
        "type": "object",
        "properties": {
          "address": {
            "$ref": "#/components/schemas/ContactAddress"
          },
          "card_number": {
            "type": "string"
          },
          "card_type": {
            "type": "string"
          },
          "email_address": {
            "type": "string"
          },
          "expiration_month": {
            "type": "string"
          },
          "expiration_year": {
            "type": "string"
          },
          "maestro_issue_number": {
            "type": "string"
          },
          "maestro_start_date_month": {
            "type": "string"
          },
          "maestro_start_date_year": {
            "type": "string"
          },
          "name_on_card": {
            "type": "string"
          },
          "verification_code": {
            "type": "string"
          }
        }
      },
      "FileDescriptor": {
        "type": "object",
        "required": [
          "id"
        ],
        "properties": {
          "category": {
            "type": "string",
            "enum": [
              "Attachments",
              "Cart",
              "Documents",
              "Hidden",
              "Invoice",
              "Logo",
              "Tickets",
              "WebForm",
              "Funnel"
            ]
          },
          "contact_id": {
            "type": "integer",
            "format": "int64"
          },
          "created_by": {
            "type": "integer",
            "format": "int64"
          },
          "date_created": {
            "type": "string",
            "format": "date-time"
          },
          "download_url": {
            "type": "string"
          },
          "file_box_type": {
            "type": "string",
            "enum": [
              "Application",
              "Image",
              "Fax",
              "Attachment",
              "Ticket",
              "Contact",
              "DigitalProduct",
              "Import",
              "Hidden",
              "WebForm",
              "StyledCart",
              "ReSampledImage",
              "TemplateThumbnail",
              "Funnel",
              "LogoThumbnail"
            ]
          },
          "file_name": {
            "type": "string"
          },
          "file_size": {
            "type": "integer",
            "format": "int64"
          },
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "last_updated": {
            "type": "string",
            "format": "date-time"
          },
          "public": {
            "type": "boolean"
          },
          "remote_file_key": {
            "type": "string"
          }
        }
      },
      "RequestNote": {
        "type": "object",
        "required": [
          "contact_id"
        ],
        "properties": {
          "body": {
            "type": "string"
          },
          "contact_id": {
            "type": "integer",
            "format": "int64"
          },
          "title": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "Appointment",
              "Call",
              "Email",
              "Fax",
              "Letter",
              "Other"
            ]
          },
          "user_id": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "RestMerchantAccountResponse": {
        "type": "object",
        "properties": {
          "default_merchant_account": {
            "type": "integer",
            "format": "int64"
          },
          "merchant_accounts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Merchant"
            }
          }
        }
      },
      "TagId": {
        "type": "object",
        "properties": {
          "tagIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            }
          }
        }
      },
      "BasicCompany": {
        "type": "object",
        "properties": {
          "company_name": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "id": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "StageDetails": {
        "type": "object",
        "properties": {
          "check_list_items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CheckListItemDetails"
            }
          },
          "probability": {
            "type": "integer",
            "format": "int32"
          },
          "stage_order": {
            "type": "integer",
            "format": "int32"
          },
          "target_num_days": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "OrderList": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "format": "int32"
          },
          "next": {
            "type": "string"
          },
          "orders": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Order"
            }
          },
          "previous": {
            "type": "string"
          }
        }
      },
      "CampaignList": {
        "type": "object",
        "properties": {
          "campaigns": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Campaign"
            }
          },
          "count": {
            "type": "integer",
            "format": "int32"
          },
          "next": {
            "type": "string"
          },
          "previous": {
            "type": "string"
          }
        }
      },
      "EmailSentQueryResult": {
        "type": "object",
        "properties": {
          "clicked_date": {
            "type": "string",
            "format": "date-time"
          },
          "contact_id": {
            "type": "integer",
            "format": "int64"
          },
          "headers": {
            "type": "string"
          },
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "opened_date": {
            "type": "string",
            "format": "date-time"
          },
          "original_provider": {
            "type": "string",
            "enum": [
              "UNKNOWN",
              "INFUSIONSOFT",
              "MICROSOFT",
              "GOOGLE"
            ]
          },
          "original_provider_id": {
            "type": "string"
          },
          "received_date": {
            "type": "string",
            "format": "date-time"
          },
          "sent_date": {
            "type": "string",
            "format": "date-time"
          },
          "sent_from_address": {
            "type": "string"
          },
          "sent_from_reply_address": {
            "type": "string"
          },
          "sent_to_address": {
            "type": "string"
          },
          "sent_to_bcc_addresses": {
            "type": "string"
          },
          "sent_to_cc_addresses": {
            "type": "string"
          },
          "subject": {
            "type": "string"
          }
        }
      },
      "Account_Profile": {
        "type": "object",
        "properties": {
          "address": {
            "$ref": "#/components/schemas/ContactAddress"
          },
          "business_goals": {
            "type": "array",
            "description": "The goals of this business, ie. Grow Business, Convert more leads",
            "items": {
              "type": "string"
            }
          },
          "business_primary_color": {
            "type": "string"
          },
          "business_secondary_color": {
            "type": "string"
          },
          "business_type": {
            "type": "string",
            "description": "The type of business"
          },
          "currency_code": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "language_tag": {
            "type": "string"
          },
          "logo_url": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "phone": {
            "type": "string"
          },
          "phone_ext": {
            "type": "string"
          },
          "time_zone": {
            "type": "string"
          },
          "website": {
            "type": "string"
          }
        },
        "description": "Information about the company that owns/uses this account"
      },
      "Entry_long_string_": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "DUPLICATE",
              "CONTACT_NOT_FOUND",
              "TAG_ID_NOT_FOUND",
              "FAILURE",
              "NO_PERMISSION"
            ]
          }
        }
      }
    }
  }
}